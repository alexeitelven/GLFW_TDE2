
;; Function void __debugbreak() (null)
;; enabled by -tree-original


<<cleanup_point __asm__ __volatile__("int {$}3"::)>>;


;; Function int vfscanf(FILE*, const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vfscanf (__stream, __format, __local_argv)>>;


;; Function int vsscanf(const char*, const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vsscanf (__source, __format, __local_argv)>>;


;; Function int vscanf(const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vscanf (__format, __local_argv)>>;


;; Function int vsnprintf(char*, size_t, const char*, va_list) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vsnprintf (__stream, __n, __format, __local_argv)>>;


;; Function int snprintf(char*, size_t, const char*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __ms_vsnprintf (__stream, __n, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vfwscanf(FILE*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vfwscanf (__stream, __format, __local_argv)>>;


;; Function int vswscanf(const wchar_t*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vswscanf (__source, __format, __local_argv)>>;


;; Function int vwscanf(const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vwscanf (__format, __local_argv)>>;


;; Function int snwprintf(wchar_t*, size_t, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int r;
  char * argp;

    int r;
    char * argp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &argp, format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = _vsnwprintf (s, n, format, argp)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &argp) >>>>>;
  return <retval> = r;
}


;; Function int vsnwprintf(wchar_t*, size_t, const wchar_t*, va_list) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _vsnwprintf (s, n, format, arg)>>;


;; Function int vswprintf(wchar_t*, size_t, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = vsnwprintf (__stream, __count, __format, __local_argv)>>;


;; Function int swprintf(wchar_t*, size_t, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = vswprintf (__stream, __count, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vswprintf(wchar_t*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _vswprintf (__stream, __format, __local_argv)>>;


;; Function int swprintf(wchar_t*, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = vswprintf (__stream, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function long long int _abs64(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <x>;


;; Function double strtod(const char*, char**) (null)
;; enabled by -tree-original


{
  extern double __mingw_strtod (const char *, char * *);

  <<cleanup_point return <retval> = __mingw_strtod (_Str, _EndPtr)>>;
}


;; Function float strtof(const char*, char**) (null)
;; enabled by -tree-original


{
  extern float __mingw_strtof (const char *, char * *);

  <<cleanup_point return <retval> = __mingw_strtof (_Str, _EndPtr)>>;
}


;; Function double wcstod(const wchar_t*, wchar_t**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_wcstod (_Str, _EndPtr)>>;


;; Function float wcstof(const wchar_t*, wchar_t**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_wcstof (_Str, _EndPtr)>>;


;; Function void* _MarkAllocaS(void*, unsigned int) (null)
;; enabled by -tree-original


if (_Ptr != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(unsigned int *) _Ptr = _Marker) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_Ptr = _Ptr + 16) >>>>>;
  }
return <retval> = _Ptr;


;; Function void _freea(void*) (null)
;; enabled by -tree-original


{
  unsigned int _Marker;

    unsigned int _Marker;
  if (_Memory != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_Memory = _Memory + 18446744073709551600) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_Marker = *(unsigned int *) _Memory) >>>>>;
      if (_Marker == 56797)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  free (_Memory) >>>>>;
        }
    }
}


;; Function long int std::abs(long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__i>;


;; Function long long int std::abs(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr double std::abs(double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::abs(float) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::abs(long double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __int128 std::abs(__int128) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __float128 std::abs(__float128) (null)
;; enabled by -tree-original


return <retval> = __x < 0.0 ? -NON_LVALUE_EXPR <__x> : __x;


;; Function ldiv_t std::div(long int, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.21762, ldiv (__i, __j)>>>;


;; Function lldiv_t __gnu_cxx::div(long long int, long long int) (null)
;; enabled by -tree-original


{
  struct lldiv_t __q [value-expr: <retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval>.quot = __n / __d) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval>.rem = __n % __d) >>>>>;
  <<cleanup_point return <retval>>>;
}


;; Function bool __gnu_cxx::__is_null_pointer(std::nullptr_t) (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr float std::acos(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acosf (__x)>>;


;; Function constexpr long double std::acos(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acosl (__x)>>;


;; Function constexpr float std::asin(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_asinf (__x)>>;


;; Function constexpr long double std::asin(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_asinl (__x)>>;


;; Function constexpr float std::atan(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_atanf (__x);


;; Function constexpr long double std::atan(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_atanl (__x);


;; Function constexpr float std::atan2(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atan2f (__y, __x)>>;


;; Function constexpr long double std::atan2(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atan2l (__y, __x)>>;


;; Function constexpr float std::ceil(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_ceilf (__x);


;; Function constexpr long double std::ceil(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_ceill (__x);


;; Function constexpr float std::cos(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_cosf (__x);


;; Function constexpr long double std::cos(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_cosl (__x);


;; Function constexpr float std::cosh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_coshf (__x)>>;


;; Function constexpr long double std::cosh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_coshl (__x)>>;


;; Function constexpr float std::exp(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expf (__x)>>;


;; Function constexpr long double std::exp(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expl (__x)>>;


;; Function constexpr float std::fabs(float) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::fabs(long double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::floor(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_floorf (__x);


;; Function constexpr long double std::floor(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_floorl (__x);


;; Function constexpr float std::fmod(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fmodf (__x, __y)>>;


;; Function constexpr long double std::fmod(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fmodl (__x, __y)>>;


;; Function float std::frexp(float, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_frexpf (__x, __exp)>>;


;; Function long double std::frexp(long double, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_frexpl (__x, __exp)>>;


;; Function constexpr float std::ldexp(float, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ldexpf (__x, __exp)>>;


;; Function constexpr long double std::ldexp(long double, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ldexpl (__x, __exp)>>;


;; Function constexpr float std::log(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logf (__x)>>;


;; Function constexpr long double std::log(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logl (__x)>>;


;; Function constexpr float std::log10(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log10f (__x)>>;


;; Function constexpr long double std::log10(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log10l (__x)>>;


;; Function float std::modf(float, float*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_modff (__x, __iptr)>>;


;; Function long double std::modf(long double, long double*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_modfl (__x, __iptr)>>;


;; Function constexpr float std::pow(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_powf (__x, __y)>>;


;; Function constexpr long double std::pow(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_powl (__x, __y)>>;


;; Function constexpr float std::sin(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_sinf (__x);


;; Function constexpr long double std::sin(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_sinl (__x);


;; Function constexpr float std::sinh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sinhf (__x)>>;


;; Function constexpr long double std::sinh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sinhl (__x)>>;


;; Function constexpr float std::sqrt(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sqrtf (__x)>>;


;; Function constexpr long double std::sqrt(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sqrtl (__x)>>;


;; Function constexpr float std::tan(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanf (__x);


;; Function constexpr long double std::tan(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanl (__x);


;; Function constexpr float std::tanh(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanhf (__x);


;; Function constexpr long double std::tanh(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanhl (__x);


;; Function constexpr int std::fpclassify(float) (null)
;; enabled by -tree-original


return <retval> = SAVE_EXPR <ABS_EXPR <__x>> ord SAVE_EXPR <ABS_EXPR <__x>> ? SAVE_EXPR <ABS_EXPR <__x>> u<= 3.4028234663852885981170418348451692544e+38 ? SAVE_EXPR <ABS_EXPR <__x>> >= 1.17549435082228750796873653722224567781866555677e-38 ? 1024 : SAVE_EXPR <ABS_EXPR <__x>> == 0.0 ? 16384 : 17408 : 1280 : 256;


;; Function constexpr int std::fpclassify(double) (null)
;; enabled by -tree-original


return <retval> = SAVE_EXPR <ABS_EXPR <__x>> ord SAVE_EXPR <ABS_EXPR <__x>> ? SAVE_EXPR <ABS_EXPR <__x>> u<= 1.79769313486231570814527423731704356798070567526e+308 ? SAVE_EXPR <ABS_EXPR <__x>> >= 2.22507385850720138309023271733240406421921598046e-308 ? 1024 : SAVE_EXPR <ABS_EXPR <__x>> == 0.0 ? 16384 : 17408 : 1280 : 256;


;; Function constexpr int std::fpclassify(long double) (null)
;; enabled by -tree-original


return <retval> = SAVE_EXPR <ABS_EXPR <__x>> ord SAVE_EXPR <ABS_EXPR <__x>> ? SAVE_EXPR <ABS_EXPR <__x>> u<= 1.1897314953572317650212638530309702051690633223e+4932 ? SAVE_EXPR <ABS_EXPR <__x>> >= 3.36210314311209350626267781732175260259807934483e-4932 ? 1024 : SAVE_EXPR <ABS_EXPR <__x>> == 0.0 ? 16384 : 17408 : 1280 : 256;


;; Function constexpr bool std::isfinite(float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 3.4028234663852885981170418348451692544e+38);


;; Function constexpr bool std::isfinite(double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 1.79769313486231570814527423731704356798070567526e+308);


;; Function constexpr bool std::isfinite(long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 1.1897314953572317650212638530309702051690633223e+4932);


;; Function constexpr bool std::isinf(float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u<= 3.4028234663852885981170418348451692544e+38);


;; Function constexpr bool std::isinf(double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u<= 1.79769313486231570814527423731704356798070567526e+308);


;; Function constexpr bool std::isinf(long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u<= 1.1897314953572317650212638530309702051690633223e+4932);


;; Function constexpr bool std::isnan(float) (null)
;; enabled by -tree-original


return <retval> = __x unord __x ? 1 : 0;


;; Function constexpr bool std::isnan(double) (null)
;; enabled by -tree-original


return <retval> = __x unord __x ? 1 : 0;


;; Function constexpr bool std::isnan(long double) (null)
;; enabled by -tree-original


return <retval> = __x unord __x ? 1 : 0;


;; Function constexpr bool std::isnormal(float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 3.4028234663852885981170418348451692544e+38) && (bool) !(ABS_EXPR <__x> u< 1.17549435082228750796873653722224567781866555677e-38);


;; Function constexpr bool std::isnormal(double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 1.79769313486231570814527423731704356798070567526e+308) && (bool) !(ABS_EXPR <__x> u< 2.22507385850720138309023271733240406421921598046e-308);


;; Function constexpr bool std::isnormal(long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 1.1897314953572317650212638530309702051690633223e+4932) && (bool) !(ABS_EXPR <__x> u< 3.36210314311209350626267781732175260259807934483e-4932);


;; Function constexpr bool std::signbit(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_signbit (__x) != 0;


;; Function constexpr bool std::signbit(double) (null)
;; enabled by -tree-original


return <retval> = __builtin_signbit (__x) != 0;


;; Function constexpr bool std::signbit(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_signbit (__x) != 0;


;; Function constexpr bool std::isgreater(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u<= __y);


;; Function constexpr bool std::isgreater(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u<= __y);


;; Function constexpr bool std::isgreater(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u<= __y);


;; Function constexpr bool std::isgreaterequal(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u< __y);


;; Function constexpr bool std::isgreaterequal(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u< __y);


;; Function constexpr bool std::isgreaterequal(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u< __y);


;; Function constexpr bool std::isless(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u>= __y);


;; Function constexpr bool std::isless(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u>= __y);


;; Function constexpr bool std::isless(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u>= __y);


;; Function constexpr bool std::islessequal(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u> __y);


;; Function constexpr bool std::islessequal(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u> __y);


;; Function constexpr bool std::islessequal(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u> __y);


;; Function constexpr bool std::islessgreater(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u== __y);


;; Function constexpr bool std::islessgreater(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u== __y);


;; Function constexpr bool std::islessgreater(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u== __y);


;; Function constexpr bool std::isunordered(float, float) (null)
;; enabled by -tree-original


return <retval> = __x unord __y ? 1 : 0;


;; Function constexpr bool std::isunordered(double, double) (null)
;; enabled by -tree-original


return <retval> = __x unord __y ? 1 : 0;


;; Function constexpr bool std::isunordered(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __x unord __y ? 1 : 0;


;; Function constexpr float std::acosh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acoshf (__x)>>;


;; Function constexpr long double std::acosh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acoshl (__x)>>;


;; Function constexpr float std::asinh(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_asinhf (__x);


;; Function constexpr long double std::asinh(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_asinhl (__x);


;; Function constexpr float std::atanh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atanhf (__x)>>;


;; Function constexpr long double std::atanh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atanhl (__x)>>;


;; Function constexpr float std::cbrt(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_cbrtf (__x);


;; Function constexpr long double std::cbrt(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_cbrtl (__x);


;; Function constexpr float std::copysign(float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_copysignf (__x, __y);


;; Function constexpr long double std::copysign(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_copysignl (__x, __y);


;; Function constexpr float std::erf(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_erff (__x);


;; Function constexpr long double std::erf(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_erfl (__x);


;; Function constexpr float std::erfc(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_erfcf (__x)>>;


;; Function constexpr long double std::erfc(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_erfcl (__x)>>;


;; Function constexpr float std::exp2(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_exp2f (__x)>>;


;; Function constexpr long double std::exp2(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_exp2l (__x)>>;


;; Function constexpr float std::expm1(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expm1f (__x)>>;


;; Function constexpr long double std::expm1(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expm1l (__x)>>;


;; Function constexpr float std::fdim(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fdimf (__x, __y)>>;


;; Function constexpr long double std::fdim(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fdiml (__x, __y)>>;


;; Function constexpr float std::fma(float, float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmaf (__x, __y, __z);


;; Function constexpr long double std::fma(long double, long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmal (__x, __y, __z);


;; Function constexpr float std::fmax(float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmaxf (__x, __y);


;; Function constexpr long double std::fmax(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmaxl (__x, __y);


;; Function constexpr float std::fmin(float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_fminf (__x, __y);


;; Function constexpr long double std::fmin(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_fminl (__x, __y);


;; Function constexpr float std::hypot(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_hypotf (__x, __y)>>;


;; Function constexpr long double std::hypot(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_hypotl (__x, __y)>>;


;; Function constexpr int std::ilogb(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ilogbf (__x)>>;


;; Function constexpr int std::ilogb(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ilogbl (__x)>>;


;; Function constexpr float std::lgamma(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lgammaf (__x)>>;


;; Function constexpr long double std::lgamma(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lgammal (__x)>>;


;; Function constexpr long long int std::llrint(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llrintf (__x)>>;


;; Function constexpr long long int std::llrint(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llrintl (__x)>>;


;; Function constexpr long long int std::llround(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llroundf (__x)>>;


;; Function constexpr long long int std::llround(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llroundl (__x)>>;


;; Function constexpr float std::log1p(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log1pf (__x)>>;


;; Function constexpr long double std::log1p(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log1pl (__x)>>;


;; Function constexpr float std::log2(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log2f (__x)>>;


;; Function constexpr long double std::log2(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log2l (__x)>>;


;; Function constexpr float std::logb(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logbf (__x)>>;


;; Function constexpr long double std::logb(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logbl (__x)>>;


;; Function constexpr long int std::lrint(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lrintf (__x)>>;


;; Function constexpr long int std::lrint(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lrintl (__x)>>;


;; Function constexpr long int std::lround(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lroundf (__x)>>;


;; Function constexpr long int std::lround(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lroundl (__x)>>;


;; Function constexpr float std::nearbyint(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_nearbyintf (__x);


;; Function constexpr long double std::nearbyint(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_nearbyintl (__x);


;; Function constexpr float std::nextafter(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nextafterf (__x, __y)>>;


;; Function constexpr long double std::nextafter(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nextafterl (__x, __y)>>;


;; Function constexpr float std::nexttoward(float, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nexttowardf (__x, __y)>>;


;; Function constexpr long double std::nexttoward(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nexttowardl (__x, __y)>>;


;; Function constexpr float std::remainder(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remainderf (__x, __y)>>;


;; Function constexpr long double std::remainder(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remainderl (__x, __y)>>;


;; Function float std::remquo(float, float, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remquof (__x, __y, __pquo)>>;


;; Function long double std::remquo(long double, long double, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remquol (__x, __y, __pquo)>>;


;; Function constexpr float std::rint(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_rintf (__x);


;; Function constexpr long double std::rint(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_rintl (__x);


;; Function constexpr float std::round(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_roundf (__x);


;; Function constexpr long double std::round(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_roundl (__x);


;; Function constexpr float std::scalbln(float, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalblnf (__x, __ex)>>;


;; Function constexpr long double std::scalbln(long double, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalblnl (__x, __ex)>>;


;; Function constexpr float std::scalbn(float, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalbnf (__x, __ex)>>;


;; Function constexpr long double std::scalbn(long double, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalbnl (__x, __ex)>>;


;; Function constexpr float std::tgamma(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_tgammaf (__x)>>;


;; Function constexpr long double std::tgamma(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_tgammal (__x)>>;


;; Function constexpr float std::trunc(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_truncf (__x);


;; Function constexpr long double std::trunc(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_truncl (__x);


;; Function static constexpr bool std::numeric_limits<bool>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<bool>::min ()>>
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr bool std::numeric_limits<bool>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -128
   >>>;


;; Function static constexpr char std::numeric_limits<char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 127
   >>>;


;; Function static constexpr char std::numeric_limits<char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<char>::min ()>>
   >>>;


;; Function static constexpr char std::numeric_limits<char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char std::numeric_limits<char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -128
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 127
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<signed char>::min ()>>
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr signed char std::numeric_limits<signed char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 255
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<unsigned char>::min ()>>
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<wchar_t>::min ()>>
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<char16_t>::min ()>>
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char16_t std::numeric_limits<char16_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<char32_t>::min ()>>
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr char32_t std::numeric_limits<char32_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -32768
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 32767
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<short int>::min ()>>
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short int std::numeric_limits<short int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<short unsigned int>::min ()>>
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -2147483648
   >>>;


;; Function static constexpr int std::numeric_limits<int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2147483647
   >>>;


;; Function static constexpr int std::numeric_limits<int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<int>::min ()>>
   >>>;


;; Function static constexpr int std::numeric_limits<int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr int std::numeric_limits<int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<unsigned int>::min ()>>
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -2147483648
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2147483647
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<long int>::min ()>>
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long int std::numeric_limits<long int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<long unsigned int>::min ()>>
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -9223372036854775808
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<long long int>::min ()>>
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long int std::numeric_limits<long long int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<long long unsigned int>::min ()>>
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 std::numeric_limits<__int128>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -0x80000000000000000000000000000000
   >>>;


;; Function static constexpr __int128 std::numeric_limits<__int128>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0x7fffffffffffffffffffffffffffffff
   >>>;


;; Function static constexpr __int128 std::numeric_limits<__int128>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 std::numeric_limits<__int128>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 std::numeric_limits<__int128>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<__int128>::min ()>>
   >>>;


;; Function static constexpr __int128 std::numeric_limits<__int128>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 std::numeric_limits<__int128>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 std::numeric_limits<__int128>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 std::numeric_limits<__int128>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0xffffffffffffffffffffffffffffffff
   >>>;


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::numeric_limits<__int128 unsigned>::min ()>>
   >>>;


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function static constexpr float std::numeric_limits<float>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.17549435082228750796873653722224567781866555677e-38
   >>>;


;; Function static constexpr float std::numeric_limits<float>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.4028234663852885981170418348451692544e+38
   >>>;


;; Function static constexpr float std::numeric_limits<float>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -3.4028234663852885981170418348451692544e+38
   >>>;


;; Function static constexpr float std::numeric_limits<float>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.1920928955078125e-7
   >>>;


;; Function static constexpr float std::numeric_limits<float>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;


;; Function static constexpr float std::numeric_limits<float>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;


;; Function static constexpr float std::numeric_limits<float>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr float std::numeric_limits<float>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr float std::numeric_limits<float>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.40129846432481707092372958328991613128026194188e-45
   >>>;


;; Function static constexpr double std::numeric_limits<double>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.22507385850720138309023271733240406421921598046e-308
   >>>;


;; Function static constexpr double std::numeric_limits<double>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.79769313486231570814527423731704356798070567526e+308
   >>>;


;; Function static constexpr double std::numeric_limits<double>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1.79769313486231570814527423731704356798070567526e+308
   >>>;


;; Function static constexpr double std::numeric_limits<double>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.220446049250313080847263336181640625e-16
   >>>;


;; Function static constexpr double std::numeric_limits<double>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;


;; Function static constexpr double std::numeric_limits<double>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;


;; Function static constexpr double std::numeric_limits<double>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr double std::numeric_limits<double>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr double std::numeric_limits<double>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4.94065645841246544176568792868221372365059802614e-324
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.36210314311209350626267781732175260259807934483e-4932
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.1897314953572317650212638530309702051690633223e+4932
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1.1897314953572317650212638530309702051690633223e+4932
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.08420217248550443400745280086994171142578125e-19
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;


;; Function static constexpr long double std::numeric_limits<long double>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.64519953188247460252840593361941981639905081567e-4951
   >>>;


;; Function constexpr genType glm::abs(genType) [with genType = int] (null)
;; enabled by -tree-original


{
  const int y = x >> 31;

    const int y = x >> 31;
  return <retval> = (x ^ (int) y) - (int) y;
}


;; Function int glm::floatBitsToInt(const float&) (null)
;; enabled by -tree-original


{
  typedef union ._62 ._62;
  union ._62 u;

    union ._62 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = (float) *v) >>>>>;
  return <retval> = u.out;
}


;; Function glm::uint glm::floatBitsToUint(const float&) (null)
;; enabled by -tree-original


{
  typedef union ._63 ._63;
  union ._63 u;

    union ._63 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = (float) *v) >>>>>;
  return <retval> = u.out;
}


;; Function float glm::intBitsToFloat(const int&) (null)
;; enabled by -tree-original


{
  typedef union ._64 ._64;
  union ._64 u;

    union ._64 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = (int) *v) >>>>>;
  return <retval> = u.out;
}


;; Function float glm::uintBitsToFloat(const uint&) (null)
;; enabled by -tree-original


{
  typedef union ._65 ._65;
  union ._65 u;

    union ._65 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = (uint) *v) >>>>>;
  return <retval> = u.out;
}


;; Function float glm::detail::overflow() (null)
;; enabled by -tree-original


{
  volatile float f = 1.0e+10;

  <<cleanup_point   volatile float f = 1.0e+10;>>;
  {
    int i = 0;

    <<cleanup_point     int i = 0;>>;
    while (1)
      {
        if (i > 9) goto <D.47059>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (f = TARGET_EXPR <D.47058, (float) f>;, (float) f * D.47058;) >>>>>;
        <<cleanup_point (void)  ++i>>;
      }
    <D.47059>:;
  }
  <<cleanup_point return <retval> = (float) f>>;
}


;; Function glm::detail::uif32::uif32() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(union 
  {
    float f;
    unsigned int i;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((union uif32 *) this)->i = 0) >>>>>;
}


;; Function glm::detail::uif32::uif32(float) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(union 
  {
    float f;
    unsigned int i;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((union uif32 *) this)->f = f_) >>>>>;
}


;; Function glm::detail::uif32::uif32(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(union 
  {
    float f;
    unsigned int i;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((union uif32 *) this)->i = i_) >>>>>;
}


;; Function float glm::detail::toFloat32(glm::detail::hdata) (null)
;; enabled by -tree-original


{
  int s = (int) value >> 15 & 1;
  int e = (int) value >> 10 & 31;
  int m = (int) value & 1023;
  union uif32 Result;

    int s = (int) value >> 15 & 1;
    int e = (int) value >> 10 & 31;
    int m = (int) value & 1023;
  {
    if (e == 0)
      {
        {
          {
            if (m == 0)
              {
                {
                  union uif32 result;

                                    union uif32 result;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  glm::detail::uif32::uif32 (&result) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result.i = (unsigned int) (s << 31)) >>>>>;
                  return <retval> = result.f;
                }
              }
            else
              {
                while (1)
                  {
                    if ((m & 1024) != 0) goto <D.47137>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = m << 1) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (e = e + -1) >>>>>;
                  }
                <D.47137>:;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (e = e + 1) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = m & -1025) >>>>>;
              }
          }
        }
      }
    else
      {
        {
          {
            if (e == 31)
              {
                {
                  {
                    if (m == 0)
                      {
                        {
                          union uif32 result;

                                                    union uif32 result;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  glm::detail::uif32::uif32 (&result) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result.i = (unsigned int) (s << 31 | 2139095040)) >>>>>;
                          return <retval> = result.f;
                        }
                      }
                    else
                      {
                        {
                          union uif32 result;

                                                    union uif32 result;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  glm::detail::uif32::uif32 (&result) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result.i = (unsigned int) ((s << 31 | 2139095040) | m << 13)) >>>>>;
                          return <retval> = result.f;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (e = e + 112) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = m << 13) >>>>>;
    union uif32 Result;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glm::detail::uif32::uif32 (&Result) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (Result.i = (unsigned int) ((s << 31 | e << 23) | m)) >>>>>;
  return <retval> = Result.f;
}


;; Function glm::detail::hdata glm::detail::toFloat16(const float&) (null)
;; enabled by -tree-original


{
  union uif32 Entry;
  int i = (int) Entry.i;
  int s = i >> 16 & 32768;
  int e = (i >> 23 & 255) + -112;
  int m = i & 8388607;

    union uif32 Entry;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glm::detail::uif32::uif32 (&Entry) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (Entry.f = (float) *f) >>>>>;
    int i = (int) Entry.i;
    int s = i >> 16 & 32768;
    int e = (i >> 23 & 255) + -112;
    int m = i & 8388607;
  if (e <= 0)
    {
      if (e < -10)
        {
          return <retval> = (hdata) s;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = (m | 8388608) >> 1 - e) >>>>>;
      if ((m & 4096) != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = m + 8192) >>>>>;
        }
      return <retval> = (hdata) (m >> 13) | (hdata) s;
    }
  else
    {
      if (e == 143)
        {
          if (m == 0)
            {
              return <retval> = (hdata) s | 31744;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = m >> 13) >>>>>;
              return <retval> = (((hdata) s | 31744) | (hdata) m) | m == 0;
            }
        }
      else
        {
          if ((m & 4096) != 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = m + 8192) >>>>>;
              if ((m & 8388608) != 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = 0) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (e = e + 1) >>>>>;
                }
            }
          if (e > 30)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) glm::detail::overflow () >>>>>;
              return <retval> = (hdata) s | 31744;
            }
          return <retval> = ((hdata) (e << 10) | (hdata) s) | (hdata) (m >> 13);
        }
    }
}


;; Function constexpr glm::vec<2, T, Q>::vec(T) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._52 D.48419;
    union ._53 D.48420;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47816.x = scalar) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47822.y = scalar) >>>>>;
}


;; Function constexpr glm::vec<L, T, Q> glm::clamp(const glm::vec<L, T, Q>&, T, T) [with int L = 2; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.48451, glm::detail::compute_clamp_vector<2, float, (glm::qualifier)0, false>::call (x, (const struct vec &) &TARGET_EXPR <D.48446, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.48446
  (struct vec *) <<< Unknown tree: void_cst >>>
  minVal >>>>, (const struct vec &) &TARGET_EXPR <D.48447, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.48447
  (struct vec *) <<< Unknown tree: void_cst >>>
  maxVal >>>>)>>>;


;; Function constexpr glm::vec<2, T, Q>::vec(T, T) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._52 D.48419;
    union ._53 D.48420;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47816.x = _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47822.y = _y) >>>>>;
}


;; Function constexpr glm::vec<2, T, Q> glm::operator*(const glm::vec<2, T, Q>&, T) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.48495, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.48495
  (struct vec *) <<< Unknown tree: void_cst >>>
  (float) v->D.47816.x * scalar
  (float) v->D.47822.y * scalar >>>>;, D.48495>>;


;; Function glm::uint glm::packUnorm2x16(const vec2&) (null)
;; enabled by -tree-original


{
  typedef union ._66 ._66;
  union ._66 u;
  struct vec result;

    union ._66 u;
    struct vec result;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glm::vec<2, short unsigned int, (glm::qualifier)0>::vec<float, (glm::qualifier)0> (&result, (const struct vec &) &TARGET_EXPR <D.48499, glm::round<2, float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.48470, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.48425, glm::clamp<2, float, (glm::qualifier)0> ((const struct vec &) v, 0.0, 1.0e+0)>, 6.5535e+4)>)>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[0] = *glm::vec<2, short unsigned int, (glm::qualifier)0>::operator[] (&result, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[1] = *glm::vec<2, short unsigned int, (glm::qualifier)0>::operator[] (&result, 1)) >>>>>;
  return <retval> = u.out;
}


;; Function glm::vec2 glm::unpackUnorm2x16(glm::uint) (null)
;; enabled by -tree-original


{
  typedef union ._67 ._67;
  union ._67 u;

    union ._67 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = p) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.48572, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.48571, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.48571
  (struct vec *) <<< Unknown tree: void_cst >>>
  (int) u.out[0]
  (int) u.out[1] >>>>, 1.525902189314365386962890625e-5)>>>;
}


;; Function glm::uint glm::packSnorm2x16(const vec2&) (null)
;; enabled by -tree-original


{
  typedef union ._68 ._68;
  union ._68 u;
  struct vec result;

    union ._68 u;
    struct vec result;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glm::vec<2, short int, (glm::qualifier)0>::vec<float, (glm::qualifier)0> (&result, (const struct vec &) &TARGET_EXPR <D.49227, glm::round<2, float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.49226, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.49225, glm::clamp<2, float, (glm::qualifier)0> ((const struct vec &) v, -1.0e+0, 1.0e+0)>, 3.2767e+4)>)>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[0] = *glm::vec<2, short int, (glm::qualifier)0>::operator[] (&result, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[1] = *glm::vec<2, short int, (glm::qualifier)0>::operator[] (&result, 1)) >>>>>;
  return <retval> = u.out;
}


;; Function glm::vec2 glm::unpackSnorm2x16(glm::uint) (null)
;; enabled by -tree-original


{
  typedef union ._69 ._69;
  union ._69 u;

    union ._69 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = p) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.49301, glm::clamp<2, float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.49300, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.49299, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.49299
  (struct vec *) <<< Unknown tree: void_cst >>>
  (int) u.out[0]
  (int) u.out[1] >>>>, 3.0518509447574615478515625e-5)>, -1.0e+0, 1.0e+0)>>>;
}


;; Function constexpr glm::vec<4, T, Q>::vec(T) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.53285;
    union ._58 D.53286;
    union ._59 D.53287;
    union ._60 D.53288;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51351.x = scalar) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51357.y = scalar) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51363.z = scalar) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51369.w = scalar) >>>>>;
}


;; Function constexpr glm::vec<L, T, Q> glm::clamp(const glm::vec<L, T, Q>&, T, T) [with int L = 4; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.53320, glm::detail::compute_clamp_vector<4, float, (glm::qualifier)0, false>::call (x, (const struct vec &) &TARGET_EXPR <D.53315, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.53315
  (struct vec *) <<< Unknown tree: void_cst >>>
  minVal >>>>, (const struct vec &) &TARGET_EXPR <D.53316, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.53316
  (struct vec *) <<< Unknown tree: void_cst >>>
  maxVal >>>>)>>>;


;; Function constexpr glm::vec<4, T, Q>::vec(T, T, T, T) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.53285;
    union ._58 D.53286;
    union ._59 D.53287;
    union ._60 D.53288;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51351.x = _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51357.y = _y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51363.z = _z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51369.w = _w) >>>>>;
}


;; Function static constexpr glm::vec<4, T, Q> glm::detail::compute_vec4_mul<T, Q, Aligned>::call(const glm::vec<4, T, Q>&, const glm::vec<4, T, Q>&) [with T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.53384, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.53384
  (struct vec *) <<< Unknown tree: void_cst >>>
  (float) a->D.51351.x * (float) b->D.51351.x
  (float) a->D.51357.y * (float) b->D.51357.y
  (float) a->D.51363.z * (float) b->D.51363.z
  (float) a->D.51369.w * (float) b->D.51369.w >>>>>>;


;; Function constexpr glm::vec<4, T, Q>& glm::vec<4, T, Q>::operator*=(U) [with U = float; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *(struct vec *) this = *(const struct vec &) &TARGET_EXPR <D.53361, glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call ((const struct vec &) this, (const struct vec &) &TARGET_EXPR <D.53360, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.53360
  (struct vec *) <<< Unknown tree: void_cst >>>
  scalar >>>>)>;, (struct vec &) this;>>;


;; Function constexpr glm::vec<4, T, Q> glm::operator*(const glm::vec<4, T, Q>&, const T&) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.53388, *(const struct vec &) glm::vec<4, float, (glm::qualifier)0>::operator*=<float> (&TARGET_EXPR <D.53349, *v>, (float) *scalar)>>>;


;; Function glm::uint glm::packUnorm4x8(const vec4&) (null)
;; enabled by -tree-original


{
  typedef union ._70 ._70;
  union ._70 u;
  struct vec result;

    union ._70 u;
    struct vec result;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glm::vec<4, unsigned char, (glm::qualifier)0>::vec<float, (glm::qualifier)0> (&result, (const struct vec &) &TARGET_EXPR <D.53389, glm::round<4, float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.53339, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.53293, glm::clamp<4, float, (glm::qualifier)0> ((const struct vec &) v, 0.0, 1.0e+0)>, (const float &) &TARGET_EXPR <D.53306, 2.55e+2>)>)>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[0] = *glm::vec<4, unsigned char, (glm::qualifier)0>::operator[] (&result, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[1] = *glm::vec<4, unsigned char, (glm::qualifier)0>::operator[] (&result, 1)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[2] = *glm::vec<4, unsigned char, (glm::qualifier)0>::operator[] (&result, 2)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[3] = *glm::vec<4, unsigned char, (glm::qualifier)0>::operator[] (&result, 3)) >>>>>;
  return <retval> = u.out;
}


;; Function glm::vec4 glm::unpackUnorm4x8(glm::uint) (null)
;; enabled by -tree-original


{
  typedef union ._71 ._71;
  union ._71 u;

    union ._71 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = p) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.53469, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.53467, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.53467
  (struct vec *) <<< Unknown tree: void_cst >>>
  (int) u.out[0]
  (int) u.out[1]
  (int) u.out[2]
  (int) u.out[3] >>>>, (const float &) &TARGET_EXPR <D.53468, 3.9215688593685626983642578125e-3>)>>>;
}


;; Function glm::uint glm::packSnorm4x8(const vec4&) (null)
;; enabled by -tree-original


{
  typedef union ._72 ._72;
  union ._72 u;
  struct vec result;

    union ._72 u;
    struct vec result;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glm::vec<4, signed char, (glm::qualifier)0>::vec<float, (glm::qualifier)0> (&result, (const struct vec &) &TARGET_EXPR <D.55458, glm::round<4, float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.55457, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.55455, glm::clamp<4, float, (glm::qualifier)0> ((const struct vec &) v, -1.0e+0, 1.0e+0)>, (const float &) &TARGET_EXPR <D.55456, 1.27e+2>)>)>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[0] = *glm::vec<4, signed char, (glm::qualifier)0>::operator[] (&result, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[1] = *glm::vec<4, signed char, (glm::qualifier)0>::operator[] (&result, 1)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[2] = *glm::vec<4, signed char, (glm::qualifier)0>::operator[] (&result, 2)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[3] = *glm::vec<4, signed char, (glm::qualifier)0>::operator[] (&result, 3)) >>>>>;
  return <retval> = u.out;
}


;; Function glm::vec4 glm::unpackSnorm4x8(glm::uint) (null)
;; enabled by -tree-original


{
  typedef union ._73 ._73;
  union ._73 u;

    union ._73 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = p) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.55539, glm::clamp<4, float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.55538, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.55536, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.55536
  (struct vec *) <<< Unknown tree: void_cst >>>
  (int) u.out[0]
  (int) u.out[1]
  (int) u.out[2]
  (int) u.out[3] >>>>, (const float &) &TARGET_EXPR <D.55537, 7.8740157186985015869140625e-3>)>, -1.0e+0, 1.0e+0)>>>;
}


;; Function double glm::packDouble2x32(const uvec2&) (null)
;; enabled by -tree-original


{
  typedef union ._74 ._74;
  union ._74 u;

    union ._74 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[0] = (unsigned int) *glm::vec<2, unsigned int, (glm::qualifier)0>::operator[] ((const struct uvec2 *) v, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[1] = (unsigned int) *glm::vec<2, unsigned int, (glm::qualifier)0>::operator[] ((const struct uvec2 *) v, 1)) >>>>>;
  return <retval> = u.out;
}


;; Function glm::uvec2 glm::unpackDouble2x32(double) (null)
;; enabled by -tree-original


{
  typedef union ._75 ._75;
  union ._75 u;

    union ._75 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = v) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.56244, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.56244
  (struct vec *) <<< Unknown tree: void_cst >>>
  u.out[0]
  u.out[1] >>>>;, D.56244>>;
}


;; Function glm::uint glm::packHalf2x16(const vec2&) (null)
;; enabled by -tree-original


{
  typedef union ._76 ._76;
  union ._76 u;

    union ._76 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[0] = glm::detail::toFloat16 ((const float &) &v->D.47816.x)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in[1] = glm::detail::toFloat16 ((const float &) &v->D.47822.y)) >>>>>;
  return <retval> = u.out;
}


;; Function glm::vec2 glm::unpackHalf2x16(glm::uint) (null)
;; enabled by -tree-original


{
  typedef union ._77 ._77;
  union ._77 u;

    union ._77 u;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u.in = v) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.56354, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.56354
  (struct vec *) <<< Unknown tree: void_cst >>>
  glm::detail::toFloat32 ((int) u.out[0])
  glm::detail::toFloat32 ((int) u.out[1]) >>>>;, D.56354>>;
}


;; Function glm::uint glm::uaddCarry(const uint&, const uint&, glm::uint&) (null)
;; enabled by -tree-original


{
  const uint64 Value64 = (uint64) *x + (uint64) *y;
  const uint64 Max32 = 4294967295;

    const uint64 Value64 = (uint64) *x + (uint64) *y;
  <<cleanup_point   const uint64 Max32 = 4294967295;>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*Carry = Value64 > 4294967295 ? 1 : 0) >>>>>;
  return <retval> = (uint) Value64;
}


;; Function glm::uint glm::usubBorrow(const uint&, const uint&, glm::uint&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*Borrow = (uint) (*x < *y)) >>>>>;
if (*y >= *x)
  {
    return <retval> = (unsigned int) *y - (unsigned int) *x;
  }
else
  {
    return <retval> = (uint) *y - (uint) *x;
  }


;; Function void glm::umulExtended(const uint&, const uint&, glm::uint&, glm::uint&) (null)
;; enabled by -tree-original


{
  uint64 Value64 = (uint64) *x * (uint64) *y;

    uint64 Value64 = (uint64) *x * (uint64) *y;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*msb = (uint) (Value64 >> 32)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*lsb = (uint) Value64) >>>>>;
}


;; Function void glm::imulExtended(int, int, int&, int&) (null)
;; enabled by -tree-original


{
  int64 Value64 = (int64) x * (int64) y;

    int64 Value64 = (int64) x * (int64) y;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*msb = (int) (Value64 >> 32)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*lsb = (int) Value64) >>>>>;
}


;; Function constexpr glm::detail::float_t<float>::float_t(glm::detail::float_t<float>::float_type) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(union 
  {
    int_type i;
    float_type f;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((union float_t *) this)->f = Num) >>>>>;
}


;; Function constexpr glm::detail::float_t<float>& glm::detail::float_t<float>::operator=(const glm::detail::float_t<float>&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((union float_t *) this)->f = (float_type) x->f) >>>>>;
return <retval> = (union float_t &) this;


;; Function constexpr bool glm::detail::float_t<float>::negative() const (null)
;; enabled by -tree-original


return <retval> = ((const union float_t *) this)->i < 0;


;; Function constexpr glm::detail::float_t<float>::int_type glm::detail::float_t<float>::mantissa() const (null)
;; enabled by -tree-original


return <retval> = (int) ((const union float_t *) this)->i & 8388607;


;; Function constexpr glm::detail::float_t<float>::int_type glm::detail::float_t<float>::exponent() const (null)
;; enabled by -tree-original


return <retval> = (int) ((const union float_t *) this)->i >> 23 & 255;


;; Function constexpr glm::detail::float_t<double>::float_t(glm::detail::float_t<double>::float_type) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(union 
  {
    int_type i;
    float_type f;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((union float_t *) this)->f = Num) >>>>>;
}


;; Function constexpr glm::detail::float_t<double>& glm::detail::float_t<double>::operator=(const glm::detail::float_t<double>&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((union float_t *) this)->f = (float_type) x->f) >>>>>;
return <retval> = (union float_t &) this;


;; Function constexpr bool glm::detail::float_t<double>::negative() const (null)
;; enabled by -tree-original


return <retval> = ((const union float_t *) this)->i < 0;


;; Function constexpr glm::detail::float_t<double>::int_type glm::detail::float_t<double>::mantissa() const (null)
;; enabled by -tree-original


return <retval> = (long long int) ((const union float_t *) this)->i & 4503599627370495;


;; Function constexpr glm::detail::float_t<double>::int_type glm::detail::float_t<double>::exponent() const (null)
;; enabled by -tree-original


return <retval> = (long long int) ((const union float_t *) this)->i >> 52 & 2047;


;; Function constexpr genType glm::abs(genType) [with genType = float] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = glm::detail::compute_abs<float, true>::call (x)>>;


;; Function bool glm::epsilonEqual(const genType&, const genType&, const genType&) [with genType = float] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = glm::abs<float> ((float) *x - (float) *y) < (float) *epsilon>>;


;; Function constexpr genType glm::abs(genType) [with genType = double] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = glm::detail::compute_abs<double, true>::call (x)>>;


;; Function bool glm::epsilonEqual(const genType&, const genType&, const genType&) [with genType = double] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = glm::abs<double> ((double) *x - (double) *y) < (double) *epsilon>>;


;; Function bool glm::epsilonNotEqual(const genType&, const genType&, const genType&) [with genType = float] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = glm::abs<float> ((float) *x - (float) *y) >= (float) *epsilon>>;


;; Function bool glm::epsilonNotEqual(const genType&, const genType&, const genType&) [with genType = double] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = glm::abs<double> ((double) *x - (double) *y) >= (double) *epsilon>>;


;; Function size_t wcsnlen_s(const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _src != 0B ? wcsnlen (_src, _count) : 0>>;


;; Function void* std::memchr(void*, int, std::size_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_memchr ((const void *) __s, __c, __n);


;; Function char* std::strchr(char*, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_strchr ((const char *) __s, __n);


;; Function char* std::strpbrk(char*, const char*) (null)
;; enabled by -tree-original


return <retval> = __builtin_strpbrk ((const char *) __s1, __s2);


;; Function char* std::strrchr(char*, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_strrchr ((const char *) __s, __n);


;; Function char* std::strstr(char*, const char*) (null)
;; enabled by -tree-original


return <retval> = __builtin_strstr ((const char *) __s1, __s2);


;; Function constexpr __gnu_cxx::__ops::_Iter_less_iter __gnu_cxx::__ops::__iter_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.62991, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val::_Iter_less_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_less_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63062, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63067, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter::_Val_less_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63129, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63134, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_iter __gnu_cxx::__ops::__iter_equal_to_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63172, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_equal_to_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63219, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_equal_to_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63232, {}>>>;


;; Function constexpr int std::__lg(int) (null)
;; enabled by -tree-original


return <retval> = (int) (31 - (unsigned int) __builtin_clz ((unsigned int) __n));


;; Function constexpr unsigned int std::__lg(unsigned int) (null)
;; enabled by -tree-original


return <retval> = 31 - (unsigned int) __builtin_clz (__n);


;; Function constexpr long int std::__lg(long int) (null)
;; enabled by -tree-original


return <retval> = (long int) (31 - (unsigned int) __builtin_clzl ((long unsigned int) __n));


;; Function constexpr long unsigned int std::__lg(long unsigned int) (null)
;; enabled by -tree-original


return <retval> = 31 - (long unsigned int) __builtin_clzl (__n);


;; Function constexpr long long int std::__lg(long long int) (null)
;; enabled by -tree-original


return <retval> = (long long int) (63 - (long long unsigned int) __builtin_clzll ((long long unsigned int) __n));


;; Function constexpr long long unsigned int std::__lg(long long unsigned int) (null)
;; enabled by -tree-original


return <retval> = 63 - (long long unsigned int) __builtin_clzll (__n);


;; Function wchar_t* std::wcschr(wchar_t*, wchar_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wcschr ((const wchar_t *) __p, (int) __c)>>;


;; Function wchar_t* std::wcspbrk(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wcspbrk ((const wchar_t *) __s1, __s2)>>;


;; Function wchar_t* std::wcsrchr(wchar_t*, wchar_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wcsrchr ((const wchar_t *) __p, (int) __c)>>;


;; Function wchar_t* std::wcsstr(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wcsstr ((const wchar_t *) __s1, __s2)>>;


;; Function wchar_t* std::wmemchr(wchar_t*, wchar_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wmemchr ((const wchar_t *) __p, (int) __c, __n)>>;


;; Function static void std::char_traits<char>::assign(std::char_traits<char>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned char) *__c1 < (unsigned char) *__c2
   >>>;


;; Function static int std::char_traits<char>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
return <retval> = __builtin_memcmp ((const void *) __s1, (const void *) __s2, __n);


;; Function static std::size_t std::char_traits<char>::length(const char_type*) (null)
;; enabled by -tree-original


return <retval> = __builtin_strlen (__s);


;; Function static const char_type* std::char_traits<char>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
return <retval> = (const char_type *) __builtin_memchr ((const void *) __s, (int) *__a, __n);


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::move(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::copy(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::assign(std::char_traits<char>::char_type*, std::size_t, std::char_traits<char>::char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memset ((void *) __s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<char>::char_type std::char_traits<char>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) (unsigned char) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (int) *__c != std::char_traits<char>::eof () ? (int_type) *__c : 0>>
   >>>;


;; Function static void std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function static int std::char_traits<wchar_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
else
  {
    <<cleanup_point return <retval> = wmemcmp (__s1, __s2, __n)>>;
  }


;; Function static std::size_t std::char_traits<wchar_t>::length(const char_type*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wcslen (__s)>>;


;; Function static const char_type* std::char_traits<wchar_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
else
  {
    <<cleanup_point return <retval> = (const char_type *) wmemchr (__s, (int) *__a, __n)>>;
  }


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::move(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemmove (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::copy(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemcpy (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type*, std::size_t, std::char_traits<wchar_t>::char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) wmemset (__s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type std::char_traits<wchar_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<wchar_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.65340, std::char_traits<wchar_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function static void std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function static int std::char_traits<char16_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.65394>;
        if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 2)), (const char_type &) (__s2 + (sizetype) (__i * 2)))>>)
          {
            return <retval> = -1;
          }
        else
          {
            if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 2)), (const char_type &) (__s1 + (sizetype) (__i * 2)))>>)
              {
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.65394>:;
  }
  return <retval> = 0;
}


;; Function static std::size_t std::char_traits<char16_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (<<cleanup_point !std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &TARGET_EXPR <D.65398, 0>)>>) (void) 0; else goto <D.65399>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.65399>:;
  return <retval> = __i;
}


;; Function static const char_type* std::char_traits<char16_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.65403>;
        if (<<cleanup_point std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), __a)>>)
          {
            return <retval> = __s + (sizetype) (__i * 2);
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.65403>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::move(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::copy(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type*, std::size_t, std::char_traits<char16_t>::char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.65409>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &__a) >>>>>;
        <<cleanup_point (void)  ++__i>>;
      }
    <D.65409>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char16_t>::char_type std::char_traits<char16_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__c != (const char_type) std::char_traits<char16_t>::eof () ? (int_type) *__c : 65533>>
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char16_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.65416, std::char_traits<char16_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function static void std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function static int std::char_traits<char32_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.65470>;
        if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
          {
            return <retval> = -1;
          }
        else
          {
            if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
              {
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.65470>:;
  }
  return <retval> = 0;
}


;; Function static std::size_t std::char_traits<char32_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (<<cleanup_point !std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.65474, 0>)>>) (void) 0; else goto <D.65475>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.65475>:;
  return <retval> = __i;
}


;; Function static const char_type* std::char_traits<char32_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.65479>;
        if (<<cleanup_point std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), __a)>>)
          {
            return <retval> = __s + (sizetype) (__i * 4);
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.65479>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::move(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::copy(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type*, std::size_t, std::char_traits<char32_t>::char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.65485>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &__a) >>>>>;
        <<cleanup_point (void)  ++__i>>;
      }
    <D.65485>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char32_t>::char_type std::char_traits<char32_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char32_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.65492, std::char_traits<char32_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function std::exception::exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*) () * _vptr.exception;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception *) this)->_vptr.exception = &_ZTVSt9exception + 16) >>>>>;
  }
   >>>;


;; Function std::bad_exception::bad_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.exception;
    } D.65550;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_exception *) this)->D.65549) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_exception *) this)->D.65549._vptr.exception = &_ZTVSt13bad_exception + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_exception *) this)->D.65549);
      }
  }
   >>>;


;; Function const char* std::type_info::name() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *(const char *) ((const struct type_info *) this)->__name == 42 ? (const char *) ((const struct type_info *) this)->__name + 1 : (const char *) ((const struct type_info *) this)->__name
   >>>;


;; Function bool std::type_info::operator!=(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::type_info::operator== ((const struct type_info *) this, __arg)>>
   >>>;


;; Function std::size_t std::type_info::hash_code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_bytes ((const void *) std::type_info::name ((const struct type_info *) this), __builtin_strlen (std::type_info::name ((const struct type_info *) this)), 3339675911)>>
   >>>;


;; Function std::type_info::type_info(const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*) () * _vptr.type_info;
    const char * __name;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->_vptr.type_info = &_ZTVSt9type_info + 16) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->__name = __n) >>>>>;
}


;; Function std::bad_cast::bad_cast() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.exception;
    } D.65693;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_cast *) this)->D.65692) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_cast *) this)->D.65692._vptr.exception = &_ZTVSt8bad_cast + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_cast *) this)->D.65692);
      }
  }
   >>>;


;; Function std::bad_typeid::bad_typeid() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.exception;
    } D.65722;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_typeid *) this)->D.65721) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_typeid *) this)->D.65721._vptr.exception = &_ZTVSt10bad_typeid + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_typeid *) this)->D.65721);
      }
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::nullptr_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void * _M_exception_object;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void * _M_exception_object;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = __o->_M_exception_object) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__o->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.65829, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.65829
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  NON_LVALUE_EXPR <__o> >>>>, (struct exception_ptr &) this) >>>>>;
  return <retval> = (struct exception_ptr &) this;
   >>>;


;; Function std::__exception_ptr::exception_ptr::operator bool() const (null)
;; enabled by -tree-original


return <retval> = (void *) ((const struct exception_ptr *) this)->_M_exception_object != 0B;


;; Function void std::__exception_ptr::swap(std::__exception_ptr::exception_ptr&, std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap ((struct exception_ptr *) __lhs, __rhs) >>>>>;


;; Function std::nested_exception::nested_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*) () * _vptr.nested_exception;
    struct exception_ptr _M_ptr;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_vptr.nested_exception = &_ZTVSt16nested_exception + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_M_ptr = TARGET_EXPR <D.65902, <<< Unknown tree: aggr_init_expr
  3
  current_exception
  D.65902 >>>>) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__exception_ptr::exception_ptr::~exception_ptr (&((struct nested_exception *) this)->_M_ptr);
      }
  }
   >>>;


;; Function void std::nested_exception::rethrow_nested() const (null)
;; enabled by -tree-original


if (<<cleanup_point std::__exception_ptr::exception_ptr::operator bool (&((const struct nested_exception *) this)->_M_ptr)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::rethrow_exception (&TARGET_EXPR <D.65908, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.65908
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::terminate () >>>>>;


;; Function std::__exception_ptr::exception_ptr std::nested_exception::nested_ptr() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return *<retval> = TARGET_EXPR <D.65910, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.65910
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>>>
   >>>;


;; Function void std::__rethrow_if_nested_impl(const void*) (null)
;; enabled by -tree-original





;; Function std::bad_alloc::bad_alloc() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.exception;
    } D.66012;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_alloc *) this)->D.66011) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_alloc *) this)->D.66011._vptr.exception = &_ZTVSt9bad_alloc + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_alloc *) this)->D.66011);
      }
  }
   >>>;


;; Function std::bad_array_new_length::bad_array_new_length() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.66012;
    } D.66041;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::bad_alloc::bad_alloc (&((struct bad_array_new_length *) this)->D.66040) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_array_new_length *) this)->D.66040.D.66011._vptr.exception = &_ZTVSt20bad_array_new_length + 16) >>>>>;
      }
    catch
      {
        std::bad_alloc::~bad_alloc (&((struct bad_array_new_length *) this)->D.66040);
      }
  }
   >>>;


;; Function void* operator new(std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;


;; Function void* operator new [](std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;


;; Function void operator delete(void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void operator delete [](void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function int std::__convert_from_v(int* const&, char*, int, const char*, ...) (null)
;; enabled by -tree-original


{
  char * __old;
  char * __sav = 0B;
  char * __args;
  const int __ret;

    char * __old;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__old = setlocale (4, 0B)) >>>>>;
  <<cleanup_point   char * __sav = 0B;>>;
  {
    if (__builtin_strcmp ((const char *) __old, (const char *) "C") != 0)
      {
        {
          const size_t __len = __builtin_strlen ((const char *) __old) + 1;

                    const size_t __len = __builtin_strlen ((const char *) __old) + 1;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__sav = (char *) operator new [] ((size_t) __len)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __sav, (const void *) __old, (size_t) __len) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) setlocale (4, (const char *) "C") >>>>>;
        }
      }
  }
    char * __args;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__args, __fmt) >>>>>;
    const int __ret;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = __builtin_vsnprintf (__out, (long long unsigned int) __size, __fmt, __args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__args) >>>>>;
  if (__sav != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) setlocale (4, (const char *) __sav) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (if (__sav != 0B)
    {
      operator delete [] ((void *) __sav);
    }
  else
    {
      0
    }) >>>>>;
    }
  return <retval> = (int) __ret;
}


;; Function int __gthread_active_p() (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function int __gthread_create(__gthread_t*, void* (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_create (__threadid, 0B, __func, __args)>>;


;; Function int __gthread_join(__gthread_t, void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_join (__threadid, __value_ptr)>>;


;; Function int __gthread_detach(__gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_detach (__threadid)>>;


;; Function int __gthread_equal(__gthread_t, __gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_equal (__t1, __t2)>>;


;; Function __gthread_t __gthread_self() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_self ()>>;


;; Function int __gthread_yield() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = sched_yield ()>>;


;; Function int __gthread_once(__gthread_once_t*, void (*)()) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_once (__once, __func)>>;
  }
else
  {
    return <retval> = -1;
  }


;; Function int __gthread_key_create(__gthread_key_t*, void (*)(void*)) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_key_create (__key, __dtor)>>;


;; Function int __gthread_key_delete(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_key_delete (__key)>>;


;; Function void* __gthread_getspecific(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_getspecific (__key)>>;


;; Function int __gthread_setspecific(__gthread_key_t, const void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_setspecific (__key, __ptr)>>;


;; Function void __gthread_mutex_init_function(void**) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_init (__mutex, 0B) >>>>>;
  }


;; Function int __gthread_mutex_destroy(void**) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_destroy (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_lock(void**) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_lock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_trylock(void**) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_trylock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_timedlock(void**, const __gthread_time_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_timedlock (__mutex, __abs_timeout)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_unlock(void**) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_unlock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_recursive_mutex_init_function(void**) (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point __gthread_active_p () != 0>>)
      {
        {
          pthread_mutexattr_t __attr;
          int __r;

                    pthread_mutexattr_t __attr;
                    int __r;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = pthread_mutexattr_init (&__attr)) >>>>>;
          if (__r == 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = pthread_mutexattr_settype (&__attr, 2)) >>>>>;
            }
          if (__r == 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = pthread_mutex_init (__mutex, (const pthread_mutexattr_t *) &__attr)) >>>>>;
            }
          if (__r == 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = pthread_mutexattr_destroy (&__attr)) >>>>>;
            }
          return <retval> = __r;
        }
      }
  }
  return <retval> = 0;
}


;; Function int __gthread_recursive_mutex_lock(void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_lock (__mutex)>>;


;; Function int __gthread_recursive_mutex_trylock(void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_trylock (__mutex)>>;


;; Function int __gthread_recursive_mutex_timedlock(void**, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_timedlock (__mutex, __abs_timeout)>>;


;; Function int __gthread_recursive_mutex_unlock(void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_unlock (__mutex)>>;


;; Function int __gthread_recursive_mutex_destroy(void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_destroy (__mutex)>>;


;; Function int __gthread_cond_broadcast(void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_broadcast (__cond)>>;


;; Function int __gthread_cond_signal(void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_signal (__cond)>>;


;; Function int __gthread_cond_wait(void**, void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_timedwait(void**, void**, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_timedwait (__cond, __mutex, __abs_timeout)>>;


;; Function int __gthread_cond_wait_recursive(void**, void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_destroy(void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_destroy (__cond)>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4)>>;


;; Function void __gnu_cxx::__atomic_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


{
  _Atomic_word __result = *__mem;

    _Atomic_word __result = *__mem;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;
  return <retval> = __result;
}


;; Function void __gnu_cxx::__atomic_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add ((volatile _Atomic_word *) __mem, __val)>>;
  }
else
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add_single (__mem, __val)>>;
  }


;; Function void __gnu_cxx::__atomic_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add ((volatile _Atomic_word *) __mem, __val) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_single (__mem, __val) >>>>>;
  }


;; Function int std::__cxx11::stoi(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, char, int> (strtol, (const char *) "stoi", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int> (strtol, (const char *) "stol", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int> (strtoul, (const char *) "stoul", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int> (strtoll, (const char *) "stoll", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int> (strtoull, (const char *) "stoull", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float> (strtof, (const char *) "stof", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double> (strtod, (const char *) "stod", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double> (strtold, (const char *) "stold", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function std::__cxx11::string std::__cxx11::to_string(int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.73078, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.73078
  vsnprintf
  16
  (const char *) "%d"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.73144, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.73144
  vsnprintf
  16
  (const char *) "%u"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.73148, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.73148
  vsnprintf
  16
  (const char *) "%ld"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.73152, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.73152
  vsnprintf
  16
  (const char *) "%lu"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.73156, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.73156
  vsnprintf
  32
  (const char *) "%lld"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.73160, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.73160
  vsnprintf
  32
  (const char *) "%llu"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.73191, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.73191
  vsnprintf
  58
  (const char *) "%f"
  (double) __val >>>>>>;
}


;; Function std::__cxx11::string std::__cxx11::to_string(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.73222, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.73222
  vsnprintf
  328
  (const char *) "%f"
  __val >>>>>>;
}


;; Function std::__cxx11::string std::__cxx11::to_string(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.73253, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.73253
  vsnprintf
  4952
  (const char *) "%Lf"
  __val >>>>>>;
}


;; Function int std::__cxx11::stoi(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, wchar_t, int> (wcstol, (const char *) "stoi", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int> (wcstol, (const char *) "stol", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int> (wcstoul, (const char *) "stoul", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int> (wcstoll, (const char *) "stoll", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int> (wcstoull, (const char *) "stoull", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float> (wcstof, (const char *) "stof", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double> (wcstod, (const char *) "stod", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double> (wcstold, (const char *) "stold", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.74477, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.74477
  vswprintf
  16
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.74543, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.74543
  vswprintf
  16
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.74547, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.74547
  vswprintf
  16
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.74551, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.74551
  vswprintf
  16
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.74555, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.74555
  vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.74559, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.74559
  vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.74564, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.74564
  vswprintf
  58
  (const wchar_t *) "%"
  (double) __val >>>>>>;
}


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.74569, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.74569
  vswprintf
  328
  (const wchar_t *) "%"
  __val >>>>>>;
}


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.74574, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.74574
  vswprintf
  4952
  (const wchar_t *) "%"
  __val >>>>>>;
}


;; Function std::size_t std::hash<bool>::operator()(bool) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char>::operator()(char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<signed char>::operator()(signed char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<unsigned char>::operator()(unsigned char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<wchar_t>::operator()(wchar_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char16_t>::operator()(char16_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char32_t>::operator()(char32_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<short int>::operator()(short int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<int>::operator()(int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long int>::operator()(long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long long int>::operator()(long long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<short unsigned int>::operator()(short unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<unsigned int>::operator()(unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long unsigned int>::operator()(long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long long unsigned int>::operator()(long long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __val
   >>>;


;; Function std::size_t std::hash<__int128>::operator()(__int128) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<__int128 unsigned>::operator()(__int128 unsigned) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function static std::size_t std::_Hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_bytes (__ptr, __clength, __seed)>>;


;; Function static std::size_t std::_Fnv_hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Fnv_hash_bytes (__ptr, __clength, __seed)>>;


;; Function std::size_t std::hash<float>::operator()(float) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<float> ((const float &) &__val) : 0>>
   >>>;


;; Function std::size_t std::hash<double>::operator()(double) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<double> ((const double &) &__val) : 0>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char> >::operator()(const string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char>::data ((const struct string *) __s), std::__cxx11::basic_string<char>::length ((const struct string *) __s), 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<wchar_t> >::operator()(const wstring&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<wchar_t>::data ((const struct wstring *) __s), std::__cxx11::basic_string<wchar_t>::length ((const struct wstring *) __s) * 2, 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char16_t> >::operator()(const u16string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char16_t>::data ((const struct u16string *) __s), std::__cxx11::basic_string<char16_t>::length ((const struct u16string *) __s) * 2, 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char32_t> >::operator()(const u32string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char32_t>::data ((const struct u32string *) __s), std::__cxx11::basic_string<char32_t>::length ((const struct u32string *) __s) * 4, 3339675911)>>
   >>>;


;; Function std::__cxx11::basic_string<char> std::literals::string_literals::operator""s(const char*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.77593, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.77593
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.77592, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.77592
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<wchar_t> std::literals::string_literals::operator""s(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.77600, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.77600
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.77599, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.77599
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char16_t> std::literals::string_literals::operator""s(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.77660, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.77660
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.77659, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.77659
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char32_t> std::literals::string_literals::operator""s(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.77729, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.77729
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.77728, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.77728
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::locale::locale(const string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Impl * _M_impl;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::locale ((struct locale *) this, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s)) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function std::locale::locale(const std::locale&, const string&, std::locale::category) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Impl * _M_impl;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::locale ((struct locale *) this, __base, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s), __cat) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function bool std::locale::operator!=(const std::locale&) const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = !std::locale::operator== ((const struct locale *) this, __other)>>
   >>>;


;; Function std::locale::facet::facet(std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*) () * _vptr.facet;
    _Atomic_word _M_refcount;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct facet *) this)->_vptr.facet = &_ZTVNSt6locale5facetE + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct facet *) this)->_M_refcount = __refs != 0 ? 1 : 0) >>>>>;
  }
   >>>;


;; Function void std::locale::facet::_M_add_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((const struct facet *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::facet::_M_remove_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((const struct facet *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct facet *) this != 0B)
    {
      OBJ_TYPE_REF(*(((struct facet *) this)->_vptr.facet + 8);(struct facet)(struct facet *) this->1) ((struct facet *) this);
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
    }
   >>>;


;; Function std::locale::id::id() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    size_t _M_index;
  } &) this = {CLOBBER} >>>>>;
{
  
}


;; Function void std::locale::_Impl::_M_add_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Impl *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::_Impl::_M_remove_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Impl *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct _Impl *) this != 0B)
    {
      try
        {
          std::locale::_Impl::~_Impl ((struct _Impl *) this);
        }
      finally
        {
          operator delete ((void *) this, 40);
        }
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
    }
   >>>;


;; Function bool std::locale::_Impl::_M_check_same_name() (null)
;; enabled by -tree-original


{
  bool __ret = 1;

  <<cleanup_point   bool __ret = 1;>>;
  {
    if (*(((struct _Impl *) this)->_M_names + 8) != 0B)
      {
        {
          {
            size_t __i = 0;

            <<cleanup_point             size_t __i = 0;>>;
            while (1)
              {
                if (!__ret || __i > 4) goto <D.78738>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = __builtin_strcmp ((const char *) *(((struct _Impl *) this)->_M_names + (sizetype) (__i * 8)), (const char *) *(((struct _Impl *) this)->_M_names + ((sizetype) __i + 1) * 8)) == 0) >>>>>;
                <<cleanup_point (void)  ++__i>>;
              }
            <D.78738>:;
          }
        }
      }
  }
  return <retval> = __ret;
}


;; Function bool std::_V2::error_category::operator<(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::less<const std::_V2::error_category*>::operator() (&TARGET_EXPR <D.79908, {}>, (const struct error_category *) this, (const struct error_category *) __other)>>
   >>>;


;; Function bool std::_V2::error_category::operator==(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category *) this == (const struct error_category *) __other
   >>>;


;; Function bool std::_V2::error_category::operator!=(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category *) this != (const struct error_category *) __other
   >>>;


;; Function std::error_code::error_code() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_value;
    const struct error_category * _M_cat;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) std::_V2::system_category ()) >>>>>;
  }
   >>>;


;; Function std::error_code::error_code(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_value;
    const struct error_category * _M_cat;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_code::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_code::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::assign ((struct error_code *) this, 0, std::_V2::system_category ()) >>>>>
   >>>;


;; Function int std::error_code::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_code *) this)->_M_value
   >>>;


;; Function const std::_V2::error_category& std::error_code::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) ((const struct error_code *) this)->_M_cat
   >>>;


;; Function std::__cxx11::string std::error_code::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.80001, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>->4)
  D.80001
  SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>
  std::error_code::value ((const struct error_code *) this) >>>>>>;


;; Function std::error_code::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((const struct error_code *) this)->_M_value != 0
   >>>;


;; Function std::error_code std::make_error_code(std::errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.80024, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.80024
  (struct error_code *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::_V2::generic_category () >>>>>>
   >>>;


;; Function bool std::operator<(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) < std::error_code::value ((const struct error_code *) __rhs)>>
   >>>;


;; Function std::error_condition::error_condition() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_value;
    const struct error_category * _M_cat;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) std::_V2::generic_category ()) >>>>>;
  }
   >>>;


;; Function std::error_condition::error_condition(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_value;
    const struct error_category * _M_cat;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_condition::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_condition::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_condition::assign ((struct error_condition *) this, 0, std::_V2::generic_category ()) >>>>>
   >>>;


;; Function int std::error_condition::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_condition *) this)->_M_value
   >>>;


;; Function const std::_V2::error_category& std::error_condition::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) ((const struct error_condition *) this)->_M_cat
   >>>;


;; Function std::__cxx11::string std::error_condition::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.80125, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>->4)
  D.80125
  SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>
  std::error_condition::value ((const struct error_condition *) this) >>>>>>;


;; Function std::error_condition::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((const struct error_condition *) this)->_M_value != 0
   >>>;


;; Function std::error_condition std::make_error_condition(std::errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.80148, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.80148
  (struct error_condition *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::_V2::generic_category () >>>>>>
   >>>;


;; Function bool std::operator<(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) < std::error_condition::value ((const struct error_condition *) __rhs)>>
   >>>;


;; Function bool std::operator==(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) == std::error_code::value ((const struct error_code *) __rhs)>>
   >>>;


;; Function bool std::operator==(const std::error_code&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>->6) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>, std::error_code::value ((const struct error_code *) __lhs), __rhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>->7) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>, __lhs, std::error_condition::value ((const struct error_condition *) __rhs))>>
   >>>;


;; Function bool std::operator==(const std::error_condition&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>->6) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>, std::error_code::value ((const struct error_code *) __rhs), __lhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>->7) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>, __rhs, std::error_condition::value ((const struct error_condition *) __lhs))>>
   >>>;


;; Function bool std::operator==(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) == std::error_condition::value ((const struct error_condition *) __rhs)>>
   >>>;


;; Function bool std::operator!=(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;


;; Function bool std::operator!=(const std::error_code&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;


;; Function bool std::operator!=(const std::error_condition&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;


;; Function bool std::operator!=(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;


;; Function std::system_error::system_error(std::error_code) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.79644;
      struct __cow_string _M_msg;
    } D.80294;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.80293, (const struct string &) &TARGET_EXPR <D.80300, <<< Unknown tree: aggr_init_expr
  4
  message
  D.80300
  &__ec >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.80293.D.79643._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.80293);
    }
}


;; Function std::system_error::system_error(std::error_code, const string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.79644;
      struct __cow_string _M_msg;
    } D.80294;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.80293, (const struct string &) &TARGET_EXPR <D.80323, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.80323
  (struct basic_string &) &TARGET_EXPR <D.80309, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.80309
  (const struct basic_string &) __what
  (const char *) ": " >>>>
  (struct basic_string &) &TARGET_EXPR <D.80310, <<< Unknown tree: aggr_init_expr
  4
  message
  D.80310
  &__ec >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.80293.D.79643._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.80293);
    }
}


;; Function std::system_error::system_error(std::error_code, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.79644;
      struct __cow_string _M_msg;
    } D.80294;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.80293, (const struct string &) &TARGET_EXPR <D.80341, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.80341
  __what
  (struct basic_string &) &TARGET_EXPR <D.80340, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.80340
  (const char *) ": "
  (struct basic_string &) &TARGET_EXPR <D.80333, <<< Unknown tree: aggr_init_expr
  4
  message
  D.80333
  &__ec >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.80293.D.79643._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.80293);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.79644;
      struct __cow_string _M_msg;
    } D.80294;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::system_error::system_error ((struct system_error *) this, TARGET_EXPR <D.80351, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.80351
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  __ecat >>>>, __what) >>>>>;
  try
    {
      
    }
  catch
    {
      std::system_error::~system_error ((struct system_error *) this);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.79644;
      struct __cow_string _M_msg;
    } D.80294;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.80293, (const struct string &) &TARGET_EXPR <D.80367, <<< Unknown tree: aggr_init_expr
  4
  message
  D.80367
  &TARGET_EXPR <D.80366, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.80366
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  __ecat >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.80293.D.79643._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.80293);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.exception;
      } D.79644;
      struct __cow_string _M_msg;
    } D.80294;
    struct error_code _M_code;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.80293, (const struct string &) &TARGET_EXPR <D.80378, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.80378
  (struct basic_string &) &TARGET_EXPR <D.80375, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.80375
  (const struct basic_string &) __what
  (const char *) ": " >>>>
  (struct basic_string &) &TARGET_EXPR <D.80377, <<< Unknown tree: aggr_init_expr
  4
  message
  D.80377
  &TARGET_EXPR <D.80376, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.80376
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  __ecat >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.80293.D.79643._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.80293);
    }
}


;; Function const std::error_code& std::system_error::code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_code &) &((const struct system_error *) this)->_M_code
   >>>;


;; Function std::size_t std::hash<std::error_code>::operator()(const std::error_code&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &__e->_M_value)) >>>>>;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<const std::_V2::error_category*> ((const struct error_category * const &) &__e->_M_cat, (size_t) __tmp)>>;
  }
   >>>;


;; Function constexpr std::_Ios_Fmtflags std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Fmtflags) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator|(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Fmtflags) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator^(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Fmtflags) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator~(std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = ~__a;


;; Function const std::_Ios_Fmtflags& std::operator|=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Fmtflags &) __a;>>;


;; Function const std::_Ios_Fmtflags& std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Fmtflags &) __a;>>;


;; Function const std::_Ios_Fmtflags& std::operator^=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Fmtflags &) __a;>>;


;; Function constexpr std::_Ios_Openmode std::operator&(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Openmode) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Openmode) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator^(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Openmode) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator~(std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = ~__a;


;; Function const std::_Ios_Openmode& std::operator|=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Openmode &) __a;>>;


;; Function const std::_Ios_Openmode& std::operator&=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Openmode &) __a;>>;


;; Function const std::_Ios_Openmode& std::operator^=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Openmode &) __a;>>;


;; Function constexpr std::_Ios_Iostate std::operator&(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Iostate) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator|(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Iostate) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator^(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Iostate) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator~(std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = ~__a;


;; Function const std::_Ios_Iostate& std::operator|=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Iostate &) __a;>>;


;; Function const std::_Ios_Iostate& std::operator&=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Iostate &) __a;>>;


;; Function const std::_Ios_Iostate& std::operator^=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Iostate &) __a;>>;


;; Function std::error_code std::make_error_code(std::io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.80540, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.80540
  (struct error_code *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::iostream_category () >>>>>>
   >>>;


;; Function std::error_condition std::make_error_condition(std::io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.80544, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.80544
  (struct error_condition *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::iostream_category () >>>>>>
   >>>;


;; Function std::ios_base::_Callback_list::_Callback_list(std::ios_base::event_callback, int, std::ios_base::_Callback_list*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Callback_list * _M_next;
    void (*event_callback) (event, struct ios_base &, int) _M_fn;
    int _M_index;
    _Atomic_word _M_refcount;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_next = __cb) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_fn = __fn) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_index = __index) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_refcount = 0) >>>>>;
}


;; Function void std::ios_base::_Callback_list::_M_add_reference() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, 1) >>>>>;


;; Function int std::ios_base::_Callback_list::_M_remove_reference() (null)
;; enabled by -tree-original


{
  int __res;

    int __res;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__res = __gnu_cxx::__exchange_and_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, -1)) >>>>>;
  if (__res == 0)
    {
      
    }
  return <retval> = __res;
}


;; Function std::ios_base::_Words::_Words() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void * _M_pword;
    long int _M_iword;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Words *) this)->_M_pword = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Words *) this)->_M_iword = 0) >>>>>;
}


;; Function std::ios_base::fmtflags std::ios_base::flags() const (null)
;; enabled by -tree-original


return <retval> = (fmtflags) ((const struct ios_base *) this)->_M_flags;


;; Function std::ios_base::fmtflags std::ios_base::flags(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_flags = __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(std::ios_base::fmtflags, std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator& (__fmtfl, __mask)) >>>>>;
  return <retval> = __old;
}


;; Function void std::ios_base::unsetf(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;


;; Function std::streamsize std::ios_base::precision() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_precision;


;; Function std::streamsize std::ios_base::precision(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_precision;

    streamsize __old = ((struct ios_base *) this)->_M_precision;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_precision = __prec) >>>>>;
  return <retval> = __old;
}


;; Function std::streamsize std::ios_base::width() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_width;


;; Function std::streamsize std::ios_base::width(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_width;

    streamsize __old = ((struct ios_base *) this)->_M_width;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_width = __wide) >>>>>;
  return <retval> = __old;
}


;; Function std::locale std::ios_base::getloc() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.80866, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.80866
  (struct locale *) <<< Unknown tree: void_cst >>>
  (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale >>>>>>;


;; Function const std::locale& std::ios_base::_M_getloc() const (null)
;; enabled by -tree-original


return <retval> = (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale;


;; Function long int& std::ios_base::iword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__word = ((struct ios_base *) this)->_M_word_size > __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 1)) >>>>>;
  return <retval> = (long int &) &__word->_M_iword;
}


;; Function void*& std::ios_base::pword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__word = ((struct ios_base *) this)->_M_word_size > __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 0)) >>>>>;
  return <retval> = (void * &) &__word->_M_pword;
}


;; Function std::ios_base& std::boolalpha(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noboolalpha(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showbase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowbase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showpoint(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowpoint(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showpos(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowpos(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::skipws(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noskipws(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::uppercase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::nouppercase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::unitbuf(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::nounitbuf(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::internal(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::left(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 32, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::right(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 128, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::dec(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::hex(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::oct(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 64, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::fixed(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4, 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::scientific(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 256, 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::hexfloat(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, std::operator| (4, 256), 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::defaultfloat(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 260) >>>>>;
return <retval> = __base;


;; Function std::ctype<char>::char_type std::ctype<char>::toupper(std::ctype<char>::char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.82925._vptr.facet + 16);(const struct ctype)(const struct ctype *) this->2) ((const struct ctype *) this, (int) __c)>>;


;; Function const char_type* std::ctype<char>::toupper(std::ctype<char>::char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.82925._vptr.facet + 24);(const struct ctype)(const struct ctype *) this->3) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::tolower(std::ctype<char>::char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.82925._vptr.facet + 32);(const struct ctype)(const struct ctype *) this->4) ((const struct ctype *) this, (int) __c)>>;


;; Function const char_type* std::ctype<char>::tolower(std::ctype<char>::char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.82925._vptr.facet + 40);(const struct ctype)(const struct ctype *) this->5) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::widen(char) const (null)
;; enabled by -tree-original


if (((const struct ctype *) this)->_M_widen_ok != 0)
  {
    return <retval> = ((const struct ctype *) this)->_M_widen[(int) (unsigned char) __c];
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.82925._vptr.facet + 48);(const struct ctype)(const struct ctype *) this->6) ((const struct ctype *) this, (int) __c)>>;


;; Function const char* std::ctype<char>::widen(const char*, const char*, std::ctype<char>::char_type*) const (null)
;; enabled by -tree-original


if (((const struct ctype *) this)->_M_widen_ok == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long long unsigned int) (__hi - __lo)) >>>>>;
    return <retval> = __hi;
  }
if (((const struct ctype *) this)->_M_widen_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.82925._vptr.facet + 56);(const struct ctype)(const struct ctype *) this->7) ((const struct ctype *) this, __lo, __hi, __to)>>;


;; Function char std::ctype<char>::narrow(std::ctype<char>::char_type, char) const (null)
;; enabled by -tree-original


{
  const char __t;

  if (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] != 0)
    {
      return <retval> = ((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c];
    }
    const char __t;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__t = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.82925._vptr.facet + 64);(const struct ctype)(const struct ctype *) this->8) ((const struct ctype *) this, (int) __c, (int) __dfault)) >>>>>;
  if (__t != (const char) __dfault)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] = (char) __t) >>>>>;
    }
  return <retval> = (char) __t;
}


;; Function const char_type* std::ctype<char>::narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


if (__builtin_expect (((const struct ctype *) this)->_M_narrow_ok == 1, 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long long unsigned int) (__hi - __lo)) >>>>>;
    return <retval> = __hi;
  }
if (((const struct ctype *) this)->_M_narrow_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_narrow_init ((const struct ctype *) this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.82925._vptr.facet + 72);(const struct ctype)(const struct ctype *) this->9) ((const struct ctype *) this, __lo, __hi, (int) __dfault, __to)>>;


;; Function const mask* std::ctype<char>::table() const (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const mask *) ((const struct ctype *) this)->_M_table
   >>>;


;; Function virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const char* std::ctype<char>::do_widen(const char*, const char*, std::ctype<char>::char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long long unsigned int) (__hi - __lo)) >>>>>;
return <retval> = __hi;


;; Function virtual char std::ctype<char>::do_narrow(std::ctype<char>::char_type, char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const char_type* std::ctype<char>::do_narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long long unsigned int) (__hi - __lo)) >>>>>;
return <retval> = __hi;


;; Function bool std::ctype<char>::is(std::ctype_base::mask, char) const (null)
;; enabled by -tree-original


return <retval> = ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long long unsigned int) (unsigned char) __c * 2)) & __m) != 0;


;; Function const char* std::ctype<char>::is(const char*, const char*, std::ctype_base::mask*) const (null)
;; enabled by -tree-original


while (1)
  {
    if (__low >= __high) goto <D.83316>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__vec++  = (mask) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long long unsigned int) (unsigned char) *__low++  * 2))) >>>>>;
  }
<D.83316>:;
return <retval> = __high;


;; Function const char* std::ctype<char>::scan_is(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


while (1)
  {
    if (<<cleanup_point __low < __high && !std::ctype<char>::is ((const struct ctype *) this, (int) __m, (int) *__low)>>) (void) 0; else goto <D.83324>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
  }
<D.83324>:;
return <retval> = __low;


;; Function const char* std::ctype<char>::scan_not(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


while (1)
  {
    if (<<cleanup_point __low < __high && std::ctype<char>::is ((const struct ctype *) this, (int) __m, (int) *__low)>>) (void) 0; else goto <D.83332>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
  }
<D.83332>:;
return <retval> = __low;


;; Function std::codecvt<char16_t, char, int>::codecvt(std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.facet;
        _Atomic_word _M_refcount;
      } D.90254;
    } D.90320;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__codecvt_abstract_base<char16_t, char, int>::__codecvt_abstract_base (&((struct codecvt *) this)->D.90319, __refs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct codecvt *) this)->D.90319.D.90253._vptr.facet = &_ZTVSt7codecvtIDsciE + 16) >>>>>;
    }
  catch
    {
      std::__codecvt_abstract_base<char16_t, char, int>::~__codecvt_abstract_base (&((struct codecvt *) this)->D.90319);
    }
}


;; Function std::codecvt<char32_t, char, int>::codecvt(std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*) () * _vptr.facet;
        _Atomic_word _M_refcount;
      } D.90460;
    } D.90526;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__codecvt_abstract_base<char32_t, char, int>::__codecvt_abstract_base (&((struct codecvt *) this)->D.90525, __refs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct codecvt *) this)->D.90525.D.90459._vptr.facet = &_ZTVSt7codecvtIDiciE + 16) >>>>>;
    }
  catch
    {
      std::__codecvt_abstract_base<char32_t, char, int>::~__codecvt_abstract_base (&((struct codecvt *) this)->D.90525);
    }
}


;; Function std::codecvt_byname<char16_t, char, int>::codecvt_byname(const char*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        struct 
        {
          int (*) () * _vptr.facet;
          _Atomic_word _M_refcount;
        } D.90254;
      } D.90320;
    } D.90603;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::codecvt<char16_t, char, int>::codecvt (&((struct codecvt_byname *) this)->D.90602, __refs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct codecvt_byname *) this)->D.90602.D.90319.D.90253._vptr.facet = &_ZTVSt14codecvt_bynameIDsciE + 16) >>>>>;
    }
  catch
    {
      std::codecvt<char16_t, char, int>::~codecvt (&((struct codecvt_byname *) this)->D.90602);
    }
}


;; Function std::codecvt_byname<char16_t, char, int>::codecvt_byname(const string&, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        struct 
        {
          int (*) () * _vptr.facet;
          _Atomic_word _M_refcount;
        } D.90254;
      } D.90320;
    } D.90603;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::codecvt_byname<char16_t, char, int>::codecvt_byname ((struct codecvt_byname *) this, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s), __refs) >>>>>;
  try
    {
      
    }
  catch
    {
      std::codecvt_byname<char16_t, char, int>::~codecvt_byname ((struct codecvt_byname *) this);
    }
}


;; Function virtual std::codecvt_byname<char16_t, char, int>::~codecvt_byname() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct codecvt_byname *) this)->D.90602.D.90319.D.90253._vptr.facet = &_ZTVSt14codecvt_bynameIDsciE + 16) >>>>>;
    try
      {
        try
          {
            
          }
        finally
          {
            std::codecvt<char16_t, char, int>::~codecvt (&((struct codecvt_byname *) this)->D.90602);
          }
      }
    finally
      {
        *(struct 
        {
          struct 
          {
            struct 
            {
              struct 
              {
                int (*) () * _vptr.facet;
                _Atomic_word _M_refcount;
              } D.90254;
            } D.90320;
          } D.90603;
        } &) this = {CLOBBER};
      }
  }
  <D.90631>:;
   >>>;


;; Function std::codecvt_byname<char32_t, char, int>::codecvt_byname(const char*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        struct 
        {
          int (*) () * _vptr.facet;
          _Atomic_word _M_refcount;
        } D.90460;
      } D.90526;
    } D.90679;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::codecvt<char32_t, char, int>::codecvt (&((struct codecvt_byname *) this)->D.90678, __refs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct codecvt_byname *) this)->D.90678.D.90525.D.90459._vptr.facet = &_ZTVSt14codecvt_bynameIDiciE + 16) >>>>>;
    }
  catch
    {
      std::codecvt<char32_t, char, int>::~codecvt (&((struct codecvt_byname *) this)->D.90678);
    }
}


;; Function std::codecvt_byname<char32_t, char, int>::codecvt_byname(const string&, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        struct 
        {
          int (*) () * _vptr.facet;
          _Atomic_word _M_refcount;
        } D.90460;
      } D.90526;
    } D.90679;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::codecvt_byname<char32_t, char, int>::codecvt_byname ((struct codecvt_byname *) this, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s), __refs) >>>>>;
  try
    {
      
    }
  catch
    {
      std::codecvt_byname<char32_t, char, int>::~codecvt_byname ((struct codecvt_byname *) this);
    }
}


;; Function virtual std::codecvt_byname<char32_t, char, int>::~codecvt_byname() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct codecvt_byname *) this)->D.90678.D.90525.D.90459._vptr.facet = &_ZTVSt14codecvt_bynameIDiciE + 16) >>>>>;
    try
      {
        try
          {
            
          }
        finally
          {
            std::codecvt<char32_t, char, int>::~codecvt (&((struct codecvt_byname *) this)->D.90678);
          }
      }
    finally
      {
        *(struct 
        {
          struct 
          {
            struct 
            {
              struct 
              {
                int (*) () * _vptr.facet;
                _Atomic_word _M_refcount;
              } D.90460;
            } D.90526;
          } D.90679;
        } &) this = {CLOBBER};
      }
  }
  <D.90707>:;
   >>>;


;; Function std::__basic_file<char>::__basic_file(std::__basic_file<char>&&, void**) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct __c_file * _M_cfile;
    bool _M_cfile_created;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __basic_file *) this)->_M_cfile = __rv->_M_cfile) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __basic_file *) this)->_M_cfile_created = __rv->_M_cfile_created) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__rv->_M_cfile = 0B) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__rv->_M_cfile_created = 0) >>>>>;
  }
   >>>;


;; Function void std::__basic_file<char>::swap(std::__basic_file<char>&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::swap<_iobuf*> ((struct _iobuf * &) &((struct __basic_file *) this)->_M_cfile, (struct _iobuf * &) &__f->_M_cfile) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::swap<bool> ((bool &) &((struct __basic_file *) this)->_M_cfile_created, (bool &) &__f->_M_cfile_created) >>>>>;
   >>>;


;; Function constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = long long int] (null)
;; enabled by -tree-original


if (*__b < *__a)
  {
    return <retval> = __b;
  }
return <retval> = __a;


;; Function static constexpr bool __gnu_cxx::__alloc_traits<_Alloc, <template-parameter-1-2> >::_S_propagate_on_move_assign() [with _Alloc = std::allocator<char>; <template-parameter-1-2> = char] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool __gnu_cxx::__alloc_traits<_Alloc, <template-parameter-1-2> >::_S_always_equal() [with _Alloc = std::allocator<char>; <template-parameter-1-2> = char] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool __gnu_cxx::__alloc_traits<_Alloc, <template-parameter-1-2> >::_S_nothrow_move() [with _Alloc = std::allocator<char>; <template-parameter-1-2> = char] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_propagate_on_move_assign () || __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_always_equal ()>>;


;; Function Shader::Shader(const char*, const char*, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    unsigned int ID;
  } &) this = {CLOBBER} >>>>>;
{
  {
    struct string vertexCode;
    struct string fragmentCode;
    struct string geometryCode;
    struct ifstream vShaderFile;
    struct ifstream fShaderFile;
    struct ifstream gShaderFile;
    const char * vShaderCode;
    const char * fShaderCode;
    unsigned int vertex;
    unsigned int fragment;
    unsigned int geometry;

        struct string vertexCode;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string (&vertexCode) >>>>>;
    try
      {
                struct string fragmentCode;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string (&fragmentCode) >>>>>;
        try
          {
                        struct string geometryCode;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string (&geometryCode) >>>>>;
            try
              {
                                struct ifstream vShaderFile;
                <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ifstream<char>::basic_ifstream (&vShaderFile) >>>>>;
                try
                  {
                                        struct ifstream fShaderFile;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ifstream<char>::basic_ifstream (&fShaderFile) >>>>>;
                    try
                      {
                                                struct ifstream gShaderFile;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ifstream<char>::basic_ifstream (&gShaderFile) >>>>>;
                        try
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::exceptions (&vShaderFile.D.92731, std::operator| (4, 1)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::exceptions (&fShaderFile.D.92731, std::operator| (4, 1)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::exceptions (&gShaderFile.D.92731, std::operator| (4, 1)) >>>>>;
                            <<< Unknown tree: try_block
  {
    struct stringstream vShaderStream;
    struct stringstream fShaderStream;

    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ifstream<char>::open (&vShaderFile, vertexPath, 8) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ifstream<char>::open (&fShaderFile, fragmentPath, 8) >>>>>;
        struct stringstream vShaderStream;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_stringstream<char>::basic_stringstream (&vShaderStream, std::operator| (16, 8)) >>>>>;
    try
      {
                struct stringstream fShaderStream;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_stringstream<char>::basic_stringstream (&fShaderStream, std::operator| (16, 8)) >>>>>;
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< (&vShaderStream.D.94702.D.89313, (struct __streambuf_type *) std::basic_ifstream<char>::rdbuf (&vShaderFile)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< (&fShaderStream.D.94702.D.89313, (struct __streambuf_type *) std::basic_ifstream<char>::rdbuf (&fShaderFile)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ifstream<char>::close (&vShaderFile) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ifstream<char>::close (&fShaderFile) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::operator= (&vertexCode, (struct basic_string &) &TARGET_EXPR <D.95428, <<< Unknown tree: aggr_init_expr
  4
  str
  D.95428
  &vShaderStream >>>>) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::operator= (&fragmentCode, (struct basic_string &) &TARGET_EXPR <D.95432, <<< Unknown tree: aggr_init_expr
  4
  str
  D.95432
  &fShaderStream >>>>) >>>>>;
            {
              if (geometryPath != 0B)
                {
                  {
                    struct stringstream gShaderStream;

                    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ifstream<char>::open (&gShaderFile, geometryPath, 8) >>>>>;
                                        struct stringstream gShaderStream;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_stringstream<char>::basic_stringstream (&gShaderStream, std::operator| (16, 8)) >>>>>;
                    try
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< (&gShaderStream.D.94702.D.89313, (struct __streambuf_type *) std::basic_ifstream<char>::rdbuf (&gShaderFile)) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ifstream<char>::close (&gShaderFile) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::operator= (&geometryCode, (struct basic_string &) &TARGET_EXPR <D.95434, <<< Unknown tree: aggr_init_expr
  4
  str
  D.95434
  &gShaderStream >>>>) >>>>>;
                      }
                    finally
                      {
                        std::__cxx11::basic_stringstream<char>::~basic_stringstream (&gShaderStream);
                      }
                  }
                }
            }
          }
        finally
          {
            std::__cxx11::basic_stringstream<char>::~basic_stringstream (&fShaderStream);
          }
      }
    finally
      {
        std::__cxx11::basic_stringstream<char>::~basic_stringstream (&vShaderStream);
      }
  }
  <<< Unknown tree: handler
  
  {
    struct failure & e = (struct failure &) D.95436;

    try
      {
                register struct failure * D.95436;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (D.95436 = (struct failure *) __cxa_begin_catch (__builtin_eh_pointer (0))) >>>>>;
                struct failure & e = (struct failure &) D.95436;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ"), endl) >>>>>;
      }
    finally
      {
        __cxa_end_catch ();
      }
  } >>> >>>;
                                                        const char * vShaderCode;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (vShaderCode = std::__cxx11::basic_string<char>::c_str (&vertexCode)) >>>>>;
                                                        const char * fShaderCode;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (fShaderCode = std::__cxx11::basic_string<char>::c_str (&fragmentCode)) >>>>>;
                                                        unsigned int vertex;
                                                        unsigned int fragment;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (vertex = __glewCreateShader (35633)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  __glewShaderSource (vertex, 1, (const GLchar * const *) &vShaderCode, 0B) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  __glewCompileShader (vertex) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  Shader::checkCompileErrors ((struct Shader *) this, vertex, &TARGET_EXPR <D.95475, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.95475
  (struct string *) <<< Unknown tree: void_cst >>>
  (const char *) "VERTEX"
  (const struct allocator &) &TARGET_EXPR <D.95474, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.95474
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (fragment = __glewCreateShader (35632)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  __glewShaderSource (fragment, 1, (const GLchar * const *) &fShaderCode, 0B) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  __glewCompileShader (fragment) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  Shader::checkCompileErrors ((struct Shader *) this, fragment, &TARGET_EXPR <D.95477, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.95477
  (struct string *) <<< Unknown tree: void_cst >>>
  (const char *) "FRAGMENT"
  (const struct allocator &) &TARGET_EXPR <D.95476, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.95476
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>) >>>>>;
                                                        unsigned int geometry;
                            {
                              if (geometryPath != 0B)
                                {
                                  {
                                    const char * gShaderCode;

                                                                        const char * gShaderCode;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (gShaderCode = std::__cxx11::basic_string<char>::c_str (&geometryCode)) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (geometry = __glewCreateShader (36313)) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  __glewShaderSource (geometry, 1, (const GLchar * const *) &gShaderCode, 0B) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  __glewCompileShader (geometry) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  Shader::checkCompileErrors ((struct Shader *) this, geometry, &TARGET_EXPR <D.95481, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.95481
  (struct string *) <<< Unknown tree: void_cst >>>
  (const char *) "GEOMETRY"
  (const struct allocator &) &TARGET_EXPR <D.95480, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.95480
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>) >>>>>;
                                  }
                                }
                            }
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct Shader *) this)->ID = __glewCreateProgram ()) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  __glewAttachShader (((struct Shader *) this)->ID, vertex) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  __glewAttachShader (((struct Shader *) this)->ID, fragment) >>>>>;
                            if (geometryPath != 0B)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  __glewAttachShader (((struct Shader *) this)->ID, geometry) >>>>>;
                              }
                            <<cleanup_point <<< Unknown tree: expr_stmt
  __glewLinkProgram (((struct Shader *) this)->ID) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  Shader::checkCompileErrors ((struct Shader *) this, ((struct Shader *) this)->ID, &TARGET_EXPR <D.95483, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.95483
  (struct string *) <<< Unknown tree: void_cst >>>
  (const char *) "PROGRAM"
  (const struct allocator &) &TARGET_EXPR <D.95482, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.95482
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  __glewDeleteShader (vertex) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  __glewDeleteShader (fragment) >>>>>;
                            if (geometryPath != 0B)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  __glewDeleteShader (geometry) >>>>>;
                              }
                          }
                        finally
                          {
                            std::basic_ifstream<char>::~basic_ifstream (&gShaderFile);
                          }
                      }
                    finally
                      {
                        std::basic_ifstream<char>::~basic_ifstream (&fShaderFile);
                      }
                  }
                finally
                  {
                    std::basic_ifstream<char>::~basic_ifstream (&vShaderFile);
                  }
              }
            finally
              {
                std::__cxx11::basic_string<char>::~basic_string (&geometryCode);
              }
          }
        finally
          {
            std::__cxx11::basic_string<char>::~basic_string (&fragmentCode);
          }
      }
    finally
      {
        std::__cxx11::basic_string<char>::~basic_string (&vertexCode);
      }
  }
}


;; Function void Shader::use() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUseProgram (((struct Shader *) this)->ID) >>>>>;


;; Function void Shader::setBool(const string&, bool) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniform1i (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), (int) value) >>>>>;


;; Function void Shader::setInt(const string&, int) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniform1i (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), value) >>>>>;


;; Function void Shader::setFloat(const string&, float) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniform1f (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), value) >>>>>;


;; Function void Shader::setVec2(const string&, const vec2&) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniform2fv (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), 1, (const float *) glm::vec<2, float, (glm::qualifier)0>::operator[] ((const struct vec2 *) value, 0)) >>>>>;


;; Function void Shader::setVec2(const string&, float, float) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniform2f (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), x, y) >>>>>;


;; Function void Shader::setVec3(const string&, const vec3&) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniform3fv (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), 1, (const float *) glm::vec<3, float, (glm::qualifier)0>::operator[] ((const struct vec3 *) value, 0)) >>>>>;


;; Function void Shader::setVec3(const string&, float, float, float) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniform3f (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), x, y, z) >>>>>;


;; Function void Shader::setVec4(const string&, const vec4&) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniform4fv (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), 1, (const float *) glm::vec<4, float, (glm::qualifier)0>::operator[] ((const struct vec4 *) value, 0)) >>>>>;


;; Function void Shader::setVec4(const string&, float, float, float, float) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniform4f (__glewGetUniformLocation (((struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), x, y, z, w) >>>>>;


;; Function static constexpr glm::mat<2, 2, T, Q>::length_type glm::mat<2, 2, T, Q>::length() [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::mat<2, 2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 2;


;; Function constexpr const col_type& glm::mat<2, 2, T, Q>::operator[](glm::mat<2, 2, T, Q>::length_type) const [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::mat<2, 2, T, Q>::col_type = glm::vec<2, float, (glm::qualifier)0>; glm::mat<2, 2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (glm::mat<2, 2, float, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i < this->length()", (const char *) "C:/glm/glm/detail/type_mat2x2.inl", 229);, 0)) >>>>>;
return <retval> = (const struct col_type &) &((const struct mat *) this)->value[i];


;; Function void Shader::setMat2(const string&, const mat2&) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniformMatrix2fv (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), 1, 0, (const float *) glm::vec<2, float, (glm::qualifier)0>::operator[] ((const struct col_type *) glm::mat<2, 2, float, (glm::qualifier)0>::operator[] ((const struct mat2 *) mat, 0), 0)) >>>>>;


;; Function static constexpr glm::mat<3, 3, T, Q>::length_type glm::mat<3, 3, T, Q>::length() [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::mat<3, 3, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 3;


;; Function constexpr const col_type& glm::mat<3, 3, T, Q>::operator[](glm::mat<3, 3, T, Q>::length_type) const [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::mat<3, 3, T, Q>::col_type = glm::vec<3, float, (glm::qualifier)0>; glm::mat<3, 3, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (glm::mat<3, 3, float, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i < this->length()", (const char *) "C:/glm/glm/detail/type_mat3x3.inl", 250);, 0)) >>>>>;
return <retval> = (const struct col_type &) &((const struct mat *) this)->value[i];


;; Function void Shader::setMat3(const string&, const mat3&) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniformMatrix3fv (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), 1, 0, (const float *) glm::vec<3, float, (glm::qualifier)0>::operator[] ((const struct col_type *) glm::mat<3, 3, float, (glm::qualifier)0>::operator[] ((const struct mat3 *) mat, 0), 0)) >>>>>;


;; Function static constexpr glm::mat<4, 4, T, Q>::length_type glm::mat<4, 4, T, Q>::length() [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::mat<4, 4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 4;


;; Function constexpr const col_type& glm::mat<4, 4, T, Q>::operator[](glm::mat<4, 4, T, Q>::length_type) const [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::mat<4, 4, T, Q>::col_type = glm::vec<4, float, (glm::qualifier)0>; glm::mat<4, 4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (glm::mat<4, 4, float, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i < this->length()", (const char *) "C:/glm/glm/detail/type_mat4x4.inl", 298);, 0)) >>>>>;
return <retval> = (const struct col_type &) &((const struct mat *) this)->value[i];


;; Function void Shader::setMat4(const string&, const mat4&) const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniformMatrix4fv (__glewGetUniformLocation ((unsigned int) ((const struct Shader *) this)->ID, std::__cxx11::basic_string<char>::c_str ((const struct string *) name)), 1, 0, (const float *) glm::vec<4, float, (glm::qualifier)0>::operator[] ((const struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat4 *) mat, 0), 0)) >>>>>;


;; Function void Shader::checkCompileErrors(GLuint, std::__cxx11::string) (null)
;; enabled by -tree-original


{
  GLint success;
  GLchar infoLog[1024];

    GLint success;
    GLchar infoLog[1024];
  if (<<cleanup_point std::operator!=<char, std::char_traits<char>, std::allocator<char> > ((const struct basic_string &) (struct string *) type, (const char *) "PROGRAM")>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  __glewGetShaderiv (shader, 35713, &success) >>>>>;
      if (success == 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  __glewGetShaderInfoLog (shader, 1024, 0B, (GLchar *) &infoLog) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > (std::operator<< <std::char_traits<char> > (std::operator<< <std::char_traits<char> > (std::operator<< <char, std::char_traits<char>, std::allocator<char> > (std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "ERROR::SHADER_COMPILATION_ERROR of type: "), (const struct basic_string &) (struct string *) type), (const char *) "\n"), (const char *) &infoLog), (const char *) "\n -- --------------------------------------------------- -- "), endl) >>>>>;
        }
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  __glewGetProgramiv (shader, 35714, &success) >>>>>;
      if (success == 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  __glewGetProgramInfoLog (shader, 1024, 0B, (GLchar *) &infoLog) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > (std::operator<< <std::char_traits<char> > (std::operator<< <std::char_traits<char> > (std::operator<< <char, std::char_traits<char>, std::allocator<char> > (std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "ERROR::PROGRAM_LINKING_ERROR of type: "), (const struct basic_string &) (struct string *) type), (const char *) "\n"), (const char *) &infoLog), (const char *) "\n -- --------------------------------------------------- -- "), endl) >>>>>;
        }
    }
}


;; Function constexpr glm::vec<4, T, Q>::vec(X, Y, Z, W) [with X = float; Y = int; Z = int; W = int; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.53285;
    union ._58 D.53286;
    union ._59 D.53287;
    union ._60 D.53288;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51351.x = _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51357.y = (float) _y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51363.z = (float) _z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51369.w = (float) _w) >>>>>;
}


;; Function constexpr glm::vec<4, T, Q>::vec(X, Y, Z, W) [with X = int; Y = float; Z = int; W = int; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.53285;
    union ._58 D.53286;
    union ._59 D.53287;
    union ._60 D.53288;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51351.x = (float) _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51357.y = _y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51363.z = (float) _z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51369.w = (float) _w) >>>>>;
}


;; Function constexpr glm::vec<4, T, Q>::vec(X, Y, Z, W) [with X = int; Y = int; Z = float; W = int; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.53285;
    union ._58 D.53286;
    union ._59 D.53287;
    union ._60 D.53288;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51351.x = (float) _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51357.y = (float) _y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51363.z = _z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51369.w = (float) _w) >>>>>;
}


;; Function constexpr glm::vec<4, T, Q>::vec(X, Y, Z, W) [with X = int; Y = int; Z = int; W = float; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.53285;
    union ._58 D.53286;
    union ._59 D.53287;
    union ._60 D.53288;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51351.x = (float) _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51357.y = (float) _y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51363.z = (float) _z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51369.w = _w) >>>>>;
}


;; Function constexpr glm::mat<4, 4, T, Q>::mat(const T&) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct col_type value[4];
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct mat *) this)->value = {TARGET_EXPR <D.100742, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.100742
  (struct vec *) <<< Unknown tree: void_cst >>>
  (float) *s
  0
  0
  0 >>>>, TARGET_EXPR <D.100761, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.100761
  (struct vec *) <<< Unknown tree: void_cst >>>
  0
  (float) *s
  0
  0 >>>>, TARGET_EXPR <D.100780, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.100780
  (struct vec *) <<< Unknown tree: void_cst >>>
  0
  0
  (float) *s
  0 >>>>, TARGET_EXPR <D.100799, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.100799
  (struct vec *) <<< Unknown tree: void_cst >>>
  0
  0
  0
  (float) *s >>>>}) >>>>>;
}


;; Function constexpr glm::vec<3, T, Q>::vec(T, T, T) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._54 D.96502;
    union ._55 D.96503;
    union ._56 D.96504;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.95554.x = _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.95560.y = _y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.95566.z = _z) >>>>>;
}


;; Function constexpr genType glm::radians(genType) [with genType = float] (null)
;; enabled by -tree-original


return <retval> = degrees * 1.745329238474369049072265625e-2;


;; Function int main() (null)
;; enabled by -tree-original


{
  struct GLFWwindow * window;
  struct Shader ourShader;
  int linhas = 1;
  int i = 0;
  char c;
  char linha[100];
  char * pch;
  char * linhaComentario;
  struct FILE * arqin;
  float * vertices;
  unsigned int VBO;
  unsigned int VAO;

  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) glfwInit () >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glfwWindowHint (139266, 3) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glfwWindowHint (139267, 3) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glfwWindowHint (139272, 204801) >>>>>;
    struct GLFWwindow * window;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (window = glfwCreateWindow (800, 600, (const char *) "OPenGL : TDE 2 - 3D", 0B, 0B)) >>>>>;
  if (window == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "Failed to create GLFW window"), endl) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  glfwTerminate () >>>>>;
      return <retval> = -1;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  glfwMakeContextCurrent (window) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) glfwSetFramebufferSizeCallback (window, framebuffer_size_callback) >>>>>;
  if (<<cleanup_point glewInit () != 0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "Ocorreu um erro iniciando GLEW!"), endl) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "GLEW OK!"), endl) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, glGetString (7938)), endl) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  glEnable (2929) >>>>>;
    struct Shader ourShader;
  <<cleanup_point <<< Unknown tree: expr_stmt
  Shader::Shader (&ourShader, (const char *) "vertex.glsl", (const char *) "fragment.glsl", 0B) >>>>>;
  <<cleanup_point   int linhas = 1;>>;
  <<cleanup_point   int i = 0;>>;
    char c;
    char linha[100];
    char * pch;
    char * linhaComentario;
    struct FILE * arqin;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (arqin = fopen ((const char *) "casa.csv", (const char *) "rt")) >>>>>;
  if (arqin == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) printf ((const char *) "Erro na abertura de %s %d\n", (const char *) "casa.csv", 8) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  exit (0) >>>>>;
    }
  while (1)
    {
      if (<<cleanup_point fread ((void *) &c, 1, 1, arqin) != 0>>) (void) 0; else goto <D.100892>;
      if (c == 10)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) linhas++  >>>>>;
        }
    }
  <D.100892>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) printf ((const char *) "Linhas: %d \n", linhas) >>>>>;
    float * vertices;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (vertices = (float *) malloc ((long long unsigned int) (linhas * 8) * 4)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fclose (arqin) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fopen ((const char *) "casa.csv", (const char *) "rt") >>>>>;
  while (1)
    {
      if (<<cleanup_point feof (arqin) == 0>>) (void) 0; else goto <D.100894>;
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fgets ((char *) &linha, 100, arqin) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (linhaComentario = strstr ((const char *) &linha, (const char *) "//")) >>>>>;
        {
          if (linhaComentario == 0B)
            {
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pch = strtok ((char *) &linha, (const char *) ";")) >>>>>;
                while (1)
                  {
                    if (pch == 0B) goto <D.100896>;
                    {
                      int validarNumerico = strcmp ((const char *) pch, (const char *) "\n");

                                            int validarNumerico = strcmp ((const char *) pch, (const char *) "\n");
                      if (validarNumerico != 0)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(vertices + (sizetype) ((long long unsigned int) i * 4)) = (float) atof ((const char *) pch)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) printf ((const char *) "vertices[%d]: %f\n ", i, (double) *(vertices + (sizetype) ((long long unsigned int) i * 4))) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) i++  >>>>>;
                        }
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pch = strtok (0B, (const char *) ";")) >>>>>;
                    }
                  }
                <D.100896>:;
              }
            }
        }
      }
    }
  <D.100894>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fclose (arqin) >>>>>;
    unsigned int VBO;
    unsigned int VAO;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewGenVertexArrays (1, &VAO) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewGenBuffers (1, &VBO) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewBindVertexArray (VAO) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewBindBuffer (34962, VBO) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewBufferData (34962, (GLsizeiptr) ((long long unsigned int) (linhas * 8) * 4), (const void *) vertices, 35044) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewVertexAttribPointer (0, 3, 5126, 0, 32, 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewEnableVertexAttribArray (0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewVertexAttribPointer (1, 3, 5126, 0, 32, 12B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewEnableVertexAttribArray (1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewVertexAttribPointer (2, 2, 5126, 0, 32, 12B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewEnableVertexAttribArray (2) >>>>>;
  while (1)
    {
      if (<<cleanup_point glfwWindowShouldClose (window) == 0>>) (void) 0; else goto <D.100898>;
      {
        struct mat4 model = {.value={{.D.51351={.x=1.0e+0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=1.0e+0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=1.0e+0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=1.0e+0}}}};
        struct mat4 view = {.value={{.D.51351={.x=1.0e+0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=1.0e+0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=1.0e+0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=1.0e+0}}}};
        struct mat4 projection = {.value={{.D.51351={.x=1.0e+0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=1.0e+0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=1.0e+0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=1.0e+0}}}};
        unsigned int modelLoc;
        unsigned int viewLoc;

        <<cleanup_point <<< Unknown tree: expr_stmt
  processInput (window) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  glClearColor (0.0, 0.0, 0.0, 1.0e+0) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  glClear (16640) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  Shader::use (&ourShader) >>>>>;
        <<cleanup_point         struct mat4 model = {.value={{.D.51351={.x=1.0e+0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=1.0e+0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=1.0e+0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=1.0e+0}}}};>>;
        <<cleanup_point         struct mat4 view = {.value={{.D.51351={.x=1.0e+0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=1.0e+0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=1.0e+0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=1.0e+0}}}};>>;
        <<cleanup_point         struct mat4 projection = {.value={{.D.51351={.x=1.0e+0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=1.0e+0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=1.0e+0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=1.0e+0}}}};>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (model = *(struct mat &) &TARGET_EXPR <D.100858, glm::rotate<float, (glm::qualifier)0> ((const struct mat &) &model, (float) glfwGetTime (), (const struct vec &) &TARGET_EXPR <D.100850, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.100850
  (struct vec *) <<< Unknown tree: void_cst >>>
  0.0
  -5.0e-1
  0.0 >>>>)>) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (view = *(struct mat &) &TARGET_EXPR <D.100872, glm::translate<float, (glm::qualifier)0> ((const struct mat &) &view, (const struct vec &) &TARGET_EXPR <D.100868, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.100868
  (struct vec *) <<< Unknown tree: void_cst >>>
  0.0
  0.0
  -3.0e+0 >>>>)>) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (projection = *(struct mat &) &TARGET_EXPR <D.100881, glm::perspective<float> (glm::radians<float> (6.0e+1), 1.33333337306976318359375e+0, 1.00000001490116119384765625e-1, 1.0e+2)>) >>>>>;
                unsigned int modelLoc;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (modelLoc = (unsigned int) __glewGetUniformLocation (ourShader.ID, (const char *) "model")) >>>>>;
                unsigned int viewLoc;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (viewLoc = (unsigned int) __glewGetUniformLocation (ourShader.ID, (const char *) "view")) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniformMatrix4fv ((GLint) modelLoc, 1, 0, (const GLfloat *) glm::value_ptr<float, (glm::qualifier)0> ((struct mat &) &model)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  __glewUniformMatrix4fv ((GLint) viewLoc, 1, 0, (const GLfloat *) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&view, 0), 0)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  Shader::setMat4 (&ourShader, (const struct string &) &TARGET_EXPR <D.100891, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.100891
  (const struct string *) <<< Unknown tree: void_cst >>>
  (const char *) "projection"
  (const struct allocator &) &TARGET_EXPR <D.100890, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.100890
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>, (const struct mat4 &) &projection) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  __glewBindVertexArray (VAO) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  glDrawArrays (4, 0, linhas * 36) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  glfwSwapBuffers (window) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  glfwPollEvents () >>>>>;
      }
    }
  <D.100898>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewDeleteVertexArrays (1, (const GLuint *) &VAO) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __glewDeleteBuffers (1, (const GLuint *) &VBO) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  glfwTerminate () >>>>>;
  return <retval> = 0;
}
return <retval> = 0;


;; Function void processInput(GLFWwindow*) (null)
;; enabled by -tree-original


if (<<cleanup_point glfwGetKey (window, 256) == 1>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  glfwSetWindowShouldClose (window, 1) >>>>>;
  }


;; Function void framebuffer_size_callback(GLFWwindow*, int, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  glViewport (0, 0, width, height) >>>>>;


;; Function constexpr glm::vec<L, T, Q> glm::max(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 2; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.100929, glm::detail::compute_max_vector<2, float, (glm::qualifier)0, false>::call (a, b)>>>;


;; Function constexpr glm::vec<L, T, Q> glm::min(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 2; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.100938, glm::detail::compute_min_vector<2, float, (glm::qualifier)0, false>::call (a, b)>>>;


;; Function static glm::vec<L, T, Q> glm::detail::compute_clamp_vector<L, T, Q, Aligned>::call(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 2; T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.100930, glm::min<2, float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.100915, glm::max<2, float, (glm::qualifier)0> (x, minVal)>, maxVal)>>>;


;; Function glm::vec<L, T, Q> glm::round(const glm::vec<L, T, Q>&) [with int L = 2; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.100945, glm::detail::compute_round<2, float, (glm::qualifier)0, false>::call (x)>>>;


;; Function constexpr glm::vec<2, T, Q>::vec(const glm::vec<2, U, P>&) [with U = float; glm::qualifier P = (glm::qualifier)0; T = short unsigned int; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._52 D.47809;
    union ._53 D.47810;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47194.x = (short unsigned int) v->D.47816.x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47200.y = (short unsigned int) v->D.47822.y) >>>>>;
}


;; Function static constexpr glm::vec<2, T, Q>::length_type glm::vec<2, T, Q>::length() [with T = short unsigned int; glm::qualifier Q = (glm::qualifier)0; glm::vec<2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 2;


;; Function constexpr T& glm::vec<2, T, Q>::operator[](glm::vec<2, T, Q>::length_type) [with T = short unsigned int; glm::qualifier Q = (glm::qualifier)0; glm::vec<2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<2, short unsigned int, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec2.inl", 106);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (short unsigned int &) &((struct vec *) this)->D.47194.x;
    case 1:;
    return <retval> = (short unsigned int &) &((struct vec *) this)->D.47200.y;
  }


;; Function constexpr glm::vec<2, T, Q>::vec(A, B) [with A = short unsigned int; B = short unsigned int; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._52 D.48419;
    union ._53 D.48420;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47816.x = (float) _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47822.y = (float) _y) >>>>>;
}


;; Function constexpr glm::vec<2, T, Q>::vec(const glm::vec<2, U, P>&) [with U = float; glm::qualifier P = (glm::qualifier)0; T = short int; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._52 D.49223;
    union ._53 D.49224;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.48620.x = (short int) v->D.47816.x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.48626.y = (short int) v->D.47822.y) >>>>>;
}


;; Function static constexpr glm::vec<2, T, Q>::length_type glm::vec<2, T, Q>::length() [with T = short int; glm::qualifier Q = (glm::qualifier)0; glm::vec<2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 2;


;; Function constexpr T& glm::vec<2, T, Q>::operator[](glm::vec<2, T, Q>::length_type) [with T = short int; glm::qualifier Q = (glm::qualifier)0; glm::vec<2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<2, short int, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec2.inl", 106);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (short int &) &((struct vec *) this)->D.48620.x;
    case 1:;
    return <retval> = (short int &) &((struct vec *) this)->D.48626.y;
  }


;; Function constexpr glm::vec<2, T, Q>::vec(A, B) [with A = short int; B = short int; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._52 D.48419;
    union ._53 D.48420;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47816.x = (float) _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.47822.y = (float) _y) >>>>>;
}


;; Function constexpr glm::vec<L, T, Q> glm::max(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 4; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.100991, glm::detail::compute_max_vector<4, float, (glm::qualifier)0, false>::call (a, b)>>>;


;; Function constexpr glm::vec<L, T, Q> glm::min(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 4; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.101000, glm::detail::compute_min_vector<4, float, (glm::qualifier)0, false>::call (a, b)>>>;


;; Function static glm::vec<L, T, Q> glm::detail::compute_clamp_vector<L, T, Q, Aligned>::call(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 4; T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.100992, glm::min<4, float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.100977, glm::max<4, float, (glm::qualifier)0> (x, minVal)>, maxVal)>>>;


;; Function glm::vec<L, T, Q> glm::round(const glm::vec<L, T, Q>&) [with int L = 4; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.101007, glm::detail::compute_round<4, float, (glm::qualifier)0, false>::call (x)>>>;


;; Function constexpr glm::vec<4, T, Q>::vec(const glm::vec<4, U, P>&) [with U = float; glm::qualifier P = (glm::qualifier)0; T = unsigned char; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.51342;
    union ._58 D.51343;
    union ._59 D.51344;
    union ._60 D.51345;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.49349.x = (unsigned char) v->D.51351.x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.49355.y = (unsigned char) v->D.51357.y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.49361.z = (unsigned char) v->D.51363.z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.49367.w = (unsigned char) v->D.51369.w) >>>>>;
}


;; Function static constexpr glm::vec<4, T, Q>::length_type glm::vec<4, T, Q>::length() [with T = unsigned char; glm::qualifier Q = (glm::qualifier)0; glm::vec<4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 4;


;; Function constexpr T& glm::vec<4, T, Q>::operator[](glm::vec<4, T, Q>::length_type) [with T = unsigned char; glm::qualifier Q = (glm::qualifier)0; glm::vec<4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<4, unsigned char, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec4.inl", 479);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (unsigned char &) &((struct vec *) this)->D.49349.x;
    case 1:;
    return <retval> = (unsigned char &) &((struct vec *) this)->D.49355.y;
    case 2:;
    return <retval> = (unsigned char &) &((struct vec *) this)->D.49361.z;
    case 3:;
    return <retval> = (unsigned char &) &((struct vec *) this)->D.49367.w;
  }


;; Function constexpr glm::vec<4, T, Q>::vec(X, Y, Z, W) [with X = unsigned char; Y = unsigned char; Z = unsigned char; W = unsigned char; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.53285;
    union ._58 D.53286;
    union ._59 D.53287;
    union ._60 D.53288;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51351.x = (float) _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51357.y = (float) _y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51363.z = (float) _z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51369.w = (float) _w) >>>>>;
}


;; Function constexpr glm::vec<4, T, Q>::vec(const glm::vec<4, U, P>&) [with U = float; glm::qualifier P = (glm::qualifier)0; T = signed char; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.55451;
    union ._58 D.55452;
    union ._59 D.55453;
    union ._60 D.55454;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.53517.x = (signed char) v->D.51351.x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.53523.y = (signed char) v->D.51357.y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.53529.z = (signed char) v->D.51363.z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.53535.w = (signed char) v->D.51369.w) >>>>>;
}


;; Function static constexpr glm::vec<4, T, Q>::length_type glm::vec<4, T, Q>::length() [with T = signed char; glm::qualifier Q = (glm::qualifier)0; glm::vec<4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 4;


;; Function constexpr T& glm::vec<4, T, Q>::operator[](glm::vec<4, T, Q>::length_type) [with T = signed char; glm::qualifier Q = (glm::qualifier)0; glm::vec<4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<4, signed char, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec4.inl", 479);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (signed char &) &((struct vec *) this)->D.53517.x;
    case 1:;
    return <retval> = (signed char &) &((struct vec *) this)->D.53523.y;
    case 2:;
    return <retval> = (signed char &) &((struct vec *) this)->D.53529.z;
    case 3:;
    return <retval> = (signed char &) &((struct vec *) this)->D.53535.w;
  }


;; Function constexpr glm::vec<4, T, Q>::vec(X, Y, Z, W) [with X = signed char; Y = signed char; Z = signed char; W = signed char; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._57 D.53285;
    union ._58 D.53286;
    union ._59 D.53287;
    union ._60 D.53288;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51351.x = (float) _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51357.y = (float) _y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51363.z = (float) _z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.51369.w = (float) _w) >>>>>;
}


;; Function static constexpr glm::vec<2, T, Q>::length_type glm::vec<2, T, Q>::length() [with T = unsigned int; glm::qualifier Q = (glm::qualifier)0; glm::vec<2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 2;


;; Function constexpr const T& glm::vec<2, T, Q>::operator[](glm::vec<2, T, Q>::length_type) const [with T = unsigned int; glm::qualifier Q = (glm::qualifier)0; glm::vec<2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<2, unsigned int, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec2.inl", 120);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (const unsigned int &) &((const struct vec *) this)->D.55586.x;
    case 1:;
    return <retval> = (const unsigned int &) &((const struct vec *) this)->D.55592.y;
  }


;; Function constexpr glm::vec<2, T, Q>::vec(T, T) [with T = unsigned int; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    union ._52 D.56189;
    union ._53 D.56190;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.55586.x = _x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct vec *) this)->D.55592.y = _y) >>>>>;
}


;; Function static constexpr genFIType glm::detail::compute_abs<genFIType, true>::call(genFIType) [with genFIType = float] (null)
;; enabled by -tree-original


return <retval> = x >= 0.0 ? x : -NON_LVALUE_EXPR <x>;


;; Function static constexpr genFIType glm::detail::compute_abs<genFIType, true>::call(genFIType) [with genFIType = double] (null)
;; enabled by -tree-original


return <retval> = x >= 0.0 ? x : -NON_LVALUE_EXPR <x>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.101083>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.101196, *(struct integral_constant &) &TARGET_EXPR <D.101162, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.101233>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.101298, *(struct integral_constant &) &TARGET_EXPR <D.101288, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.101335>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (signed int) __val >= 0 || (signed int) __val < 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long unsigned int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long unsigned int) __tmp, TARGET_EXPR <D.101391, *(struct integral_constant &) &TARGET_EXPR <D.101381, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.101428>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long long int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long long int) __tmp, TARGET_EXPR <D.101484, *(struct integral_constant &) &TARGET_EXPR <D.101474, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.101521>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val <= 18446744071562067967 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long long unsigned int) __tmp, TARGET_EXPR <D.101577, *(struct integral_constant &) &TARGET_EXPR <D.101567, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.101614>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  float __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((float) __tmp, TARGET_EXPR <D.101670, *(struct integral_constant &) &TARGET_EXPR <D.101660, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.101707>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  double __ret;
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((double) __tmp, TARGET_EXPR <D.101763, *(struct integral_constant &) &TARGET_EXPR <D.101753, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.101800>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long double __ret [value-expr: <retval>];
  char * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long double __tmp;

  (void) 0;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long double) __tmp, TARGET_EXPR <D.101856, *(struct integral_constant &) &TARGET_EXPR <D.101846, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval> = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval>;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, char*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<char>; _CharT = char; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  char * __s;
  char * __args;
  const int __len;

    char * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (char *) __builtin_alloca (NON_LVALUE_EXPR <__n>)) >>>>>;
    char * __args;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, __args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.102000, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.102000
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) __len
  (const struct allocator &) &TARGET_EXPR <D.101999, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.101999
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        char * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.102004>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._80 D.72993;
        } &) this = {CLOBBER};
      }
  }
  <D.102002>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.72993;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy ((char *) &((struct basic_string *) this)->D.72061._M_local_buf, (const char_type *) &__str->D.72061._M_local_buf, 16) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __str->D.72061._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.102088>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.102109, *(struct integral_constant &) &TARGET_EXPR <D.102108, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.102146>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.102167, *(struct integral_constant &) &TARGET_EXPR <D.102166, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.102204>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (signed int) __val >= 0 || (signed int) __val < 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long unsigned int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long unsigned int) __tmp, TARGET_EXPR <D.102225, *(struct integral_constant &) &TARGET_EXPR <D.102224, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.102262>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long long int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long long int) __tmp, TARGET_EXPR <D.102283, *(struct integral_constant &) &TARGET_EXPR <D.102282, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.102320>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val <= 18446744071562067967 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long long unsigned int) __tmp, TARGET_EXPR <D.102341, *(struct integral_constant &) &TARGET_EXPR <D.102340, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.102378>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  float __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((float) __tmp, TARGET_EXPR <D.102399, *(struct integral_constant &) &TARGET_EXPR <D.102398, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.102436>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  double __ret;
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((double) __tmp, TARGET_EXPR <D.102457, *(struct integral_constant &) &TARGET_EXPR <D.102456, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.102494>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long double __ret [value-expr: <retval>];
  wchar_t * __endptr;
  typedef struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef struct _Range_chk _Range_chk;
  const long double __tmp;

  (void) 0;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int]::_Range_chk::_S_chk ((long double) __tmp, TARGET_EXPR <D.102515, *(struct integral_constant &) &TARGET_EXPR <D.102514, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval> = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval>;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, char*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<wchar_t>; _CharT = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  wchar_t * __s;
  char * __args;
  const int __len;

    wchar_t * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (wchar_t *) __builtin_alloca (__n * 2)) >>>>>;
    char * __args;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, __args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.102547, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.102547
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) ((long long unsigned int) __len * 2)
  (const struct allocator &) &TARGET_EXPR <D.102546, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.102546
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<wchar_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        wchar_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.102551>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._80 D.74392;
        } &) this = {CLOBBER};
      }
  }
  <D.102549>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.74392;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<wchar_t>&> ((struct allocator &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<wchar_t>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<wchar_t>::copy ((wchar_t *) &((struct basic_string *) this)->D.73461._M_local_buf, (const char_type *) &__str->D.73461._M_local_buf, 8) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __str->D.73461._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = float; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = double; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, 3339675911)>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.102613>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.72993;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __s, __s + (sizetype) NON_LVALUE_EXPR <__n>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.102630>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.74392;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 2)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.102647>:;
   >>>;


;; Function std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char16_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        char16_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.102683>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.76265;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 2)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._80 D.76265;
        } &) this = {CLOBBER};
      }
  }
  <D.102697>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.76265;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<char16_t>&> ((struct allocator &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char16_t>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char16_t>::copy ((char16_t *) &((struct basic_string *) this)->D.75334._M_local_buf, (const char_type *) &__str->D.75334._M_local_buf, 8) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_capacity ((struct basic_string *) this, __str->D.75334._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.102717>:;
   >>>;


;; Function std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char32_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        char32_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.102753>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.77582;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._80 D.77582;
        } &) this = {CLOBBER};
      }
  }
  <D.102767>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.77582;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<char32_t>&> ((struct allocator &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char32_t>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char32_t>::copy ((char32_t *) &((struct basic_string *) this)->D.76651._M_local_buf, (const char_type *) &__str->D.76651._M_local_buf, 4) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_capacity ((struct basic_string *) this, __str->D.76651._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function constexpr bool std::less<_Tp*>::operator()(_Tp*, _Tp*) const [with _Tp = const std::_V2::error_category] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__builtin_constant_p (__x < __y) != 0)
    {
      return <retval> = __x < __y;
    }
  return <retval> = (long long unsigned int) __x < (long long unsigned int) __y;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  struct basic_string __str [value-expr: *<retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string ((struct basic_string *) <retval>, __lhs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::append ((struct basic_string *) <retval>, __rhs) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct basic_string *) <retval>);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  const long long unsigned int __size;
  const bool __cond;

    const long long unsigned int __size;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__size = std::__cxx11::basic_string<char>::size ((struct basic_string *) __lhs) + std::__cxx11::basic_string<char>::size ((struct basic_string *) __rhs)) >>>>>;
    const bool __cond;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__cond = std::__cxx11::basic_string<char>::capacity ((struct basic_string *) __lhs) < (long long unsigned int) __size && std::__cxx11::basic_string<char>::capacity ((struct basic_string *) __rhs) >= (long long unsigned int) __size) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.103007, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.103007
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) ((bool) __cond ? std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, (const struct basic_string &) __lhs)) : std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::append ((struct basic_string *) __lhs, (const struct basic_string &) __rhs))) >>>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.103009, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.103009
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, __lhs)) >>>>>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = int; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::__hash_combine(const _Tp&, std::size_t) [with _Tp = const std::_V2::error_category*; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, __hash)>>;


;; Function std::__codecvt_abstract_base<_InternT, _ExternT, _StateT>::__codecvt_abstract_base(std::size_t) [with _InternT = char16_t; _ExternT = char; _StateT = int; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.facet;
      _Atomic_word _M_refcount;
    } D.90254;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::facet::facet (&((struct __codecvt_abstract_base *) this)->D.90253, __refs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __codecvt_abstract_base *) this)->D.90253._vptr.facet = &_ZTVSt23__codecvt_abstract_baseIDsciE + 16) >>>>>;
    }
  catch
    {
      std::locale::facet::~facet (&((struct __codecvt_abstract_base *) this)->D.90253);
    }
}


;; Function std::__codecvt_abstract_base<_InternT, _ExternT, _StateT>::~__codecvt_abstract_base() [with _InternT = char16_t; _ExternT = char; _StateT = int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __codecvt_abstract_base *) this)->D.90253._vptr.facet = &_ZTVSt23__codecvt_abstract_baseIDsciE + 16) >>>>>;
    try
      {
        try
          {
            
          }
        finally
          {
            std::locale::facet::~facet (&((struct __codecvt_abstract_base *) this)->D.90253);
          }
      }
    finally
      {
        *(struct 
        {
          struct 
          {
            int (*) () * _vptr.facet;
            _Atomic_word _M_refcount;
          } D.90254;
        } &) this = {CLOBBER};
      }
  }
  <D.103016>:;
   >>>;


;; Function std::__codecvt_abstract_base<_InternT, _ExternT, _StateT>::__codecvt_abstract_base(std::size_t) [with _InternT = char32_t; _ExternT = char; _StateT = int; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.facet;
      _Atomic_word _M_refcount;
    } D.90460;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::facet::facet (&((struct __codecvt_abstract_base *) this)->D.90459, __refs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __codecvt_abstract_base *) this)->D.90459._vptr.facet = &_ZTVSt23__codecvt_abstract_baseIDiciE + 16) >>>>>;
    }
  catch
    {
      std::locale::facet::~facet (&((struct __codecvt_abstract_base *) this)->D.90459);
    }
}


;; Function std::__codecvt_abstract_base<_InternT, _ExternT, _StateT>::~__codecvt_abstract_base() [with _InternT = char32_t; _ExternT = char; _StateT = int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __codecvt_abstract_base *) this)->D.90459._vptr.facet = &_ZTVSt23__codecvt_abstract_baseIDiciE + 16) >>>>>;
    try
      {
        try
          {
            
          }
        finally
          {
            std::locale::facet::~facet (&((struct __codecvt_abstract_base *) this)->D.90459);
          }
      }
    finally
      {
        *(struct 
        {
          struct 
          {
            int (*) () * _vptr.facet;
            _Atomic_word _M_refcount;
          } D.90460;
        } &) this = {CLOBBER};
      }
  }
  <D.103029>:;
   >>>;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = _iobuf*&; typename std::remove_reference<_Tp>::type = _iobuf*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct _iobuf * &) __t
   >>>;


;; Function typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type std::swap(_Tp&, _Tp&) [with _Tp = _iobuf*; typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type = void] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    struct _iobuf * __tmp;

        struct _iobuf * __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = *std::move<_iobuf*&> (__a)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__a = *std::move<_iobuf*&> (__b)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__b = *std::move<_iobuf*&> ((struct _iobuf * &) &__tmp)) >>>>>;
  }
   >>>;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = bool&; typename std::remove_reference<_Tp>::type = bool] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (type &) __t
   >>>;


;; Function typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type std::swap(_Tp&, _Tp&) [with _Tp = bool; typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type = void] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    bool __tmp;

        bool __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = *std::move<bool&> (__a)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__a = *std::move<bool&> (__b)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__b = *std::move<bool&> ((bool &) &__tmp)) >>>>>;
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.72993;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) &TARGET_EXPR <D.103058, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.103058
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::basic_ifstream<_CharT, _Traits>::basic_ifstream() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  if (__in_chrg != 0)
    {
      *(struct basic_ifstream *) this = {CLOBBER};
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>;
{
  if (__in_chrg != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::basic_ios (&((struct basic_ifstream *) this)->D.92731) >>>>>;
    }
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_istream<char>::basic_istream (&((struct basic_ifstream *) this)->D.92728, __in_chrg == 0 ? __vtt_parm + 8 : (const void * *) &_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8) >>>>>;
      try
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ifstream *) this)->D.92728._vptr.basic_istream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE + 24) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_ifstream *) this)->D.92728._vptr.basic_istream + 18446744073709551592) : 208))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 24) : &_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE + 64) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ifstream *) this)->_M_filebuf = <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.103063
  (struct basic_filebuf *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
          try
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::init ((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_ifstream *) this)->D.92728._vptr.basic_istream + 18446744073709551592) : 208), &((struct basic_ifstream *) this)->_M_filebuf.D.92576) >>>>>;
            }
          catch
            {
              std::basic_filebuf<char>::~basic_filebuf (&((struct basic_ifstream *) this)->_M_filebuf);
            }
        }
      catch
        {
          std::basic_istream<char>::~basic_istream (&((struct basic_ifstream *) this)->D.92728, __in_chrg == 0 ? __vtt_parm + 8 : (const void * *) &_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8);
        }
    }
  catch
    {
      if (__in_chrg != 0)
        {
          std::basic_ios<char>::~basic_ios (&((struct basic_ifstream *) this)->D.92731);
        }
      else
        {
          0
        }
    }
}


;; Function std::basic_ifstream<_CharT, _Traits>::~basic_ifstream() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ifstream *) this)->D.92728._vptr.basic_istream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE + 24) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_ifstream *) this)->D.92728._vptr.basic_istream + 18446744073709551592) : 208))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 24) : &_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE + 64) >>>>>;
    try
      {
        try
          {
            try
              {
                try
                  {
                    
                  }
                finally
                  {
                    std::basic_filebuf<char>::~basic_filebuf (&((struct basic_ifstream *) this)->_M_filebuf);
                  }
              }
            finally
              {
                std::basic_istream<char>::~basic_istream (&((struct basic_ifstream *) this)->D.92728, __in_chrg == 0 ? __vtt_parm + 8 : (const void * *) &_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8);
              }
          }
        finally
          {
            if ((__in_chrg & 2) != 0)
              {
                std::basic_ios<char>::~basic_ios (&((struct basic_ifstream *) this)->D.92731);
              }
            else
              {
                <<< Unknown tree: void_cst >>>
              }
          }
      }
    finally
      {
        if (__in_chrg != 0)
          {
            *(struct basic_ifstream *) this = {CLOBBER};
          }
        else
          {
            <<< Unknown tree: void_cst >>>
          }
      }
  }
  <D.103069>:;
   >>>;


;; Function void std::basic_ios<_CharT, _Traits>::exceptions(std::ios_base::iostate) [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::_Ios_Iostate] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->D.86211._M_exception = __except) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::clear ((struct basic_ios *) this, ((struct basic_ios *) this)->D.86211._M_streambuf_state) >>>>>;


;; Function void std::basic_ifstream<_CharT, _Traits>::open(const char*, std::ios_base::openmode) [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::openmode = std::_Ios_Openmode] (null)
;; enabled by -tree-original


if (<<cleanup_point std::basic_filebuf<char>::open (&((struct basic_ifstream *) this)->_M_filebuf, __s, std::operator| (__mode, 8)) == 0B>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::setstate ((struct basic_ios *) this + (sizetype) *(long long int *) (((struct basic_ifstream *) this)->D.92728._vptr.basic_istream + 18446744073709551592), 4) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::clear ((struct basic_ios *) this + (sizetype) *(long long int *) (((struct basic_ifstream *) this)->D.92728._vptr.basic_istream + 18446744073709551592), 0) >>>>>;
  }


;; Function virtual std::__cxx11::basic_stringbuf<char>::~basic_stringbuf() (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_stringbuf *) this)->D.94330._vptr.basic_streambuf = &_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16) >>>>>;
  try
    {
      try
        {
          try
            {
              
            }
          finally
            {
              std::__cxx11::basic_string<char>::~basic_string (&((struct basic_stringbuf *) this)->_M_string);
            }
        }
      finally
        {
          std::basic_streambuf<char>::~basic_streambuf (&((struct basic_stringbuf *) this)->D.94330);
        }
    }
  finally
    {
      *(struct 
      {
        struct 
        {
          int (*) () * _vptr.basic_streambuf;
          char_type * _M_in_beg;
          char_type * _M_in_cur;
          char_type * _M_in_end;
          char_type * _M_out_beg;
          char_type * _M_out_cur;
          char_type * _M_out_end;
          struct locale _M_buf_locale;
        } D.94331;
        openmode _M_mode;
        struct __string_type _M_string;
      } &) this = {CLOBBER};
    }
}
<D.103082>:;


;; Function std::__cxx11::basic_stringstream<_CharT, _Traits, _Alloc>::basic_stringstream(std::ios_base::openmode) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::ios_base::openmode = std::_Ios_Openmode] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  if (__in_chrg != 0)
    {
      *(struct basic_stringstream *) this = {CLOBBER};
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>;
{
  if (__in_chrg != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::basic_ios (&((struct basic_stringstream *) this)->D.94705) >>>>>;
    }
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_iostream<char>::basic_iostream (&((struct basic_stringstream *) this)->D.94702, __in_chrg == 0 ? __vtt_parm + 8 : (const void * *) &_ZTTNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE + 8) >>>>>;
      try
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_stringstream *) this)->D.94702.D.89312._vptr.basic_istream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE + 24) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_stringstream *) this)->D.94702.D.89312._vptr.basic_istream + 18446744073709551592) : 128))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 64) : &_ZTVNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE + 104) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_stringstream *) this)->D.94702.D.89313._vptr.basic_ostream = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 72) : &_ZTVNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE + 64) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_stringbuf<char>::basic_stringbuf (&((struct basic_stringstream *) this)->_M_stringbuf, __m) >>>>>;
          try
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::init ((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_stringstream *) this)->D.94702.D.89312._vptr.basic_istream + 18446744073709551592) : 128), &((struct basic_stringstream *) this)->_M_stringbuf.D.94330) >>>>>;
            }
          catch
            {
              std::__cxx11::basic_stringbuf<char>::~basic_stringbuf (&((struct basic_stringstream *) this)->_M_stringbuf);
            }
        }
      catch
        {
          std::basic_iostream<char>::~basic_iostream (&((struct basic_stringstream *) this)->D.94702, __in_chrg == 0 ? __vtt_parm + 8 : (const void * *) &_ZTTNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE + 8);
        }
    }
  catch
    {
      if (__in_chrg != 0)
        {
          std::basic_ios<char>::~basic_ios (&((struct basic_stringstream *) this)->D.94705);
        }
      else
        {
          0
        }
    }
}


;; Function std::__cxx11::basic_stringstream<_CharT, _Traits, _Alloc>::~basic_stringstream() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_stringstream *) this)->D.94702.D.89312._vptr.basic_istream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE + 24) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_stringstream *) this)->D.94702.D.89312._vptr.basic_istream + 18446744073709551592) : 128))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 64) : &_ZTVNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE + 104) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_stringstream *) this)->D.94702.D.89313._vptr.basic_ostream = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 72) : &_ZTVNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE + 64) >>>>>;
    try
      {
        try
          {
            try
              {
                try
                  {
                    
                  }
                finally
                  {
                    std::__cxx11::basic_stringbuf<char>::~basic_stringbuf (&((struct basic_stringstream *) this)->_M_stringbuf);
                  }
              }
            finally
              {
                std::basic_iostream<char>::~basic_iostream (&((struct basic_stringstream *) this)->D.94702, __in_chrg == 0 ? __vtt_parm + 8 : (const void * *) &_ZTTNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE + 8);
              }
          }
        finally
          {
            if ((__in_chrg & 2) != 0)
              {
                std::basic_ios<char>::~basic_ios (&((struct basic_stringstream *) this)->D.94705);
              }
            else
              {
                <<< Unknown tree: void_cst >>>
              }
          }
      }
    finally
      {
        if (__in_chrg != 0)
          {
            *(struct basic_stringstream *) this = {CLOBBER};
          }
        else
          {
            <<< Unknown tree: void_cst >>>
          }
      }
  }
  <D.103094>:;
   >>>;


;; Function std::basic_ifstream<_CharT, _Traits>::__filebuf_type* std::basic_ifstream<_CharT, _Traits>::rdbuf() const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ifstream<_CharT, _Traits>::__filebuf_type = std::basic_filebuf<char>] (null)
;; enabled by -tree-original


return <retval> = (struct __filebuf_type *) &((const struct basic_ifstream *) this)->_M_filebuf;


;; Function void std::basic_ifstream<_CharT, _Traits>::close() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point std::basic_filebuf<char>::close (&((struct basic_ifstream *) this)->_M_filebuf) == 0B>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::setstate ((struct basic_ios *) this + (sizetype) *(long long int *) (((struct basic_ifstream *) this)->D.92728._vptr.basic_istream + 18446744073709551592), 4) >>>>>;
  }


;; Function std::__cxx11::basic_stringstream<_CharT, _Traits, _Alloc>::__string_type std::__cxx11::basic_stringstream<_CharT, _Traits, _Alloc>::str() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_stringstream<_CharT, _Traits, _Alloc>::__string_type = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.103106, <<< Unknown tree: aggr_init_expr
  4
  str
  D.103106
  &((const struct basic_stringstream *) this)->_M_stringbuf >>>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    if (<<cleanup_point ((!std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) this) && __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_propagate_on_move_assign ()) && !__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_always_equal ()) && std::operator!=<char> ((const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), (const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) __str))>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.72061._M_allocated_capacity) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, 0) >>>>>;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__alloc_on_move<std::allocator<char> > ((struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), (struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) __str)) >>>>>;
    {
      if (<<cleanup_point !std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) __str) && (__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_propagate_on_move_assign () || __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_always_equal ())>>)
        {
          {
            char * __data = 0B;
            size_type __capacity;

            <<cleanup_point             char * __data = 0B;>>;
                        size_type __capacity;
            if (<<cleanup_point !std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) this)>>)
              {
                if (<<cleanup_point __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_always_equal ()>>)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__data = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__capacity = ((struct basic_string *) this)->D.72061._M_allocated_capacity) >>>>>;
                  }
                else
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.72061._M_allocated_capacity) >>>>>;
                  }
              }
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __str->D.72061._M_allocated_capacity) >>>>>;
            if (__data != 0B)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str, __data) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) __str, __capacity) >>>>>;
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str, (char *) &__str->D.72061._M_local_buf) >>>>>;
              }
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::assign ((struct basic_string *) this, (const struct basic_string &) __str) >>>>>;
        }
    }
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::clear ((struct basic_string *) __str) >>>>>;
    return <retval> = (struct basic_string &) this;
  }
   >>>;


;; Function std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*) [with _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


if (__s == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::setstate ((struct basic_ios *) __out + (sizetype) *(long long int *) (((struct basic_ostream *) __out)->_vptr.basic_ostream + 18446744073709551592), 1) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__ostream_insert<char, std::char_traits<char> > (__out, __s, (streamsize) std::char_traits<char>::length (__s)) >>>>>;
  }
return <retval> = __out;


;; Function std::basic_ostream<_CharT, _Traits>& std::endl(std::basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::flush<char, std::char_traits<char> > (std::basic_ostream<char>::put ((struct basic_ostream *) __os, (int) std::basic_ios<char>::widen ((struct basic_ios *) __os + (sizetype) *(long long int *) (((struct basic_ostream *) __os)->_vptr.basic_ostream + 18446744073709551592), 10)))>>;


;; Function std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __pf ((struct __ostream_type &) this)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.72993;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __s, __s != 0B ? __s + (sizetype) std::char_traits<char>::length (__s) : __s + 18446744073709551615) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function static constexpr glm::vec<2, T, Q>::length_type glm::vec<2, T, Q>::length() [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::vec<2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 2;


;; Function constexpr const T& glm::vec<2, T, Q>::operator[](glm::vec<2, T, Q>::length_type) const [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::vec<2, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<2, float, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec2.inl", 120);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (const float &) &((const struct vec *) this)->D.47816.x;
    case 1:;
    return <retval> = (const float &) &((const struct vec *) this)->D.47822.y;
  }


;; Function static constexpr glm::vec<3, T, Q>::length_type glm::vec<3, T, Q>::length() [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::vec<3, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 3;


;; Function constexpr const T& glm::vec<3, T, Q>::operator[](glm::vec<3, T, Q>::length_type) const [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::vec<3, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<3, float, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec3.inl", 186);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (const float &) &((const struct vec *) this)->D.95554.x;
    case 1:;
    return <retval> = (const float &) &((const struct vec *) this)->D.95560.y;
    case 2:;
    return <retval> = (const float &) &((const struct vec *) this)->D.95566.z;
  }


;; Function static constexpr glm::vec<4, T, Q>::length_type glm::vec<4, T, Q>::length() [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::vec<4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


return <retval> = 4;


;; Function constexpr const T& glm::vec<4, T, Q>::operator[](glm::vec<4, T, Q>::length_type) const [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::vec<4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<4, float, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec4.inl", 497);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (const float &) &((const struct vec *) this)->D.51351.x;
    case 1:;
    return <retval> = (const float &) &((const struct vec *) this)->D.51357.y;
    case 2:;
    return <retval> = (const float &) &((const struct vec *) this)->D.51363.z;
    case 3:;
    return <retval> = (const float &) &((const struct vec *) this)->D.51369.w;
  }


;; Function bool std::operator!=(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = !std::operator==<char, std::char_traits<char>, std::allocator<char> > (__lhs, __rhs)>>;


;; Function std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__ostream_insert<char, std::char_traits<char> > (__os, std::__cxx11::basic_string<char>::data ((const struct basic_string *) __str), (streamsize) std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*) [with _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::operator<< <std::char_traits<char> > (__out, (const char *) __s)>>;


;; Function constexpr T& glm::vec<3, T, Q>::operator[](glm::vec<3, T, Q>::length_type) [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::vec<3, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<3, float, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec3.inl", 170);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (float &) &((struct vec *) this)->D.95554.x;
    case 1:;
    return <retval> = (float &) &((struct vec *) this)->D.95560.y;
    case 2:;
    return <retval> = (float &) &((struct vec *) this)->D.95566.z;
  }


;; Function glm::mat<4, 4, T, Q> glm::rotate(const glm::mat<4, 4, T, Q>&, T, const glm::vec<3, T, Q>&) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


{
  const float a = angle;
  const float c;
  const float s;
  struct vec axis;
  struct vec temp;
  struct mat Rotate;
  struct mat Result [value-expr: <retval>];

    const float a = angle;
    const float c;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = std::cos ((float) a)) >>>>>;
    const float s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = std::sin ((float) a)) >>>>>;
    struct vec axis;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (axis = glm::normalize<3, float, (glm::qualifier)0> (v)) >>>>>;
    struct vec temp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (temp = glm::operator*<float, (glm::qualifier)0> (1.0e+0 - (float) c, (const struct vec &) &axis)) >>>>>;
    struct mat Rotate;
  <<< Unknown tree: expr_stmt
   >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0), 0) = *glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 0) * *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0) + (float) c) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0), 1) = *glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 0) * *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1) + *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2) * (float) s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0), 2) = *glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 0) * *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2) - *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1) * (float) s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1), 0) = *glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 1) * *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0) - *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2) * (float) s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1), 1) = *glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 1) * *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1) + (float) c) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1), 2) = *glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 1) * *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2) + *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0) * (float) s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2), 0) = *glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 2) * *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0) + *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1) * (float) s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2), 1) = *glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 2) * *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1) - *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0) * (float) s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2), 2) = *glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 2) * *glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2) + (float) c) >>>>>;
  (void) 0;
  <<< Unknown tree: expr_stmt
   >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(struct col_type *) SAVE_EXPR <glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 0)> = *(const struct vec &) &TARGET_EXPR <D.103195, glm::operator+<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.103193, glm::operator+<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.103188, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 0), (const float &) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0), 0))>, (const struct vec &) &TARGET_EXPR <D.103189, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 1), (const float &) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0), 1))>)>, (const struct vec &) &TARGET_EXPR <D.103194, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 2), (const float &) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0), 2))>)>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(struct col_type *) SAVE_EXPR <glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 1)> = *(const struct vec &) &TARGET_EXPR <D.103200, glm::operator+<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.103198, glm::operator+<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.103196, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 0), (const float &) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1), 0))>, (const struct vec &) &TARGET_EXPR <D.103197, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 1), (const float &) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1), 1))>)>, (const struct vec &) &TARGET_EXPR <D.103199, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 2), (const float &) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1), 2))>)>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(struct col_type *) SAVE_EXPR <glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 2)> = *(const struct vec &) &TARGET_EXPR <D.103205, glm::operator+<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.103203, glm::operator+<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.103201, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 0), (const float &) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2), 0))>, (const struct vec &) &TARGET_EXPR <D.103202, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 1), (const float &) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2), 1))>)>, (const struct vec &) &TARGET_EXPR <D.103204, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 2), (const float &) glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2), 2))>)>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(struct col_type *) SAVE_EXPR <glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 3)> = *(const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 3)) >>>>>;
  <<cleanup_point return <retval>>>;
}


;; Function static constexpr glm::vec<4, T, Q> glm::detail::compute_vec4_add<T, Q, Aligned>::call(const glm::vec<4, T, Q>&, const glm::vec<4, T, Q>&) [with T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103231, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.103231
  (struct vec *) <<< Unknown tree: void_cst >>>
  (float) a->D.51351.x + (float) b->D.51351.x
  (float) a->D.51357.y + (float) b->D.51357.y
  (float) a->D.51363.z + (float) b->D.51363.z
  (float) a->D.51369.w + (float) b->D.51369.w >>>>>>;


;; Function constexpr glm::vec<4, T, Q>& glm::vec<4, T, Q>::operator+=(const glm::vec<4, U, Q>&) [with U = float; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *(struct vec *) this = *(const struct vec &) &TARGET_EXPR <D.103229, glm::detail::compute_vec4_add<float, (glm::qualifier)0, false>::call ((const struct vec &) this, (const struct vec &) &TARGET_EXPR <D.103228, *v>)>;, (struct vec &) this;>>;


;; Function constexpr glm::vec<4, T, Q> glm::operator+(const glm::vec<4, T, Q>&, const glm::vec<4, T, Q>&) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103232, *(const struct vec &) glm::vec<4, float, (glm::qualifier)0>::operator+=<float> (&TARGET_EXPR <D.103214, *v1>, v2)>>>;


;; Function glm::mat<4, 4, T, Q> glm::translate(const glm::mat<4, 4, T, Q>&, const glm::vec<3, T, Q>&) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


{
  struct mat Result [value-expr: <retval>];

  <retval> = *m;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(struct col_type *) SAVE_EXPR <glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 3)> = *(const struct vec &) &TARGET_EXPR <D.103234, glm::operator+<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.103233, glm::operator+<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.103211, glm::operator+<float, (glm::qualifier)0> ((const struct vec &) &TARGET_EXPR <D.103209, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 0), glm::vec<3, float, (glm::qualifier)0>::operator[] ((const struct vec *) v, 0))>, (const struct vec &) &TARGET_EXPR <D.103210, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 1), glm::vec<3, float, (glm::qualifier)0>::operator[] ((const struct vec *) v, 1))>)>, (const struct vec &) &TARGET_EXPR <D.103212, glm::operator*<float, (glm::qualifier)0> ((const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 2), glm::vec<3, float, (glm::qualifier)0>::operator[] ((const struct vec *) v, 2))>)>, (const struct vec &) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((const struct mat *) m, 3))>) >>>>>;
  <<cleanup_point return <retval>>>;
}


;; Function glm::mat<4, 4, T, (glm::qualifier)0> glm::perspective(T, T, T, T) [with T = float] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103242, glm::perspectiveRH_NO<float> (fovy, aspect, zNear, zFar)>>>;


;; Function T* glm::value_ptr(glm::mat<4, 4, T, Q>&) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = &glm::mat<4, 4, float, (glm::qualifier)0>::operator[] ((struct mat *) m, 0)->D.51351.x>>;


;; Function glm::mat<4, 4, T, Q>::col_type& glm::mat<4, 4, T, Q>::operator[](glm::mat<4, 4, T, Q>::length_type) [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::mat<4, 4, T, Q>::col_type = glm::vec<4, float, (glm::qualifier)0>; glm::mat<4, 4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (glm::mat<4, 4, float, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i < this->length()", (const char *) "C:/glm/glm/detail/type_mat4x4.inl", 291);, 0)) >>>>>;
return <retval> = (struct col_type &) &((struct mat *) this)->value[i];


;; Function constexpr T& glm::vec<4, T, Q>::operator[](glm::vec<4, T, Q>::length_type) [with T = float; glm::qualifier Q = (glm::qualifier)0; glm::vec<4, T, Q>::length_type = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i >= 0 && glm::vec<4, float, (glm::qualifier)0>::length () > i || (_assert ((const char *) "i >= 0 && i < this->length()", (const char *) "C:/glm/glm/detail/type_vec4.inl", 479);, 0)) >>>>>;
switch (i)
  {
    default:;
    case 0:;
    return <retval> = (float &) &((struct vec *) this)->D.51351.x;
    case 1:;
    return <retval> = (float &) &((struct vec *) this)->D.51357.y;
    case 2:;
    return <retval> = (float &) &((struct vec *) this)->D.51363.z;
    case 3:;
    return <retval> = (float &) &((struct vec *) this)->D.51369.w;
  }


;; Function static glm::vec<L, T, Q> glm::detail::compute_max_vector<L, T, Q, Aligned>::call(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 2; T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103263, glm::detail::functor2<glm::vec, 2, float, (glm::qualifier)0>::call (max, x, y)>>>;


;; Function static glm::vec<L, T, Q> glm::detail::compute_min_vector<L, T, Q, Aligned>::call(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 2; T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103268, glm::detail::functor2<glm::vec, 2, float, (glm::qualifier)0>::call (min, x, y)>>>;


;; Function static constexpr vec<2, R, Q> glm::detail::functor1<vec, 2, R, T, Q>::call(R (*)(T), const vec<2, T, Q>&) [with vec = glm::vec; R = float; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103278, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.103278
  (struct vec *) <<< Unknown tree: void_cst >>>
  Func ((float) v->D.47816.x)
  Func ((float) v->D.47822.y) >>>>;, D.103278>>;


;; Function static glm::vec<L, T, Q> glm::detail::compute_round<L, T, Q, Aligned>::call(const glm::vec<L, T, Q>&) [with int L = 2; T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103276, glm::detail::functor1<glm::vec, 2, float, float, (glm::qualifier)0>::call (round, x)>>>;


;; Function static glm::vec<L, T, Q> glm::detail::compute_max_vector<L, T, Q, Aligned>::call(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 4; T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103287, glm::detail::functor2<glm::vec, 4, float, (glm::qualifier)0>::call (max, x, y)>>>;


;; Function static glm::vec<L, T, Q> glm::detail::compute_min_vector<L, T, Q, Aligned>::call(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 4; T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103289, glm::detail::functor2<glm::vec, 4, float, (glm::qualifier)0>::call (min, x, y)>>>;


;; Function static constexpr vec<4, R, Q> glm::detail::functor1<vec, 4, R, T, Q>::call(R (*)(T), const vec<4, T, Q>&) [with vec = glm::vec; R = float; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103299, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.103299
  (struct vec *) <<< Unknown tree: void_cst >>>
  Func ((float) v->D.51351.x)
  Func ((float) v->D.51357.y)
  Func ((float) v->D.51363.z)
  Func ((float) v->D.51369.w) >>>>>>;


;; Function static glm::vec<L, T, Q> glm::detail::compute_round<L, T, Q, Aligned>::call(const glm::vec<L, T, Q>&) [with int L = 4; T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103297, glm::detail::functor1<glm::vec, 4, float, float, (glm::qualifier)0>::call (round, x)>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


return <retval> = (char *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = char*; <template-parameter-2-2> = void; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.72993;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.72061._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) std::pointer_traits<char*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.72061._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::allocator<char>&; typename std::remove_reference<_Tp>::type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.72061._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__n>), (const char_type &) &TARGET_EXPR <D.103355, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


return <retval> = (wchar_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = wchar_t*; <template-parameter-2-2> = void; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.74392;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> ((struct basic_string *) this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<wchar_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.73461._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (wchar_t *) std::pointer_traits<wchar_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.73461._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::allocator<wchar_t>&; typename std::remove_reference<_Tp>::type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    wchar_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<wchar_t>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<wchar_t>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<wchar_t>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<wchar_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.73461._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 2)), (const char_type &) &TARGET_EXPR <D.103411, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


return <retval> = (char16_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


return <retval> = (char32_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.103418>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<const char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.103460, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.103503>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    wchar_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<wchar_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<wchar_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<const wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.103521, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.103531>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::pointer_traits<char16_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.75334._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char16_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char16_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char16_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct_aux<const char16_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.103585, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char16_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.75334._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::allocator<char16_t>&; typename std::remove_reference<_Tp>::type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char16_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char16_t>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<char16_t>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char16_t>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char16_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.75334._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 2)), (const char_type &) &TARGET_EXPR <D.103602, 0>) >>>>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.103607>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::pointer_traits<char32_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.76651._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char32_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char32_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char32_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct_aux<const char32_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.103661, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char32_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.76651._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::allocator<char32_t>&; typename std::remove_reference<_Tp>::type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char32_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char32_t>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<char32_t>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char32_t>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char32_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.76651._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.103678, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.72993;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) &TARGET_EXPR <D.103680, <<< Unknown tree: aggr_init_expr
  4
  _S_select_on_copy
  D.103680
  (const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) __str) >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str) + (sizetype) std::__cxx11::basic_string<char>::length ((const struct basic_string *) __str)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  const size_type __n;

    const size_type __n;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__n = std::char_traits<char>::length (__s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_check_length ((struct basic_string *) this, 0, (size_type) __n, (const char *) "basic_string::append") >>>>>;
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_append ((struct basic_string *) this, __s, (size_type) __n)>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::capacity() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_is_local ((const struct basic_string *) this) ? 15 : (size_type) ((const struct basic_string *) this)->D.72061._M_allocated_capacity>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos1, 0, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::__cxx11::basic_string<char>&; typename std::remove_reference<_Tp>::type = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_append ((struct basic_string *) this, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos, 0, __s, std::char_traits<char>::length (__s))>>;


;; Function std::basic_ios<_CharT, _Traits>::basic_ios() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.ios_base;
      streamsize _M_precision;
      streamsize _M_width;
      fmtflags _M_flags;
      iostate _M_exception;
      iostate _M_streambuf_state;
      struct _Callback_list * _M_callbacks;
      struct _Words _M_word_zero;
      struct _Words _M_local_word[8];
      int _M_word_size;
      struct _Words * _M_word;
      struct locale _M_ios_locale;
    } D.86212;
    struct basic_ostream * _M_tie;
    char_type _M_fill;
    bool _M_fill_init;
    struct basic_streambuf * _M_streambuf;
    const struct __ctype_type * _M_ctype;
    const struct __num_put_type * _M_num_put;
    const struct __num_get_type * _M_num_get;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::ios_base (&((struct basic_ios *) this)->D.86211) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->D.86211._vptr.ios_base = &_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->_M_tie = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->_M_fill = 0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->_M_fill_init = 0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->_M_streambuf = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->_M_ctype = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->_M_num_put = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->_M_num_get = 0B) >>>>>;
    }
  catch
    {
      std::ios_base::~ios_base (&((struct basic_ios *) this)->D.86211);
    }
}


;; Function std::basic_ios<_CharT, _Traits>::~basic_ios() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this)->D.86211._vptr.ios_base = &_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16) >>>>>;
    try
      {
        try
          {
            
          }
        finally
          {
            std::ios_base::~ios_base (&((struct basic_ios *) this)->D.86211);
          }
      }
    finally
      {
        *(struct 
        {
          struct 
          {
            int (*) () * _vptr.ios_base;
            streamsize _M_precision;
            streamsize _M_width;
            fmtflags _M_flags;
            iostate _M_exception;
            iostate _M_streambuf_state;
            struct _Callback_list * _M_callbacks;
            struct _Words _M_word_zero;
            struct _Words _M_local_word[8];
            int _M_word_size;
            struct _Words * _M_word;
            struct locale _M_ios_locale;
          } D.86212;
          struct basic_ostream * _M_tie;
          char_type _M_fill;
          bool _M_fill_init;
          struct basic_streambuf * _M_streambuf;
          const struct __ctype_type * _M_ctype;
          const struct __num_put_type * _M_num_put;
          const struct __num_get_type * _M_num_get;
        } &) this = {CLOBBER};
      }
  }
  <D.103696>:;
   >>>;


;; Function std::basic_istream<_CharT, _Traits>::basic_istream() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  if (__in_chrg != 0)
    {
      *(struct basic_istream *) this = {CLOBBER};
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>;
{
  if (__in_chrg != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::basic_ios (&((struct basic_istream *) this)->D.88105) >>>>>;
    }
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_istream *) this)->_vptr.basic_istream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVSi + 24) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_istream *) this)->_vptr.basic_istream + 18446744073709551592) : 16))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 8) : &_ZTVSi + 64) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_istream *) this)->_M_gcount = 0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::init ((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_istream *) this)->_vptr.basic_istream + 18446744073709551592) : 16), 0B) >>>>>;
    }
  catch
    {
      if (__in_chrg != 0)
        {
          std::basic_ios<char>::~basic_ios (&((struct basic_istream *) this)->D.88105);
        }
      else
        {
          0
        }
    }
}


;; Function std::basic_istream<_CharT, _Traits>::~basic_istream() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_istream *) this)->_vptr.basic_istream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVSi + 24) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_istream *) this)->_vptr.basic_istream + 18446744073709551592) : 16))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 8) : &_ZTVSi + 64) >>>>>;
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_istream *) this)->_M_gcount = 0) >>>>>;
          }
        finally
          {
            if ((__in_chrg & 2) != 0)
              {
                std::basic_ios<char>::~basic_ios (&((struct basic_istream *) this)->D.88105);
              }
            else
              {
                <<< Unknown tree: void_cst >>>
              }
          }
      }
    finally
      {
        if (__in_chrg != 0)
          {
            *(struct basic_istream *) this = {CLOBBER};
          }
        else
          {
            <<< Unknown tree: void_cst >>>
          }
      }
  }
  <D.103708>:;
   >>>;


;; Function std::basic_filebuf<_CharT, _Traits>::~basic_filebuf() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_filebuf *) this)->D.92576._vptr.basic_streambuf = &_ZTVSt13basic_filebufIcSt11char_traitsIcEE + 16) >>>>>;
    try
      {
        try
          {
            try
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_filebuf<char>::close ((struct basic_filebuf *) this) >>>>>;
              }
            finally
              {
                std::__basic_file<char>::~__basic_file (&((struct basic_filebuf *) this)->_M_file);
              }
          }
        finally
          {
            std::basic_streambuf<char>::~basic_streambuf (&((struct basic_filebuf *) this)->D.92576);
          }
      }
    finally
      {
        *(struct 
        {
          struct 
          {
            int (*) () * _vptr.basic_streambuf;
            char_type * _M_in_beg;
            char_type * _M_in_cur;
            char_type * _M_in_end;
            char_type * _M_out_beg;
            char_type * _M_out_cur;
            char_type * _M_out_end;
            struct locale _M_buf_locale;
          } D.92577;
          void * _M_lock;
          struct __file_type _M_file;
          openmode _M_mode;
          __state_type _M_state_beg;
          __state_type _M_state_cur;
          __state_type _M_state_last;
          char_type * _M_buf;
          size_t _M_buf_size;
          bool _M_buf_allocated;
          bool _M_reading;
          bool _M_writing;
          char_type _M_pback;
          char_type * _M_pback_cur_save;
          char_type * _M_pback_end_save;
          bool _M_pback_init;
          const struct __codecvt_type * _M_codecvt;
          char * _M_ext_buf;
          streamsize _M_ext_buf_size;
          const char * _M_ext_next;
          char * _M_ext_end;
        } &) this = {CLOBBER};
      }
  }
  <D.103718>:;
   >>>;


;; Function void std::basic_ios<_CharT, _Traits>::setstate(std::ios_base::iostate) [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::_Ios_Iostate] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::clear ((struct basic_ios *) this, std::operator| (std::basic_ios<char>::rdstate ((struct basic_ios *) this), __state)) >>>>>;


;; Function std::basic_iostream<_CharT, _Traits>::basic_iostream() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  if (__in_chrg != 0)
    {
      *(struct basic_iostream *) this = {CLOBBER};
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>;
{
  if (__in_chrg != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::basic_ios (&((struct basic_iostream *) this)->D.89316) >>>>>;
    }
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_istream<char>::basic_istream (&((struct basic_iostream *) this)->D.89312, __in_chrg == 0 ? __vtt_parm + 8 : (const void * *) &_ZTTSd + 8) >>>>>;
      try
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ostream<char>::basic_ostream (&((struct basic_iostream *) this)->D.89313, __in_chrg == 0 ? __vtt_parm + 24 : (const void * *) &_ZTTSd + 24) >>>>>;
          try
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_iostream *) this)->D.89312._vptr.basic_istream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVSd + 24) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_iostream *) this)->D.89312._vptr.basic_istream + 18446744073709551592) : 24))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 40) : &_ZTVSd + 104) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_iostream *) this)->D.89313._vptr.basic_ostream = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 48) : &_ZTVSd + 64) >>>>>;
            }
          catch
            {
              std::basic_ostream<char>::~basic_ostream (&((struct basic_iostream *) this)->D.89313, __in_chrg == 0 ? __vtt_parm + 24 : (const void * *) &_ZTTSd + 24);
            }
        }
      catch
        {
          std::basic_istream<char>::~basic_istream (&((struct basic_iostream *) this)->D.89312, __in_chrg == 0 ? __vtt_parm + 8 : (const void * *) &_ZTTSd + 8);
        }
    }
  catch
    {
      if (__in_chrg != 0)
        {
          std::basic_ios<char>::~basic_ios (&((struct basic_iostream *) this)->D.89316);
        }
      else
        {
          0
        }
    }
}


;; Function std::basic_iostream<_CharT, _Traits>::~basic_iostream() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_iostream *) this)->D.89312._vptr.basic_istream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVSd + 24) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_iostream *) this)->D.89312._vptr.basic_istream + 18446744073709551592) : 24))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 40) : &_ZTVSd + 104) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_iostream *) this)->D.89313._vptr.basic_ostream = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 48) : &_ZTVSd + 64) >>>>>;
    try
      {
        try
          {
            try
              {
                try
                  {
                    
                  }
                finally
                  {
                    std::basic_ostream<char>::~basic_ostream (&((struct basic_iostream *) this)->D.89313, __in_chrg == 0 ? __vtt_parm + 24 : (const void * *) &_ZTTSd + 24);
                  }
              }
            finally
              {
                std::basic_istream<char>::~basic_istream (&((struct basic_iostream *) this)->D.89312, __in_chrg == 0 ? __vtt_parm + 8 : (const void * *) &_ZTTSd + 8);
              }
          }
        finally
          {
            if ((__in_chrg & 2) != 0)
              {
                std::basic_ios<char>::~basic_ios (&((struct basic_iostream *) this)->D.89316);
              }
            else
              {
                <<< Unknown tree: void_cst >>>
              }
          }
      }
    finally
      {
        if (__in_chrg != 0)
          {
            *(struct basic_iostream *) this = {CLOBBER};
          }
        else
          {
            <<< Unknown tree: void_cst >>>
          }
      }
  }
  <D.103731>:;
   >>>;


;; Function std::__cxx11::basic_stringbuf<_CharT, _Traits, _Alloc>::basic_stringbuf(std::ios_base::openmode) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::ios_base::openmode = std::_Ios_Openmode] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*) () * _vptr.basic_streambuf;
      char_type * _M_in_beg;
      char_type * _M_in_cur;
      char_type * _M_in_end;
      char_type * _M_out_beg;
      char_type * _M_out_cur;
      char_type * _M_out_end;
      struct locale _M_buf_locale;
    } D.94331;
    openmode _M_mode;
    struct __string_type _M_string;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_streambuf<char>::basic_streambuf (&((struct basic_stringbuf *) this)->D.94330) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_stringbuf *) this)->D.94330._vptr.basic_streambuf = &_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_stringbuf *) this)->_M_mode = __mode) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_stringbuf *) this)->_M_string = <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.103741
  (struct basic_string *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
      try
        {
          
        }
      catch
        {
          std::__cxx11::basic_string<char>::~basic_string (&((struct basic_stringbuf *) this)->_M_string);
        }
    }
  catch
    {
      std::basic_streambuf<char>::~basic_streambuf (&((struct basic_stringbuf *) this)->D.94330);
    }
}


;; Function std::basic_streambuf<_CharT, _Traits>::~basic_streambuf() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_streambuf *) this)->_vptr.basic_streambuf = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16) >>>>>;
    try
      {
        try
          {
            
          }
        finally
          {
            std::locale::~locale (&((struct basic_streambuf *) this)->_M_buf_locale);
          }
      }
    finally
      {
        *(struct 
        {
          int (*) () * _vptr.basic_streambuf;
          char_type * _M_in_beg;
          char_type * _M_in_cur;
          char_type * _M_in_end;
          char_type * _M_out_beg;
          char_type * _M_out_cur;
          char_type * _M_out_end;
          struct locale _M_buf_locale;
        } &) this = {CLOBBER};
      }
  }
  <D.103746>:;
   >>>;


;; Function std::__cxx11::basic_stringbuf<_CharT, _Traits, _Alloc>::__string_type std::__cxx11::basic_stringbuf<_CharT, _Traits, _Alloc>::str() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_stringbuf<_CharT, _Traits, _Alloc>::__string_type = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


{
  struct __string_type __ret [value-expr: *<retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string ((struct __string_type *) <retval>, (const struct allocator &) &TARGET_EXPR <D.103756, <<< Unknown tree: aggr_init_expr
  4
  get_allocator
  D.103756
  &((const struct basic_stringbuf *) this)->_M_string >>>>) >>>>>;
  try
    {
      if (<<cleanup_point std::basic_streambuf<char>::pptr (&((const struct basic_stringbuf *) this)->D.94330) != 0B>>)
        {
          if (<<cleanup_point std::basic_streambuf<char>::pptr (&((const struct basic_stringbuf *) this)->D.94330) > std::basic_streambuf<char>::egptr (&((const struct basic_stringbuf *) this)->D.94330)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::assign<char*> ((struct __string_type *) <retval>, std::basic_streambuf<char>::pbase (&((const struct basic_stringbuf *) this)->D.94330), std::basic_streambuf<char>::pptr (&((const struct basic_stringbuf *) this)->D.94330)) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::assign<char*> ((struct __string_type *) <retval>, std::basic_streambuf<char>::pbase (&((const struct basic_stringbuf *) this)->D.94330), std::basic_streambuf<char>::egptr (&((const struct basic_stringbuf *) this)->D.94330)) >>>>>;
            }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::operator= ((struct __string_type *) <retval>, (const struct basic_string &) &((const struct basic_stringbuf *) this)->_M_string) >>>>>;
        }
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct __string_type *) <retval>);
    }
}


;; Function bool std::operator!=(const std::allocator<_CharT>&, const std::allocator<_CharT>&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function void std::__alloc_on_move(_Alloc&, _Alloc&) [with _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct __traits __traits;
  typedef struct __pocma __pocma;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__do_alloc_on_move<std::allocator<char> > (__one, __two, TARGET_EXPR <D.103767, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::assign(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_assign ((struct basic_string *) this, __str) >>>>>;
return <retval> = (struct basic_string &) this;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::clear() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, 0) >>>>>
   >>>;


;; Function std::basic_ios<_CharT, _Traits>::char_type std::basic_ios<_CharT, _Traits>::widen(char) const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ios<_CharT, _Traits>::char_type = char] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::ctype<char>::widen ((const struct ctype *) std::__check_facet<std::ctype<char> > ((const struct __ctype_type *) ((const struct basic_ios *) this)->_M_ctype), (int) __c)>>;


;; Function std::basic_ostream<_CharT, _Traits>& std::flush(std::basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::basic_ostream<char>::flush ((struct basic_ostream *) __os)>>;


;; Function bool std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::compare ((const struct basic_string *) __lhs, __rhs) == 0>>;


;; Function glm::vec<L, T, Q> glm::normalize(const glm::vec<L, T, Q>&) [with int L = 3; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103785, glm::detail::compute_normalize<3, float, (glm::qualifier)0, false>::call (x)>>>;


;; Function constexpr glm::vec<3, T, Q> glm::operator*(T, const glm::vec<3, T, Q>&) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103787, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.103787
  (struct vec *) <<< Unknown tree: void_cst >>>
  (float) v->D.95554.x * scalar
  (float) v->D.95560.y * scalar
  (float) v->D.95566.z * scalar >>>>>>;


;; Function glm::mat<4, 4, T, (glm::qualifier)0> glm::perspectiveRH_NO(T, T, T, T) [with T = float] (null)
;; enabled by -tree-original


{
  const float tanHalfFovy;
  struct mat Result [value-expr: <retval>];

  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (glm::abs<float> (aspect - std::numeric_limits<float>::epsilon ()) > 0.0 || (_assert ((const char *) "abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)", (const char *) "C:/glm/glm/ext/matrix_clip_space.inl", 251);, 0)) >>>>>;
    const float tanHalfFovy;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tanHalfFovy = std::tan (fovy / 2.0e+0)) >>>>>;
  <<cleanup_point <retval> = {.value={{.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}, {.D.51351={.x=0.0}, .D.51357={.y=0.0}, .D.51363={.z=0.0}, .D.51369={.w=0.0}}}}>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 0), 0) = 1.0e+0 / (aspect * (float) tanHalfFovy)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 1), 1) = 1.0e+0 / (float) tanHalfFovy) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 2), 2) = -(zFar + zNear) / (zFar - zNear)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 2), 3) = -1.0e+0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*glm::vec<4, float, (glm::qualifier)0>::operator[] ((struct col_type *) glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 3), 2) = -((zFar * 2.0e+0) * zNear) / (zFar - zNear)) >>>>>;
  <<cleanup_point return <retval>>>;
}


;; Function static vec<2, T, Q> glm::detail::functor2<vec, 2, T, Q>::call(T (*)(T, T), const vec<2, T, Q>&, const vec<2, T, Q>&) [with vec = glm::vec; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103795, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.103795
  (struct vec *) <<< Unknown tree: void_cst >>>
  Func ((float) a->D.47816.x, (float) b->D.47816.x)
  Func ((float) a->D.47822.y, (float) b->D.47822.y) >>>>;, D.103795>>;


;; Function constexpr genType glm::max(genType, genType) [with genType = float] (null)
;; enabled by -tree-original


return <retval> = x < y ? y : x;


;; Function constexpr genType glm::min(genType, genType) [with genType = float] (null)
;; enabled by -tree-original


return <retval> = y < x ? y : x;


;; Function static vec<4, T, Q> glm::detail::functor2<vec, 4, T, Q>::call(T (*)(T, T), const vec<4, T, Q>&, const vec<4, T, Q>&) [with vec = glm::vec; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.103799, <<< Unknown tree: aggr_init_expr
  8
  __ct_comp 
  D.103799
  (struct vec *) <<< Unknown tree: void_cst >>>
  Func ((float) a->D.51351.x, (float) b->D.51351.x)
  Func ((float) a->D.51357.y, (float) b->D.51357.y)
  Func ((float) a->D.51363.z, (float) b->D.51363.z)
  Func ((float) a->D.51369.w, (float) b->D.51369.w) >>>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.103808, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char; std::pointer_traits<_Tp*>::pointer = char*; std::__make_not_void<_Tp> = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char *) std::addressof<char> ((char &) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::pointer_traits<const char*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.72061._M_local_buf)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.103873, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<wchar_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = wchar_t; std::pointer_traits<_Tp*>::pointer = wchar_t*; std::__make_not_void<_Tp> = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (wchar_t *) std::addressof<wchar_t> ((wchar_t &) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::pointer_traits<const wchar_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.73461._M_local_buf)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.104043, *(struct forward_iterator_tag &) &TARGET_EXPR <D.104023, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.104066, *(struct forward_iterator_tag &) &TARGET_EXPR <D.104055, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char16_t; std::pointer_traits<_Tp*>::pointer = char16_t*; std::__make_not_void<_Tp> = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char16_t *) std::addressof<char16_t> ((char16_t &) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.104106, *(struct forward_iterator_tag &) &TARGET_EXPR <D.104095, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char16_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::pointer_traits<const char16_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.75334._M_local_buf)>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char32_t; std::pointer_traits<_Tp*>::pointer = char32_t*; std::__make_not_void<_Tp> = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char32_t *) std::addressof<char32_t> ((char32_t &) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.104181, *(struct forward_iterator_tag &) &TARGET_EXPR <D.104170, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char32_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::pointer_traits<const char32_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.76651._M_local_buf)>>;


;; Function static _Alloc __gnu_cxx::__alloc_traits<_Alloc, <template-parameter-1-2> >::_S_select_on_copy(const _Alloc&) [with _Alloc = std::allocator<char>; <template-parameter-1-2> = char] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.104219, <<< Unknown tree: aggr_init_expr
  4
  select_on_container_copy_construction
  D.104219
  (const struct allocator_type &) __a >>>>>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::max_size ((const struct basic_string *) this) + (__n1 - std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)) < __n2>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error (__s) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_replace ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_check ((struct basic_string *) this, __pos, (const char *) "basic_string::replace"), std::__cxx11::basic_string<char>::_M_limit ((struct basic_string *) this, __pos, __n1), __s, __n2)>>;


;; Function std::ios_base::iostate std::basic_ios<_CharT, _Traits>::rdstate() const [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::_Ios_Iostate] (null)
;; enabled by -tree-original


return <retval> = (iostate) ((const struct basic_ios *) this)->D.86211._M_streambuf_state;


;; Function std::basic_ostream<_CharT, _Traits>::basic_ostream() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  if (__in_chrg != 0)
    {
      *(struct basic_ostream *) this = {CLOBBER};
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>;
{
  if (__in_chrg != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::basic_ios (&((struct basic_ostream *) this)->D.87076) >>>>>;
    }
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ostream *) this)->_vptr.basic_ostream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVSo + 24) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_ostream *) this)->_vptr.basic_ostream + 18446744073709551592) : 8))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 8) : &_ZTVSo + 64) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::init ((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_ostream *) this)->_vptr.basic_ostream + 18446744073709551592) : 8), 0B) >>>>>;
    }
  catch
    {
      if (__in_chrg != 0)
        {
          std::basic_ios<char>::~basic_ios (&((struct basic_ostream *) this)->D.87076);
        }
      else
        {
          0
        }
    }
}


;; Function std::basic_ostream<_CharT, _Traits>::~basic_ostream() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ostream *) this)->_vptr.basic_ostream = __in_chrg == 0 ? (int (*) () *) *NON_LVALUE_EXPR <__vtt_parm> : &_ZTVSo + 24) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_ios *) this + (__in_chrg == 0 ? (sizetype) *(long long int *) (((struct basic_ostream *) this)->_vptr.basic_ostream + 18446744073709551592) : 8))->D.86211._vptr.ios_base = __in_chrg == 0 ? (int (*) () *) *(__vtt_parm + 8) : &_ZTVSo + 64) >>>>>;
    try
      {
        try
          {
            
          }
        finally
          {
            if ((__in_chrg & 2) != 0)
              {
                std::basic_ios<char>::~basic_ios (&((struct basic_ostream *) this)->D.87076);
              }
            else
              {
                <<< Unknown tree: void_cst >>>
              }
          }
      }
    finally
      {
        if (__in_chrg != 0)
          {
            *(struct basic_ostream *) this = {CLOBBER};
          }
        else
          {
            <<< Unknown tree: void_cst >>>
          }
      }
  }
  <D.104228>:;
   >>>;


;; Function std::basic_streambuf<_CharT, _Traits>::basic_streambuf() [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*) () * _vptr.basic_streambuf;
    char_type * _M_in_beg;
    char_type * _M_in_cur;
    char_type * _M_in_end;
    char_type * _M_out_beg;
    char_type * _M_out_cur;
    char_type * _M_out_end;
    struct locale _M_buf_locale;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_streambuf *) this)->_vptr.basic_streambuf = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_streambuf *) this)->_M_in_beg = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_streambuf *) this)->_M_in_cur = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_streambuf *) this)->_M_in_end = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_streambuf *) this)->_M_out_beg = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_streambuf *) this)->_M_out_cur = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_streambuf *) this)->_M_out_end = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_streambuf *) this)->_M_buf_locale = TARGET_EXPR <D.104238, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.104238
  (struct locale *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale (&((struct basic_streambuf *) this)->_M_buf_locale);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::get_allocator() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return *<retval> = TARGET_EXPR <D.104243, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.104243
  (struct allocator *) <<< Unknown tree: void_cst >>>
  (const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) this) >>>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._80 D.72993;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::basic_streambuf<_CharT, _Traits>::char_type* std::basic_streambuf<_CharT, _Traits>::pptr() const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_streambuf<_CharT, _Traits>::char_type = char] (null)
;; enabled by -tree-original


return <retval> = (char_type *) ((const struct basic_streambuf *) this)->_M_out_cur;


;; Function std::basic_streambuf<_CharT, _Traits>::char_type* std::basic_streambuf<_CharT, _Traits>::egptr() const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_streambuf<_CharT, _Traits>::char_type = char] (null)
;; enabled by -tree-original


return <retval> = (char_type *) ((const struct basic_streambuf *) this)->_M_in_end;


;; Function std::basic_streambuf<_CharT, _Traits>::char_type* std::basic_streambuf<_CharT, _Traits>::pbase() const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_streambuf<_CharT, _Traits>::char_type = char] (null)
;; enabled by -tree-original


return <retval> = (char_type *) ((const struct basic_streambuf *) this)->_M_out_beg;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::assign(_InputIterator, _InputIterator) [with _InputIterator = char*; <template-parameter-2-2> = void; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, TARGET_EXPR <D.104287, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.104287
  (struct __const_iterator *) <<< Unknown tree: void_cst >>>
  (const struct __normal_iterator &) &TARGET_EXPR <D.104251, std::__cxx11::basic_string<char>::begin ((struct basic_string *) this)> >>>>, TARGET_EXPR <D.104306, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.104306
  (struct __const_iterator *) <<< Unknown tree: void_cst >>>
  (const struct __normal_iterator &) &TARGET_EXPR <D.104261, std::__cxx11::basic_string<char>::end ((struct basic_string *) this)> >>>>, __first, __last)>>;


;; Function static constexpr bool __gnu_cxx::__alloc_traits<_Alloc, <template-parameter-1-2> >::_S_propagate_on_copy_assign() [with _Alloc = std::allocator<char>; <template-parameter-1-2> = char] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_propagate_on_copy_assign ()>>)
      {
        {
          {
            if (<<cleanup_point (!__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_always_equal () && !std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) this)) && std::operator!=<char> ((const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), (const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) __str))>>)
              {
                {
                  {
                    if (<<cleanup_point std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str) <= 15>>)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.72061._M_allocated_capacity) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this)) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, 0) >>>>>;
                      }
                    else
                      {
                        {
                          const long long unsigned int __len;
                          struct allocator __alloc;
                          char * __ptr;

                                                    const long long unsigned int __len;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str)) >>>>>;
                                                    struct allocator __alloc;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__alloc = <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.104313
  (struct allocator *) <<< Unknown tree: void_cst >>>
  (const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) __str) >>>) >>>>>;
                          try
                            {
                                                            char * __ptr;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ptr = std::allocator_traits<std::allocator<char> >::allocate ((struct allocator_type &) &__alloc, (long long unsigned int) __len + 1)) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.72061._M_allocated_capacity) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, __ptr) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, (long long unsigned int) __len) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, (long long unsigned int) __len) >>>>>;
                            }
                          finally
                            {
                              std::allocator<char>::~allocator (&__alloc);
                            }
                        }
                      }
                  }
                }
              }
          }
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__alloc_on_copy<std::allocator<char> > ((struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), (const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) __str)) >>>>>;
        }
      }
  }
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::assign ((struct basic_string *) this, __str)>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>; std::allocator_traits<std::allocator<_CharT> >::pointer = char*; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function void std::__do_alloc_on_move(_Alloc&, _Alloc&, std::true_type) [with _Alloc = std::allocator<char>; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (const struct allocator &) std::move<std::allocator<char>&> (__two);, <<< Unknown tree: void_cst >>> >>>>>;


;; Function const _Facet& std::__check_facet(const _Facet*) [with _Facet = std::ctype<char>] (null)
;; enabled by -tree-original


if (__f == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_cast () >>>>>;
  }
return <retval> = (const struct ctype &) NON_LVALUE_EXPR <__f>;


;; Function static glm::vec<L, T, Q> glm::detail::compute_normalize<L, T, Q, Aligned>::call(const glm::vec<L, T, Q>&) [with int L = 3; T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.104340, glm::operator*<float, (glm::qualifier)0> (v, glm::inversesqrt<float> (glm::dot<3, float, (glm::qualifier)0> (v, v)))>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.104354, *(struct forward_iterator_tag &) &TARGET_EXPR <D.104343, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function _Tp* std::addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char> (__r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char; std::pointer_traits<_Tp*>::pointer = const char*; std::__make_not_void<_Tp> = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::addressof<const char> ((const char &) __r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.104378, *(struct forward_iterator_tag &) &TARGET_EXPR <D.104367, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = wchar_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<wchar_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = wchar_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<wchar_t> (__r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const wchar_t; std::pointer_traits<_Tp*>::pointer = const wchar_t*; std::__make_not_void<_Tp> = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::addressof<const wchar_t> ((const wchar_t &) __r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function _Tp* std::addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char16_t> (__r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char16_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char16_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy_chars (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char16_t; std::pointer_traits<_Tp*>::pointer = const char16_t*; std::__make_not_void<_Tp> = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::addressof<const char16_t> ((const char16_t &) __r)>>
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char32_t> (__r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char32_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char32_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy_chars (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char32_t; std::pointer_traits<_Tp*>::pointer = const char32_t*; std::__make_not_void<_Tp> = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::addressof<const char32_t> ((const char32_t &) __r)>>
   >>>;


;; Function static std::allocator_traits<std::allocator<_CharT> >::allocator_type std::allocator_traits<std::allocator<_CharT> >::select_on_container_copy_construction(const allocator_type&) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.105086, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.105086
  (struct allocator *) <<< Unknown tree: void_cst >>>
  (const struct allocator &) __rhs >>>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) < __pos>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range_fmt ((const char *) "%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)) >>>>>;
  }
return <retval> = __pos;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_limit(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __testoff;

        const bool __testoff;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__testoff = std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos > __off) >>>>>;
    <<cleanup_point return <retval> = (bool) __testoff ? __off : std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos>>;
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::begin() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.105093, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.105093
  (struct __normal_iterator *) <<< Unknown tree: void_cst >>>
  (char * const &) &TARGET_EXPR <D.105092, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)> >>>>;, D.105093>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::end() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.105105, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.105105
  (struct __normal_iterator *) <<< Unknown tree: void_cst >>>
  (char * const &) &TARGET_EXPR <D.105104, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) std::__cxx11::basic_string<char>::size ((struct basic_string *) this)> >>>>;, D.105105>>
   >>>;


;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const __gnu_cxx::__normal_iterator<_Iter, typename __gnu_cxx::__enable_if<std::__are_same<_Iter, typename _Container::pointer>::__value, _Container>::__type>&) [with _Iter = char*; _Iterator = const char*; _Container = std::__cxx11::basic_string<char>; typename __gnu_cxx::__enable_if<std::__are_same<_Iter, typename _Container::pointer>::__value, _Container>::__type = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    const char * _M_current;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __normal_iterator *) this)->_M_current = (const char *) *__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::base ((const struct __normal_iterator *) __i)) >>>>>;
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, _CharT*, _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, (size_type) __gnu_cxx::operator-<const char*, char*, std::__cxx11::basic_string<char> > ((const struct __normal_iterator &) &__i1, (const struct __normal_iterator &) &TARGET_EXPR <D.105110, std::__cxx11::basic_string<char>::begin ((struct basic_string *) this)>), (size_type) __gnu_cxx::operator-<const char*, std::__cxx11::basic_string<char> > ((const struct __normal_iterator &) &__i2, (const struct __normal_iterator &) &__i1), (const char *) __k1, (size_type) (__k2 - __k1))>>;


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::pointer = char*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) __gnu_cxx::new_allocator<char>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function void std::__alloc_on_copy(_Alloc&, const _Alloc&) [with _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct __traits __traits;
  typedef struct __pocca __pocca;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__do_alloc_on_copy<std::allocator<char> > (__one, __two, TARGET_EXPR <D.105128, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::pointer = char*; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function T glm::dot(const glm::vec<L, T, Q>&, const glm::vec<L, T, Q>&) [with int L = 3; T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = glm::detail::compute_dot<glm::vec<3, float, (glm::qualifier)0>, float, false>::call (x, y)>>;


;; Function genType glm::inversesqrt(genType) [with genType = float] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 1.0e+0 / std::sqrt (x)>>;


;; Function constexpr glm::vec<3, T, Q> glm::operator*(const glm::vec<3, T, Q>&, T) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.105143, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.105143
  (struct vec *) <<< Unknown tree: void_cst >>>
  (float) v->D.95554.x * scalar
  (float) v->D.95560.y * scalar
  (float) v->D.95566.z * scalar >>>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char> (__r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = wchar_t; __gnu_cxx::new_allocator<_Tp>::pointer = wchar_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (wchar_t *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const wchar_t> (__r)>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.105193, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char*> (__first, __last, TARGET_EXPR <D.105183, std::__iterator_category<const char*> ((const char * const &) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const wchar_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.105210, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const wchar_t*> (__first, __last, TARGET_EXPR <D.105200, std::__iterator_category<const wchar_t*> ((const wchar_t * const &) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 2)) >>>>>
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char16_t *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char16_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char16_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.105228, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char16_t*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char16_t*> (__first, __last, TARGET_EXPR <D.105218, std::__iterator_category<const char16_t*> ((const char16_t * const &) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char16_t *) std::allocator_traits<std::allocator<char16_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 2)) >>>>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::pointer = char16_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char16_t> (__r)>>
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char32_t *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char32_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char32_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.105251, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char32_t*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char32_t*> (__first, __last, TARGET_EXPR <D.105241, std::__iterator_category<const char32_t*> ((const char32_t * const &) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char32_t *) std::allocator_traits<std::allocator<char32_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 4)) >>>>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::pointer = char32_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char32_t> (__r)>>
   >>>;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char>::max_size ((const struct new_allocator *) __a)>>
   >>>;


;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const _Iterator&) [with _Iterator = char*; _Container = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char * _M_current;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __normal_iterator *) this)->_M_current = (char *) *__i) >>>>>;
  }
   >>>;


;; Function const _Iterator& __gnu_cxx::__normal_iterator<_Iterator, _Container>::base() const [with _Iterator = char*; _Container = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char * const &) &((const struct __normal_iterator *) this)->_M_current
   >>>;


;; Function decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&) [with _IteratorL = const char*; _IteratorR = char*; _Container = std::__cxx11::basic_string<char>; decltype ((__lhs.base() - __rhs.base())) = long long int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) *__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base ((const struct __normal_iterator *) __lhs) - (char *) *__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::base ((const struct __normal_iterator *) __rhs)>>
   >>>;


;; Function typename __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&) [with _Iterator = const char*; _Container = std::__cxx11::basic_string<char>; typename __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type = long long int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) *__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base ((const struct __normal_iterator *) __lhs) - (const char *) *__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base ((const struct __normal_iterator *) __rhs)>>
   >>>;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::pointer = char*; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::new_allocator<char>::max_size ((struct new_allocator *) this) < __n>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
  }
<<cleanup_point return <retval> = (char *) operator new (NON_LVALUE_EXPR <__n>)>>;


;; Function void std::__do_alloc_on_copy(_Alloc&, const _Alloc&, std::false_type) [with _Alloc = std::allocator<char>; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original





;; Function constexpr glm::vec<3, T, Q> glm::operator*(const glm::vec<3, T, Q>&, const glm::vec<3, T, Q>&) [with T = float; glm::qualifier Q = (glm::qualifier)0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.105275, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.105275
  (struct vec *) <<< Unknown tree: void_cst >>>
  (float) v1->D.95554.x * (float) v2->D.95554.x
  (float) v1->D.95560.y * (float) v2->D.95560.y
  (float) v1->D.95566.z * (float) v2->D.95566.z >>>>>>;


;; Function static T glm::detail::compute_dot<glm::vec<3, T, Q>, T, Aligned>::call(const glm::vec<3, T, Q>&, const glm::vec<3, T, Q>&) [with T = float; glm::qualifier Q = (glm::qualifier)0; bool Aligned = false] (null)
;; enabled by -tree-original


{
  struct vec tmp;

    struct vec tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = glm::operator*<float, (glm::qualifier)0> (a, b)) >>>>>;
  return <retval> = (tmp.D.95554.x + tmp.D.95560.y) + tmp.D.95566.z;
}


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = char*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.105290, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = char*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<char*> (__first, __last, TARGET_EXPR <D.105280, std::__iterator_category<char*> ((char * const &) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, (const char *) __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = wchar_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.105308, {}>>>;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<wchar_t*> (__first, __last, TARGET_EXPR <D.105298, std::__iterator_category<wchar_t*> ((wchar_t * const &) &__first)>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, (const wchar_t *) __k1, (size_type) ((__k2 - __k1) /[ex] 2)) >>>>>
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const wchar_t *) __r
   >>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy (__d, __s, __n) >>>>>;
  }


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 2;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<wchar_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char16_t*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 2;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char16_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) __gnu_cxx::new_allocator<char16_t>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char16_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char16_t *) __r
   >>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char32_t*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 4;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char32_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) __gnu_cxx::new_allocator<char32_t>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char32_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char32_t *) __r
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615
   >>>;


;; Function const _Iterator& __gnu_cxx::__normal_iterator<_Iterator, _Container>::base() const [with _Iterator = const char*; _Container = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char * const &) &((const struct __normal_iterator *) this)->_M_current
   >>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = char*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 2;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char16_t>::max_size ((const struct new_allocator *) __a)>>
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::pointer = char16_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::new_allocator<char16_t>::max_size ((struct new_allocator *) this) < __n>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
  }
<<cleanup_point return <retval> = (char16_t *) operator new (__n * 2)>>;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char32_t>::max_size ((const struct new_allocator *) __a)>>
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::pointer = char32_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::new_allocator<char32_t>::max_size ((struct new_allocator *) this) < __n>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
  }
<<cleanup_point return <retval> = (char32_t *) operator new (__n * 4)>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4611686018427387903
   >>>;


;; Function void __tcf_0() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::Init::~Init (&__ioinit) >>>>>;


;; Function void __static_initialization_and_destruction_0(int, int) (null)
;; enabled by -tree-original


if (__initialize_p == 1)
  {
    if (__priority == 65535)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::Init::Init (&__ioinit) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) atexit (__tcf_0) >>>>>;
      }
  }


;; Function (static initializers for D:\WSCodeblocks\ComputacaoGrafica\GLFW_TDE2\main.cpp) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __static_initialization_and_destruction_0 (1, 65535) >>>>>;

