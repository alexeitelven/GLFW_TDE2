
;; Function std::cos (_ZSt3cosf, funcdef_no=66, decl_uid=23268, cgraph_uid=42, symbol_order=42)

std::cos (float __x)
{
  float D.105604;
  float _2;

  <bb 2> :
  _2 = __builtin_cosf (__x_1(D));

  <bb 3> :
<L0>:
  return _2;

}



;; Function std::sin (_ZSt3sinf, funcdef_no=101, decl_uid=23427, cgraph_uid=66, symbol_order=66)

std::sin (float __x)
{
  float D.105606;
  float _2;

  <bb 2> :
  _2 = __builtin_sinf (__x_1(D));

  <bb 3> :
<L0>:
  return _2;

}



;; Function std::sqrt (_ZSt4sqrtf, funcdef_no=107, decl_uid=23451, cgraph_uid=70, symbol_order=70)

std::sqrt (float __x)
{
  float D.105623;
  float _4;

  <bb 2> :
  _4 = __builtin_sqrtf (__x_2(D));

  <bb 3> :
<L0>:
  return _4;

}



;; Function std::tan (_ZSt3tanf, funcdef_no=110, decl_uid=23463, cgraph_uid=72, symbol_order=72)

std::tan (float __x)
{
  float D.105727;
  float _2;

  <bb 2> :
  _2 = __builtin_tanf (__x_1(D));

  <bb 3> :
<L0>:
  return _2;

}



;; Function std::numeric_limits<float>::epsilon (_ZNSt14numeric_limitsIfE7epsilonEv, funcdef_no=440, decl_uid=28156, cgraph_uid=336, symbol_order=336)

std::numeric_limits<float>::epsilon ()
{
  float D.105717;
  float _1;

  <bb 2> :
  _1 = 1.1920928955078125e-7;

  <bb 3> :
<L0>:
  return _1;

}



;; Function glm::vec<4, float, (glm::qualifier)0>::vec (_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1Ef, funcdef_no=1542, decl_uid=53261, cgraph_uid=391, symbol_order=391)

glm::vec<4, float, (glm::qualifier)0>::vec (struct vec * const this, float scalar)
{
  <bb 2> :
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->D.51351.x = scalar_4(D);
  this_2(D)->D.51357.y = scalar_4(D);
  this_2(D)->D.51363.z = scalar_4(D);
  this_2(D)->D.51369.w = scalar_4(D);
  return;

}



;; Function glm::vec<4, float, (glm::qualifier)0>::vec (_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1Effff, funcdef_no=1548, decl_uid=53249, cgraph_uid=395, symbol_order=395)

glm::vec<4, float, (glm::qualifier)0>::vec (struct vec * const this, float _x, float _y, float _z, float _w)
{
  <bb 2> :
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->D.51351.x = _x_4(D);
  this_2(D)->D.51357.y = _y_6(D);
  this_2(D)->D.51363.z = _z_8(D);
  this_2(D)->D.51369.w = _w_10(D);
  return;

}



;; Function glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call (_ZN3glm6detail16compute_vec4_mulIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_, funcdef_no=1545, decl_uid=53356, cgraph_uid=396, symbol_order=396)

glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call (const struct vec & a, const struct vec & b)
{
  float _1;
  float _2;
  float _3;
  float _4;
  float _5;
  float _6;
  float _7;
  float _8;
  float _9;
  float _10;
  float _11;
  float _12;

  <bb 2> :
  _1 = a_14(D)->D.51369.w;
  _2 = b_15(D)->D.51369.w;
  _3 = _1 * _2;
  _4 = a_14(D)->D.51363.z;
  _5 = b_15(D)->D.51363.z;
  _6 = _4 * _5;
  _7 = a_14(D)->D.51357.y;
  _8 = b_15(D)->D.51357.y;
  _9 = _7 * _8;
  _10 = a_14(D)->D.51351.x;
  _11 = b_15(D)->D.51351.x;
  _12 = _10 * _11;
  glm::vec<4, float, (glm::qualifier)0>::vec (&<retval>, _12, _9, _6, _3);

  <bb 3> :
<L0>:
  return <retval>;

}



;; Function glm::vec<4, float, (glm::qualifier)0>::operator*=<float> (_ZN3glm3vecILi4EfLNS_9qualifierE0EEmLIfEERS2_T_, funcdef_no=1544, decl_uid=53350, cgraph_uid=397, symbol_order=397)

glm::vec<4, float, (glm::qualifier)0>::operator*=<float> (struct vec * const this, float scalar)
{
  struct vec D.53360;
  struct vec & D.105644;
  struct vec & _6;

  <bb 2> :
  glm::vec<4, float, (glm::qualifier)0>::vec (&D.53360, scalar_2(D));
  *this_4(D) = glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call (this_4(D), &D.53360);
  _6 = this_4(D);
  D.53360 ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _6;

}



;; Function glm::operator*<float, (glm::qualifier)0> (_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_, funcdef_no=1543, decl_uid=53303, cgraph_uid=398, symbol_order=398)

glm::operator*<float, (glm::qualifier)0> (const struct vec & v, const float & scalar)
{
  struct vec & D.105641;
  struct vec D.53349;
  float _1;
  struct vec & _2;
  struct vec & _8;

  <bb 2> :
  _1 = *scalar_4(D);
  D.53349 = *v_5(D);
  _8 = glm::vec<4, float, (glm::qualifier)0>::operator*=<float> (&D.53349, _1);
  _2 = _8;
  <retval> = MEM[(const struct vec &)_2];
  D.53349 ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return <retval>;

}



;; Function glm::abs<float> (_ZN3glm3absIfEET_S1_, funcdef_no=1755, decl_uid=59499, cgraph_uid=425, symbol_order=425)

glm::abs<float> (float x)
{
  float D.105719;
  float _4;

  <bb 2> :
  _4 = glm::detail::compute_abs<float, true>::call (x_2(D));

  <bb 3> :
<L0>:
  return _4;

}



;; Function std::operator| (_ZStorSt13_Ios_OpenmodeS_, funcdef_no=2942, decl_uid=80471, cgraph_uid=746, symbol_order=747)

std::operator| (_Ios_Openmode __a, _Ios_Openmode __b)
{
  _Ios_Openmode D.105482;
  _Ios_Openmode _3;

  <bb 2> :
  _3 = __a_1(D) | __b_2(D);

  <bb 3> :
<L0>:
  return _3;

}



;; Function std::operator| (_ZStorSt12_Ios_IostateS_, funcdef_no=2949, decl_uid=80506, cgraph_uid=753, symbol_order=754)

std::operator| (_Ios_Iostate __a, _Ios_Iostate __b)
{
  _Ios_Iostate D.105480;
  _Ios_Iostate _3;

  <bb 2> :
  _3 = __a_1(D) | __b_2(D);

  <bb 3> :
<L0>:
  return _3;

}



;; Function Shader::Shader (_ZN6ShaderC1EPKcS1_S1_, funcdef_no=3518, decl_uid=95316, cgraph_uid=859, symbol_order=861)

Shader::Shader (struct Shader * const this, const char * vertexPath, const char * fragmentPath, const char * geometryPath)
{
  long long int D.105887;
  unsigned int D.105465;
  unsigned int D.105459;
  unsigned int D.105454;
  unsigned int D.105449;
  struct basic_ostream & D.105444;
  struct __filebuf_type * D.105438;
  struct __filebuf_type * D.105437;
  struct __filebuf_type * D.105436;
  const char * gShaderCode;
  struct failure & e;
  struct stringstream gShaderStream;
  struct stringstream fShaderStream;
  struct stringstream vShaderStream;
  unsigned int geometry;
  unsigned int fragment;
  unsigned int vertex;
  const char * fShaderCode;
  const char * vShaderCode;
  struct ifstream gShaderFile;
  struct ifstream fShaderFile;
  struct ifstream vShaderFile;
  struct string geometryCode;
  struct string fragmentCode;
  struct string vertexCode;
  struct allocator D.95541;
  struct string D.95540;
  struct allocator D.95539;
  struct string D.95538;
  struct allocator D.95536;
  struct string D.95535;
  struct allocator D.95534;
  struct string D.95533;
  register struct failure * D.95532;
  struct __string_type D.95530;
  struct __string_type D.95528;
  struct __string_type D.95527;
  _Ios_Iostate _1;
  _Ios_Iostate _2;
  _Ios_Iostate _3;
  _Ios_Openmode _4;
  _Ios_Openmode _5;
  struct __filebuf_type * _6;
  struct __filebuf_type * _7;
  _Ios_Openmode _8;
  struct __filebuf_type * _9;
  void * _10;
  struct basic_ostream & _11;
  const char * _12;
  const char * _13;
  GLuint (*<T69d>) (GLenum) __glewCreateShader.32_14;
  void (*<T6e6>) (GLuint, GLsizei, const GLchar * const *, const GLint *) __glewShaderSource.33_15;
  void (*<T696>) (GLuint) __glewCompileShader.34_16;
  GLuint (*<T69d>) (GLenum) __glewCreateShader.35_17;
  void (*<T6e6>) (GLuint, GLsizei, const GLchar * const *, const GLint *) __glewShaderSource.36_18;
  void (*<T696>) (GLuint) __glewCompileShader.37_19;
  const char * _20;
  GLuint (*<T69d>) (GLenum) __glewCreateShader.38_21;
  void (*<T6e6>) (GLuint, GLsizei, const GLchar * const *, const GLint *) __glewShaderSource.39_22;
  void (*<T696>) (GLuint) __glewCompileShader.40_23;
  GLuint (*<T699>) (void) __glewCreateProgram.41_24;
  unsigned int _25;
  void (*<T68b>) (GLuint, GLuint) __glewAttachShader.42_26;
  unsigned int _27;
  void (*<T68b>) (GLuint, GLuint) __glewAttachShader.43_28;
  unsigned int _29;
  void (*<T68b>) (GLuint, GLuint) __glewAttachShader.44_30;
  unsigned int _31;
  void (*<T696>) (GLuint) __glewLinkProgram.45_32;
  unsigned int _33;
  unsigned int _34;
  void (*<T696>) (GLuint) __glewDeleteShader.46_35;
  void (*<T696>) (GLuint) __glewDeleteShader.47_36;
  void (*<T696>) (GLuint) __glewDeleteShader.48_37;
  struct __filebuf_type * _83;
  struct __filebuf_type * _86;
  struct __filebuf_type * _103;
  unsigned int _125;
  unsigned int _137;
  unsigned int _152;
  unsigned int _170;
  struct failure * _215;
  struct basic_ostream & _218;

  <bb 2> :
  MEM[(struct  &)this_60(D)] ={v} {CLOBBER};
  std::__cxx11::basic_string<char>::basic_string (&vertexCode);
  std::__cxx11::basic_string<char>::basic_string (&fragmentCode);
  std::__cxx11::basic_string<char>::basic_string (&geometryCode);
  std::basic_ifstream<char>::basic_ifstream (&vShaderFile);

  <bb 3> :
  std::basic_ifstream<char>::basic_ifstream (&fShaderFile);

  <bb 4> :
  std::basic_ifstream<char>::basic_ifstream (&gShaderFile);

  <bb 5> :
  _1 = std::operator| (4, 1);
  std::basic_ios<char>::exceptions (&vShaderFile.D.92731, _1);

  <bb 6> :
  _2 = std::operator| (4, 1);
  std::basic_ios<char>::exceptions (&fShaderFile.D.92731, _2);

  <bb 7> :
  _3 = std::operator| (4, 1);
  std::basic_ios<char>::exceptions (&gShaderFile.D.92731, _3);

  <bb 8> :
  std::basic_ifstream<char>::open (&vShaderFile, vertexPath_74(D), 8);

  <bb 9> :
  std::basic_ifstream<char>::open (&fShaderFile, fragmentPath_76(D), 8);

  <bb 10> :
  _4 = std::operator| (16, 8);
  std::__cxx11::basic_stringstream<char>::basic_stringstream (&vShaderStream, _4);

  <bb 11> :
  _5 = std::operator| (16, 8);
  std::__cxx11::basic_stringstream<char>::basic_stringstream (&fShaderStream, _5);

  <bb 12> :
  _83 = std::basic_ifstream<char>::rdbuf (&vShaderFile);

  <bb 13> :
  _6 = _83;
  std::basic_ostream<char>::operator<< (&vShaderStream.D.94702.D.89313, _6);

  <bb 14> :
  _86 = std::basic_ifstream<char>::rdbuf (&fShaderFile);

  <bb 15> :
  _7 = _86;
  std::basic_ostream<char>::operator<< (&fShaderStream.D.94702.D.89313, _7);

  <bb 16> :
  std::basic_ifstream<char>::close (&vShaderFile);

  <bb 17> :
  std::basic_ifstream<char>::close (&fShaderFile);

  <bb 18> :
  D.95527 = std::__cxx11::basic_stringstream<char>::str (&vShaderStream); [return slot optimization]

  <bb 19> :
  std::__cxx11::basic_string<char>::operator= (&vertexCode, &D.95527);
  std::__cxx11::basic_string<char>::~basic_string (&D.95527);
  D.95527 ={v} {CLOBBER};
  D.95528 = std::__cxx11::basic_stringstream<char>::str (&fShaderStream); [return slot optimization]

  <bb 20> :
  std::__cxx11::basic_string<char>::operator= (&fragmentCode, &D.95528);
  std::__cxx11::basic_string<char>::~basic_string (&D.95528);
  D.95528 ={v} {CLOBBER};
  if (geometryPath_98(D) != 0B)
    goto <bb 21>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 21> :
  std::basic_ifstream<char>::open (&gShaderFile, geometryPath_98(D), 8);

  <bb 22> :
  _8 = std::operator| (16, 8);
  std::__cxx11::basic_stringstream<char>::basic_stringstream (&gShaderStream, _8);

  <bb 23> :
  _103 = std::basic_ifstream<char>::rdbuf (&gShaderFile);

  <bb 24> :
  _9 = _103;
  std::basic_ostream<char>::operator<< (&gShaderStream.D.94702.D.89313, _9);

  <bb 25> :
  std::basic_ifstream<char>::close (&gShaderFile);

  <bb 26> :
  D.95530 = std::__cxx11::basic_stringstream<char>::str (&gShaderStream); [return slot optimization]

  <bb 27> :
  std::__cxx11::basic_string<char>::operator= (&geometryCode, &D.95530);
  std::__cxx11::basic_string<char>::~basic_string (&D.95530);
  D.95530 ={v} {CLOBBER};
  std::__cxx11::basic_stringstream<char>::~basic_stringstream (&gShaderStream);
  gShaderStream ={v} {CLOBBER};

  <bb 28> :
  std::__cxx11::basic_stringstream<char>::~basic_stringstream (&fShaderStream);
  std::__cxx11::basic_stringstream<char>::~basic_stringstream (&vShaderStream);
  vShaderStream ={v} {CLOBBER};
  fShaderStream ={v} {CLOBBER};

  <bb 29> :
  _12 = std::__cxx11::basic_string<char>::c_str (&vertexCode);
  vShaderCode = _12;
  _13 = std::__cxx11::basic_string<char>::c_str (&fragmentCode);
  fShaderCode = _13;
  __glewCreateShader.32_14 = __glewCreateShader;
  _125 = __glewCreateShader.32_14 (35633);

  <bb 30> :
  vertex_126 = _125;
  __glewShaderSource.33_15 = __glewShaderSource;
  __glewShaderSource.33_15 (vertex_126, 1, &vShaderCode, 0B);

  <bb 31> :
  __glewCompileShader.34_16 = __glewCompileShader;
  __glewCompileShader.34_16 (vertex_126);

  <bb 32> :
  std::allocator<char>::allocator (&D.95534);
  std::__cxx11::basic_string<char>::basic_string (&D.95533, "VERTEX", &D.95534);

  <bb 33> :
  Shader::checkCompileErrors (this_60(D), vertex_126, &D.95533);

  <bb 34> :
  std::__cxx11::basic_string<char>::~basic_string (&D.95533);
  D.95533 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.95534);
  D.95534 ={v} {CLOBBER};
  __glewCreateShader.35_17 = __glewCreateShader;
  _137 = __glewCreateShader.35_17 (35632);

  <bb 35> :
  fragment_138 = _137;
  __glewShaderSource.36_18 = __glewShaderSource;
  __glewShaderSource.36_18 (fragment_138, 1, &fShaderCode, 0B);

  <bb 36> :
  __glewCompileShader.37_19 = __glewCompileShader;
  __glewCompileShader.37_19 (fragment_138);

  <bb 37> :
  std::allocator<char>::allocator (&D.95536);
  std::__cxx11::basic_string<char>::basic_string (&D.95535, "FRAGMENT", &D.95536);

  <bb 38> :
  Shader::checkCompileErrors (this_60(D), fragment_138, &D.95535);

  <bb 39> :
  std::__cxx11::basic_string<char>::~basic_string (&D.95535);
  D.95535 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.95536);
  D.95536 ={v} {CLOBBER};
  if (geometryPath_98(D) != 0B)
    goto <bb 40>; [INV]
  else
    goto <bb 46>; [INV]

  <bb 40> :
  _20 = std::__cxx11::basic_string<char>::c_str (&geometryCode);
  gShaderCode = _20;
  __glewCreateShader.38_21 = __glewCreateShader;
  _152 = __glewCreateShader.38_21 (36313);

  <bb 41> :
  geometry_153 = _152;
  __glewShaderSource.39_22 = __glewShaderSource;
  __glewShaderSource.39_22 (geometry_153, 1, &gShaderCode, 0B);

  <bb 42> :
  __glewCompileShader.40_23 = __glewCompileShader;
  __glewCompileShader.40_23 (geometry_153);

  <bb 43> :
  std::allocator<char>::allocator (&D.95539);
  std::__cxx11::basic_string<char>::basic_string (&D.95538, "GEOMETRY", &D.95539);

  <bb 44> :
  Shader::checkCompileErrors (this_60(D), geometry_153, &D.95538);

  <bb 45> :
  std::__cxx11::basic_string<char>::~basic_string (&D.95538);
  D.95538 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.95539);
  D.95539 ={v} {CLOBBER};
  gShaderCode ={v} {CLOBBER};

  <bb 46> :
  # geometry_38 = PHI <geometry_148(D)(39), geometry_153(45)>
  __glewCreateProgram.41_24 = __glewCreateProgram;
  _170 = __glewCreateProgram.41_24 ();

  <bb 47> :
  _25 = _170;
  this_60(D)->ID = _25;
  __glewAttachShader.42_26 = __glewAttachShader;
  _27 = this_60(D)->ID;
  __glewAttachShader.42_26 (_27, vertex_126);

  <bb 48> :
  __glewAttachShader.43_28 = __glewAttachShader;
  _29 = this_60(D)->ID;
  __glewAttachShader.43_28 (_29, fragment_138);

  <bb 49> :
  if (geometryPath_98(D) != 0B)
    goto <bb 50>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 50> :
  __glewAttachShader.44_30 = __glewAttachShader;
  _31 = this_60(D)->ID;
  __glewAttachShader.44_30 (_31, geometry_38);

  <bb 51> :

  <bb 52> :
  __glewLinkProgram.45_32 = __glewLinkProgram;
  _33 = this_60(D)->ID;
  __glewLinkProgram.45_32 (_33);

  <bb 53> :
  std::allocator<char>::allocator (&D.95541);
  std::__cxx11::basic_string<char>::basic_string (&D.95540, "PROGRAM", &D.95541);

  <bb 54> :
  _34 = this_60(D)->ID;
  Shader::checkCompileErrors (this_60(D), _34, &D.95540);

  <bb 55> :
  std::__cxx11::basic_string<char>::~basic_string (&D.95540);
  D.95540 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.95541);
  D.95541 ={v} {CLOBBER};
  __glewDeleteShader.46_35 = __glewDeleteShader;
  __glewDeleteShader.46_35 (vertex_126);

  <bb 56> :
  __glewDeleteShader.47_36 = __glewDeleteShader;
  __glewDeleteShader.47_36 (fragment_138);

  <bb 57> :
  if (geometryPath_98(D) != 0B)
    goto <bb 58>; [INV]
  else
    goto <bb 60>; [INV]

  <bb 58> :
  __glewDeleteShader.48_37 = __glewDeleteShader;
  __glewDeleteShader.48_37 (geometry_38);

  <bb 59> :

  <bb 60> :
  std::basic_ifstream<char>::~basic_ifstream (&gShaderFile);
  std::basic_ifstream<char>::~basic_ifstream (&fShaderFile);
  std::basic_ifstream<char>::~basic_ifstream (&vShaderFile);
  std::__cxx11::basic_string<char>::~basic_string (&geometryCode);
  std::__cxx11::basic_string<char>::~basic_string (&fragmentCode);
  std::__cxx11::basic_string<char>::~basic_string (&vertexCode);
  vertexCode ={v} {CLOBBER};
  fragmentCode ={v} {CLOBBER};
  geometryCode ={v} {CLOBBER};
  vShaderFile ={v} {CLOBBER};
  fShaderFile ={v} {CLOBBER};
  gShaderFile ={v} {CLOBBER};
  vShaderCode ={v} {CLOBBER};
  fShaderCode ={v} {CLOBBER};
  return;

  <bb 61> :
<L13>:
  std::__cxx11::basic_stringstream<char>::~basic_stringstream (&gShaderStream);
  resx 17

  <bb 62> :
<L14>:
  resx 16

  <bb 63> :
<L15>:
  gShaderStream ={v} {CLOBBER};
  std::__cxx11::basic_stringstream<char>::~basic_stringstream (&fShaderStream);
  resx 11

  <bb 64> :
<L16>:
  std::__cxx11::basic_stringstream<char>::~basic_stringstream (&vShaderStream);
  resx 10

  <bb 65> :
<L17>:
  resx 9

  <bb 66> :
<L18>:
  vShaderStream ={v} {CLOBBER};
  fShaderStream ={v} {CLOBBER};
  _236 = __builtin_eh_filter (8);
  switch (_236) <default: <L45> [INV], case 1: <L19> [INV]>

  <bb 67> :
<L45>:
  resx 8

  <bb 68> :
<L19>:
  _10 = __builtin_eh_pointer (8);
  _215 = __cxa_begin_catch (_10);
  e_216 = _215;
  _218 = std::operator<< <std::char_traits<char> > (&cout, "ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ");

  <bb 69> :
  _11 = _218;
  std::basic_ostream<char>::operator<< (_11, endl);

  <bb 70> :
  __cxa_end_catch ();
  goto <bb 29>; [INV]

  <bb 71> :
<L20>:
  __cxa_end_catch ();
  resx 25

  <bb 72> :
<L21>:
  std::__cxx11::basic_string<char>::~basic_string (&D.95533);
  resx 30

  <bb 73> :
<L22>:
  resx 29

  <bb 74> :
<L23>:
  D.95533 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.95534);
  resx 28

  <bb 75> :
<L24>:
  resx 27

  <bb 76> :
<L25>:
  std::__cxx11::basic_string<char>::~basic_string (&D.95535);
  resx 38

  <bb 77> :
<L26>:
  resx 37

  <bb 78> :
<L27>:
  D.95535 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.95536);
  resx 36

  <bb 79> :
<L28>:
  resx 35

  <bb 80> :
<L29>:
  std::__cxx11::basic_string<char>::~basic_string (&D.95538);
  resx 47

  <bb 81> :
<L30>:
  resx 46

  <bb 82> :
<L31>:
  D.95538 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.95539);
  resx 45

  <bb 83> :
<L32>:
  resx 44

  <bb 84> :
<L33>:
  resx 43

  <bb 85> :
<L34>:
  std::__cxx11::basic_string<char>::~basic_string (&D.95540);
  resx 56

  <bb 86> :
<L35>:
  resx 55

  <bb 87> :
<L36>:
  D.95540 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.95541);
  resx 54

  <bb 88> :
<L37>:
  resx 53

  <bb 89> :
<L38>:
  D.95541 ={v} {CLOBBER};
  D.95539 ={v} {CLOBBER};
  gShaderCode ={v} {CLOBBER};
  D.95536 ={v} {CLOBBER};
  D.95534 ={v} {CLOBBER};
  std::basic_ifstream<char>::~basic_ifstream (&gShaderFile);
  resx 7

  <bb 90> :
<L39>:
  std::basic_ifstream<char>::~basic_ifstream (&fShaderFile);
  resx 6

  <bb 91> :
<L40>:
  std::basic_ifstream<char>::~basic_ifstream (&vShaderFile);
  resx 5

  <bb 92> :
<L41>:
  std::__cxx11::basic_string<char>::~basic_string (&geometryCode);
  resx 4

  <bb 93> :
<L42>:
  std::__cxx11::basic_string<char>::~basic_string (&fragmentCode);
  resx 3

  <bb 94> :
<L43>:
  std::__cxx11::basic_string<char>::~basic_string (&vertexCode);
  resx 2

  <bb 95> :
<L44>:
  resx 1

}



;; Function Shader::use (_ZN6Shader3useEv, funcdef_no=3519, decl_uid=95256, cgraph_uid=860, symbol_order=862)

Shader::use (struct Shader * const this)
{
  void (*<T696>) (GLuint) __glewUseProgram.56_1;
  unsigned int _2;

  <bb 2> :
  __glewUseProgram.56_1 = __glewUseProgram;
  _2 = this_4(D)->ID;
  __glewUseProgram.56_1 (_2);
  return;

}



;; Function glm::mat<4, 4, float, (glm::qualifier)0>::length (_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv, funcdef_no=3537, decl_uid=97333, cgraph_uid=876, symbol_order=878)

glm::mat<4, 4, float, (glm::qualifier)0>::length ()
{
  length_type D.105667;
  length_type _1;

  <bb 2> :
  _1 = 4;

  <bb 3> :
<L0>:
  return _1;

}



;; Function glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi, funcdef_no=3536, decl_uid=97337, cgraph_uid=877, symbol_order=879)

glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (const struct mat * const this, length_type i)
{
  const struct col_type & D.105665;
  bool iftmp.58;
  int _1;
  bool iftmp.58_7;
  bool iftmp.58_8;
  const struct col_type & _10;

  <bb 2> :
  _1 = glm::mat<4, 4, float, (glm::qualifier)0>::length ();
  if (i_5(D) < _1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _assert ("i < this->length()", "C:/glm/glm/detail/type_mat4x4.inl", 298);
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.58_8 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.58_7 = 0;

  <bb 6> :
  _10 = &this_9(D)->value[i_5(D)];

  <bb 7> :
<L4>:
  return _10;

}



;; Function Shader::setMat4 (_ZNK6Shader7setMat4ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN3glm3matILi4ELi4EfLNS8_9qualifierE0EEE, funcdef_no=3535, decl_uid=95310, cgraph_uid=878, symbol_order=880)

Shader::setMat4 (const struct Shader * const this, const struct string & name, const struct mat4 & mat)
{
  int D.105791;
  const float & D.105790;
  const struct col_type & D.105789;
  void (*<T71e>) (GLint, GLsizei, GLboolean, const GLfloat *) __glewUniformMatrix4fv.73_1;
  const struct col_type & _2;
  const float & _3;
  GLint (*<T6ba>) (GLuint, const GLchar *) __glewGetUniformLocation.74_4;
  const char * _5;
  unsigned int _6;
  int _7;
  const struct col_type & _11;
  const float & _13;
  int _18;

  <bb 2> :
  __glewUniformMatrix4fv.73_1 = __glewUniformMatrix4fv;
  _11 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (mat_9(D), 0);
  _2 = _11;
  _13 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_2, 0);
  _3 = _13;
  __glewGetUniformLocation.74_4 = __glewGetUniformLocation;
  _5 = std::__cxx11::basic_string<char>::c_str (name_14(D));
  _6 = this_16(D)->ID;
  _18 = __glewGetUniformLocation.74_4 (_6, _5);
  _7 = _18;
  __glewUniformMatrix4fv.73_1 (_7, 1, 0, _3);
  return;

}



;; Function Shader::checkCompileErrors (_ZN6Shader18checkCompileErrorsEjNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, funcdef_no=3538, decl_uid=95314, cgraph_uid=879, symbol_order=881)

Shader::checkCompileErrors (struct Shader * const this, GLuint shader, struct string & restrict type)
{
  struct basic_ostream & D.105504;
  struct basic_ostream & D.105503;
  struct basic_ostream & D.105502;
  struct basic_ostream & D.105501;
  struct basic_ostream & D.105500;
  struct basic_ostream & D.105499;
  struct basic_ostream & D.105498;
  struct basic_ostream & D.105497;
  struct basic_ostream & D.105496;
  struct basic_ostream & D.105495;
  bool D.105494;
  GLchar infoLog[1024];
  GLint success;
  bool retval.49;
  void (*<T677>) (GLuint, GLenum, GLint *) __glewGetShaderiv.50_1;
  int success.51_2;
  void (*<T6bf>) (GLuint, GLsizei, GLsizei *, GLchar *) __glewGetShaderInfoLog.52_3;
  struct basic_ostream & _4;
  struct basic_ostream & _5;
  struct basic_ostream & _6;
  struct basic_ostream & _7;
  struct basic_ostream & _8;
  void (*<T677>) (GLuint, GLenum, GLint *) __glewGetProgramiv.53_9;
  int success.54_10;
  void (*<T6bf>) (GLuint, GLsizei, GLsizei *, GLchar *) __glewGetProgramInfoLog.55_11;
  struct basic_ostream & _12;
  struct basic_ostream & _13;
  struct basic_ostream & _14;
  struct basic_ostream & _15;
  struct basic_ostream & _16;
  bool _22;
  bool retval.49_23;
  struct basic_ostream & _28;
  struct basic_ostream & _30;
  struct basic_ostream & _32;
  struct basic_ostream & _34;
  struct basic_ostream & _36;
  struct basic_ostream & _41;
  struct basic_ostream & _43;
  struct basic_ostream & _45;
  struct basic_ostream & _47;
  struct basic_ostream & _49;

  <bb 2> :
  _22 = std::operator!=<char, std::char_traits<char>, std::allocator<char> > (type_20(D), "PROGRAM");

  <bb 3> :
  retval.49_23 = _22;
  if (retval.49_23 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  __glewGetShaderiv.50_1 = __glewGetShaderiv;
  __glewGetShaderiv.50_1 (shader_24(D), 35713, &success);

  <bb 5> :
  success.51_2 = success;
  if (success.51_2 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 6> :
  __glewGetShaderInfoLog.52_3 = __glewGetShaderInfoLog;
  __glewGetShaderInfoLog.52_3 (shader_24(D), 1024, 0B, &infoLog);

  <bb 7> :
  _28 = std::operator<< <std::char_traits<char> > (&cout, "ERROR::SHADER_COMPILATION_ERROR of type: ");

  <bb 8> :
  _4 = _28;
  _30 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (_4, type_20(D));

  <bb 9> :
  _5 = _30;
  _32 = std::operator<< <std::char_traits<char> > (_5, "\n");

  <bb 10> :
  _6 = _32;
  _34 = std::operator<< <std::char_traits<char> > (_6, &infoLog);

  <bb 11> :
  _7 = _34;
  _36 = std::operator<< <std::char_traits<char> > (_7, "\n -- --------------------------------------------------- -- ");

  <bb 12> :
  _8 = _36;
  std::basic_ostream<char>::operator<< (_8, endl);

  <bb 13> :
  goto <bb 24>; [INV]

  <bb 14> :
  __glewGetProgramiv.53_9 = __glewGetProgramiv;
  __glewGetProgramiv.53_9 (shader_24(D), 35714, &success);

  <bb 15> :
  success.54_10 = success;
  if (success.54_10 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 16> :
  __glewGetProgramInfoLog.55_11 = __glewGetProgramInfoLog;
  __glewGetProgramInfoLog.55_11 (shader_24(D), 1024, 0B, &infoLog);

  <bb 17> :
  _41 = std::operator<< <std::char_traits<char> > (&cout, "ERROR::PROGRAM_LINKING_ERROR of type: ");

  <bb 18> :
  _12 = _41;
  _43 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (_12, type_20(D));

  <bb 19> :
  _13 = _43;
  _45 = std::operator<< <std::char_traits<char> > (_13, "\n");

  <bb 20> :
  _14 = _45;
  _47 = std::operator<< <std::char_traits<char> > (_14, &infoLog);

  <bb 21> :
  _15 = _47;
  _49 = std::operator<< <std::char_traits<char> > (_15, "\n -- --------------------------------------------------- -- ");

  <bb 22> :
  _16 = _49;
  std::basic_ostream<char>::operator<< (_16, endl);

  <bb 23> :

  <bb 24> :
  success ={v} {CLOBBER};
  infoLog ={v} {CLOBBER};
  return;

  <bb 25> :
<L9>:
  resx 1

}



;; Function glm::radians<float> (_ZN3glm7radiansIfEET_S1_, funcdef_no=3555, decl_uid=100834, cgraph_uid=895, symbol_order=899)

glm::radians<float> (float degrees)
{
  float D.105693;
  float _2;

  <bb 2> :
  _2 = degrees_1(D) * 1.745329238474369049072265625e-2;

  <bb 3> :
<L0>:
  return _2;

}



;; Function glm::vec<3, float, (glm::qualifier)0>::vec (_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff, funcdef_no=3558, decl_uid=96468, cgraph_uid=898, symbol_order=902)

glm::vec<3, float, (glm::qualifier)0>::vec (struct vec * const this, float _x, float _y, float _z)
{
  <bb 2> :
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->D.95554.x = _x_4(D);
  this_2(D)->D.95560.y = _y_6(D);
  this_2(D)->D.95566.z = _z_8(D);
  return;

}



;; Function main (main, funcdef_no=3539, decl_uid=97940, cgraph_uid=899, symbol_order=903)

main ()
{
  float & D.105415;
  struct col_type & D.105414;
  float * D.105413;
  int D.105412;
  int D.105411;
  int D.105408;
  long long unsigned int D.105407;
  struct FILE * D.105406;
  struct basic_ostream & D.105405;
  const GLubyte * D.105404;
  struct basic_ostream & D.105403;
  struct basic_ostream & D.105402;
  unsigned int D.105401;
  struct basic_ostream & D.105400;
  struct GLFWwindow * D.105399;
  unsigned int viewLoc;
  unsigned int modelLoc;
  struct mat4 projection;
  struct mat4 view;
  struct mat4 model;
  int validarNumerico;
  unsigned int VAO;
  unsigned int VBO;
  float vertices[0:D.105380] [value-expr: *vertices.3];
  struct FILE * arqin;
  char * pch;
  char linha[100];
  char c;
  int i;
  int linhas;
  struct Shader ourShader;
  struct GLFWwindow * window;
  void * saved_stack.31;
  struct allocator D.100889;
  const struct string D.100890;
  struct vec3 D.100870;
  struct vec3 D.100851;
  bool retval.20;
  bool retval.4;
  float[0:D.105380] * vertices.3;
  sizetype D.105384;
  bitsizetype D.105383;
  sizetype D.105382;
  bitsizetype D.105381;
  sizetype D.105380;
  ssizetype D.105379;
  bool retval.1;
  bool retval.0;
  int D.105366;
  struct basic_ostream & _1;
  unsigned int _2;
  struct basic_ostream & _3;
  struct basic_ostream & _4;
  const GLubyte * _5;
  struct basic_ostream & _6;
  long long unsigned int _7;
  char c.2_8;
  int _9;
  ssizetype _10;
  sizetype _12;
  sizetype _13;
  bitsizetype _14;
  sizetype _16;
  sizetype _17;
  sizetype _19;
  sizetype _20;
  bitsizetype _21;
  sizetype _23;
  sizetype _24;
  int _26;
  double _27;
  float[0:D.105380] * vertices.5_28;
  long long unsigned int _29;
  long long unsigned int _30;
  float * _31;
  float _32;
  float _33;
  double _34;
  void (*<T665>) (GLsizei, GLuint *) __glewGenVertexArrays.6_35;
  void (*<T665>) (GLsizei, GLuint *) __glewGenBuffers.7_36;
  void (*<T696>) (GLuint) __glewBindVertexArray.8_37;
  unsigned int VAO.9_38;
  void (*<T652>) (GLenum, GLuint) __glewBindBuffer.10_39;
  unsigned int VBO.11_40;
  void (*<T658>) (GLenum, GLsizeiptr, const void *, GLenum) __glewBufferData.12_41;
  float[0:D.105380] * vertices.13_42;
  sizetype _43;
  sizetype _44;
  sizetype _45;
  long long int _46;
  void (*<T77f>) (GLuint, GLint, GLenum, GLboolean, GLsizei, const void *) __glewVertexAttribPointer.14_47;
  void (*<T696>) (GLuint) __glewEnableVertexAttribArray.15_48;
  void (*<T77f>) (GLuint, GLint, GLenum, GLboolean, GLsizei, const void *) __glewVertexAttribPointer.16_49;
  void (*<T696>) (GLuint) __glewEnableVertexAttribArray.17_50;
  void (*<T77f>) (GLuint, GLint, GLenum, GLboolean, GLsizei, const void *) __glewVertexAttribPointer.18_51;
  void (*<T696>) (GLuint) __glewEnableVertexAttribArray.19_52;
  int _53;
  float _54;
  float _55;
  GLint (*<T6ba>) (GLuint, const GLchar *) __glewGetUniformLocation.21_56;
  unsigned int _57;
  int _58;
  GLint (*<T6ba>) (GLuint, const GLchar *) __glewGetUniformLocation.22_59;
  unsigned int _60;
  int _61;
  void (*<T71e>) (GLint, GLsizei, GLboolean, const GLfloat *) __glewUniformMatrix4fv.23_62;
  float * _63;
  int modelLoc.24_64;
  void (*<T71e>) (GLint, GLsizei, GLboolean, const GLfloat *) __glewUniformMatrix4fv.25_65;
  struct col_type & _66;
  float & _67;
  int viewLoc.26_68;
  void (*<T696>) (GLuint) __glewBindVertexArray.27_69;
  unsigned int VAO.28_70;
  void (*<T660>) (GLsizei, const GLuint *) __glewDeleteVertexArrays.29_71;
  void (*<T660>) (GLsizei, const GLuint *) __glewDeleteBuffers.30_72;
  int _74;
  void * saved_stack.31_87;
  struct GLFWwindow * _93;
  struct basic_ostream & _96;
  int _99;
  unsigned int _103;
  bool retval.0_104;
  struct basic_ostream & _106;
  struct basic_ostream & _109;
  const GLubyte * _112;
  struct basic_ostream & _114;
  struct FILE * _121;
  long long unsigned int _126;
  bool retval.1_127;
  ssizetype _130;
  bitsizetype _132;
  sizetype _133;
  bitsizetype _134;
  sizetype _135;
  bool retval.4_142;
  int _166;
  bool retval.20_167;
  int _230;
  int _233;
  float * _236;
  struct col_type & _239;
  float & _241;
  int _269;

  <bb 2> :
  saved_stack.31_87 = __builtin_stack_save ();
  glfwInit ();

  <bb 3> :
  glfwWindowHint (139266, 3);

  <bb 4> :
  glfwWindowHint (139267, 3);

  <bb 5> :
  glfwWindowHint (139272, 204801);

  <bb 6> :
  _93 = glfwCreateWindow (800, 600, "OPenGL : TDE 2 - 3D", 0B, 0B);

  <bb 7> :
  window_94 = _93;
  if (window_94 == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  _96 = std::operator<< <std::char_traits<char> > (&cout, "Failed to create GLFW window");

  <bb 9> :
  _1 = _96;
  std::basic_ostream<char>::operator<< (_1, endl);

  <bb 10> :
  glfwTerminate ();

  <bb 11> :
  _99 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 86>; [INV]

  <bb 12> :
  glfwMakeContextCurrent (window_94);

  <bb 13> :
  glfwSetFramebufferSizeCallback (window_94, framebuffer_size_callback);

  <bb 14> :
  _103 = glewInit ();

  <bb 15> :
  _2 = _103;
  retval.0_104 = _2 != 0;
  if (retval.0_104 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 16> :
  _106 = std::operator<< <std::char_traits<char> > (&cout, "Ocorreu um erro iniciando GLEW!");

  <bb 17> :
  _3 = _106;
  std::basic_ostream<char>::operator<< (_3, endl);

  <bb 18> :
  goto <bb 24>; [INV]

  <bb 19> :
  _109 = std::operator<< <std::char_traits<char> > (&cout, "GLEW OK!");

  <bb 20> :
  _4 = _109;
  std::basic_ostream<char>::operator<< (_4, endl);

  <bb 21> :
  _112 = glGetString (7938);

  <bb 22> :
  _5 = _112;
  _114 = std::operator<< <std::char_traits<char> > (&cout, _5);

  <bb 23> :
  _6 = _114;
  std::basic_ostream<char>::operator<< (_6, endl);

  <bb 24> :
  glEnable (2929);

  <bb 25> :
  Shader::Shader (&ourShader, "vertex.glsl", "fragment.glsl", 0B);

  <bb 26> :
  linhas_118 = 1;
  i_119 = 0;
  _121 = fopen ("casa.csv", "rt");

  <bb 27> :
  arqin_122 = _121;
  if (arqin_122 == 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 28> :
  printf ("Erro na abertura de %s %d\n", "casa.csv", 8);

  <bb 29> :
  exit (0);

  <bb 30> :
  # linhas_25 = PHI <linhas_118(27), linhas_22(34)>
  _126 = fread (&c, 1, 1, arqin_122);

  <bb 31> :
  _7 = _126;
  retval.1_127 = _7 != 0;
  if (retval.1_127 != 0)
    goto <bb 32>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 32> :
  c.2_8 = c;
  if (c.2_8 == 10)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  linhas_128 = linhas_25 + 1;

  <bb 34> :
  # linhas_22 = PHI <linhas_25(32), linhas_128(33)>
  goto <bb 30>; [INV]

  <bb 35> :
  printf ("Linhas: %d \n", linhas_25);

  <bb 36> :
  _9 = linhas_25 * 8;
  _10 = (ssizetype) _9;
  _130 = _10 + -1;
  _131 = (sizetype) _130;
  _12 = (sizetype) _130;
  _13 = _12 + 1;
  _14 = (bitsizetype) _13;
  _132 = _14 * 32;
  _16 = (sizetype) _130;
  _17 = _16 + 1;
  _133 = _17 * 4;
  _19 = (sizetype) _130;
  _20 = _19 + 1;
  _21 = (bitsizetype) _20;
  _134 = _21 * 32;
  _23 = (sizetype) _130;
  _24 = _23 + 1;
  _135 = _24 * 4;
  vertices.3_137 = __builtin_alloca_with_align (_135, 32);
  fclose (arqin_122);

  <bb 37> :
  i_139 = 0;
  fopen ("casa.csv", "rt");

  <bb 38> :
  # i_18 = PHI <i_139(37), i_15(46)>
  _26 = feof (arqin_122);
  retval.4_142 = _26 == 0;
  if (retval.4_142 != 0)
    goto <bb 39>; [INV]
  else
    goto <bb 47>; [INV]

  <bb 39> :
  fgets (&linha, 100, arqin_122);

  <bb 40> :
  pch_145 = strtok (&linha, ";");

  <bb 41> :
  # i_15 = PHI <i_18(40), i_11(45)>
  # pch_73 = PHI <pch_145(40), pch_152(45)>
  if (pch_73 == 0B)
    goto <bb 46>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 42> :
  validarNumerico_146 = strcmp (pch_73, "\n");
  if (validarNumerico_146 != 0)
    goto <bb 43>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 43> :
  _27 = atof (pch_73);
  vertices.5_28 = vertices.3_137;
  _29 = (long long unsigned int) i_15;
  _30 = _29 * 4;
  _31 = vertices.5_28 + _30;
  _32 = (float) _27;
  *_31 = _32;
  _33 = *vertices.3_137[i_15];
  _34 = (double) _33;
  printf ("vertices[%d]: %f\n ", i_15, _34);

  <bb 44> :
  i_150 = i_15 + 1;

  <bb 45> :
  # i_11 = PHI <i_15(42), i_150(44)>
  pch_152 = strtok (0B, ";");
  goto <bb 41>; [INV]

  <bb 46> :
  goto <bb 38>; [INV]

  <bb 47> :
  fclose (arqin_122);

  <bb 48> :
  __glewGenVertexArrays.6_35 = __glewGenVertexArrays;
  __glewGenVertexArrays.6_35 (1, &VAO);

  <bb 49> :
  __glewGenBuffers.7_36 = __glewGenBuffers;
  __glewGenBuffers.7_36 (1, &VBO);

  <bb 50> :
  __glewBindVertexArray.8_37 = __glewBindVertexArray;
  VAO.9_38 = VAO;
  __glewBindVertexArray.8_37 (VAO.9_38);

  <bb 51> :
  __glewBindBuffer.10_39 = __glewBindBuffer;
  VBO.11_40 = VBO;
  __glewBindBuffer.10_39 (34962, VBO.11_40);

  <bb 52> :
  __glewBufferData.12_41 = __glewBufferData;
  vertices.13_42 = vertices.3_137;
  _43 = (sizetype) _130;
  _44 = _43 + 1;
  _45 = _44 * 4;
  _46 = (long long int) _45;
  __glewBufferData.12_41 (34962, _46, vertices.13_42, 35044);

  <bb 53> :
  __glewVertexAttribPointer.14_47 = __glewVertexAttribPointer;
  __glewVertexAttribPointer.14_47 (0, 3, 5126, 0, 32, 0B);

  <bb 54> :
  __glewEnableVertexAttribArray.15_48 = __glewEnableVertexAttribArray;
  __glewEnableVertexAttribArray.15_48 (0);

  <bb 55> :
  __glewVertexAttribPointer.16_49 = __glewVertexAttribPointer;
  __glewVertexAttribPointer.16_49 (1, 3, 5126, 0, 32, 12B);

  <bb 56> :
  __glewEnableVertexAttribArray.17_50 = __glewEnableVertexAttribArray;
  __glewEnableVertexAttribArray.17_50 (1);

  <bb 57> :
  __glewVertexAttribPointer.18_51 = __glewVertexAttribPointer;
  __glewVertexAttribPointer.18_51 (2, 2, 5126, 0, 32, 12B);

  <bb 58> :
  __glewEnableVertexAttribArray.19_52 = __glewEnableVertexAttribArray;
  __glewEnableVertexAttribArray.19_52 (2);

  <bb 59> :
  _166 = glfwWindowShouldClose (window_94);

  <bb 60> :
  _53 = _166;
  retval.20_167 = _53 == 0;
  if (retval.20_167 != 0)
    goto <bb 61>; [INV]
  else
    goto <bb 82>; [INV]

  <bb 61> :
  processInput (window_94);

  <bb 62> :
  glClearColor (0.0, 0.0, 0.0, 1.0e+0);

  <bb 63> :
  glClear (16640);

  <bb 64> :
  Shader::use (&ourShader);

  <bb 65> :
  model.value[0].D.51351.x = 1.0e+0;
  model.value[0].D.51357.y = 0.0;
  model.value[0].D.51363.z = 0.0;
  model.value[0].D.51369.w = 0.0;
  model.value[1].D.51351.x = 0.0;
  model.value[1].D.51357.y = 1.0e+0;
  model.value[1].D.51363.z = 0.0;
  model.value[1].D.51369.w = 0.0;
  model.value[2].D.51351.x = 0.0;
  model.value[2].D.51357.y = 0.0;
  model.value[2].D.51363.z = 1.0e+0;
  model.value[2].D.51369.w = 0.0;
  model.value[3].D.51351.x = 0.0;
  model.value[3].D.51357.y = 0.0;
  model.value[3].D.51363.z = 0.0;
  model.value[3].D.51369.w = 1.0e+0;
  view.value[0].D.51351.x = 1.0e+0;
  view.value[0].D.51357.y = 0.0;
  view.value[0].D.51363.z = 0.0;
  view.value[0].D.51369.w = 0.0;
  view.value[1].D.51351.x = 0.0;
  view.value[1].D.51357.y = 1.0e+0;
  view.value[1].D.51363.z = 0.0;
  view.value[1].D.51369.w = 0.0;
  view.value[2].D.51351.x = 0.0;
  view.value[2].D.51357.y = 0.0;
  view.value[2].D.51363.z = 1.0e+0;
  view.value[2].D.51369.w = 0.0;
  view.value[3].D.51351.x = 0.0;
  view.value[3].D.51357.y = 0.0;
  view.value[3].D.51363.z = 0.0;
  view.value[3].D.51369.w = 1.0e+0;
  projection.value[0].D.51351.x = 1.0e+0;
  projection.value[0].D.51357.y = 0.0;
  projection.value[0].D.51363.z = 0.0;
  projection.value[0].D.51369.w = 0.0;
  projection.value[1].D.51351.x = 0.0;
  projection.value[1].D.51357.y = 1.0e+0;
  projection.value[1].D.51363.z = 0.0;
  projection.value[1].D.51369.w = 0.0;
  projection.value[2].D.51351.x = 0.0;
  projection.value[2].D.51357.y = 0.0;
  projection.value[2].D.51363.z = 1.0e+0;
  projection.value[2].D.51369.w = 0.0;
  projection.value[3].D.51351.x = 0.0;
  projection.value[3].D.51357.y = 0.0;
  projection.value[3].D.51363.z = 0.0;
  projection.value[3].D.51369.w = 1.0e+0;
  glm::vec<3, float, (glm::qualifier)0>::vec (&D.100851, 1.00000001490116119384765625e-1, 0.0, 0.0);
  _54 = glm::radians<float> (5.5e+1);
  model = glm::rotate<float, (glm::qualifier)0> (&model, _54, &D.100851);

  <bb 66> :
  D.100851 ={v} {CLOBBER};
  glm::vec<3, float, (glm::qualifier)0>::vec (&D.100870, 0.0, 0.0, -3.0e+0);
  view = glm::translate<float, (glm::qualifier)0> (&view, &D.100870);

  <bb 67> :
  D.100870 ={v} {CLOBBER};
  _55 = glm::radians<float> (4.5e+1);
  projection = glm::perspective<float> (_55, 1.33333337306976318359375e+0, 1.00000001490116119384765625e-1, 1.0e+2);

  <bb 68> :
  __glewGetUniformLocation.21_56 = __glewGetUniformLocation;
  _57 = ourShader.ID;
  _230 = __glewGetUniformLocation.21_56 (_57, "model");

  <bb 69> :
  _58 = _230;
  modelLoc_231 = (unsigned int) _58;
  __glewGetUniformLocation.22_59 = __glewGetUniformLocation;
  _60 = ourShader.ID;
  _233 = __glewGetUniformLocation.22_59 (_60, "view");

  <bb 70> :
  _61 = _233;
  viewLoc_234 = (unsigned int) _61;
  __glewUniformMatrix4fv.23_62 = __glewUniformMatrix4fv;
  _236 = glm::value_ptr<float, (glm::qualifier)0> (&model);

  <bb 71> :
  _63 = _236;
  modelLoc.24_64 = (int) modelLoc_231;
  __glewUniformMatrix4fv.23_62 (modelLoc.24_64, 1, 0, _63);

  <bb 72> :
  __glewUniformMatrix4fv.25_65 = __glewUniformMatrix4fv;
  _239 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&view, 0);

  <bb 73> :
  _66 = _239;
  _241 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_66, 0);

  <bb 74> :
  _67 = _241;
  viewLoc.26_68 = (int) viewLoc_234;
  __glewUniformMatrix4fv.25_65 (viewLoc.26_68, 1, 0, _67);

  <bb 75> :
  std::allocator<char>::allocator (&D.100889);
  std::__cxx11::basic_string<char>::basic_string (&D.100890, "projection", &D.100889);

  <bb 76> :
  Shader::setMat4 (&ourShader, &D.100890, &projection);

  <bb 77> :
  std::__cxx11::basic_string<char>::~basic_string (&D.100890);
  D.100890 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.100889);
  D.100889 ={v} {CLOBBER};
  __glewBindVertexArray.27_69 = __glewBindVertexArray;
  VAO.28_70 = VAO;
  __glewBindVertexArray.27_69 (VAO.28_70);

  <bb 78> :
  glDrawArrays (4, 0, 36);

  <bb 79> :
  glfwSwapBuffers (window_94);

  <bb 80> :
  glfwPollEvents ();

  <bb 81> :
  model ={v} {CLOBBER};
  view ={v} {CLOBBER};
  projection ={v} {CLOBBER};
  goto <bb 59>; [INV]

  <bb 82> :
  __glewDeleteVertexArrays.29_71 = __glewDeleteVertexArrays;
  __glewDeleteVertexArrays.29_71 (1, &VAO);

  <bb 83> :
  __glewDeleteBuffers.30_72 = __glewDeleteBuffers;
  __glewDeleteBuffers.30_72 (1, &VBO);

  <bb 84> :
  glfwTerminate ();

  <bb 85> :
  _269 = 0;

  <bb 86> :
  # _74 = PHI <_99(11), _269(85)>
  __builtin_stack_restore (saved_stack.31_87);
  ourShader ={v} {CLOBBER};
  c ={v} {CLOBBER};
  linha ={v} {CLOBBER};
  VBO ={v} {CLOBBER};
  VAO ={v} {CLOBBER};

  <bb 87> :
<L26>:
  return _74;

  <bb 88> :
<L27>:
  resx 3

  <bb 89> :
<L28>:
  resx 5

  <bb 90> :
<L29>:
  std::__cxx11::basic_string<char>::~basic_string (&D.100890);
  resx 10

  <bb 91> :
<L30>:
  resx 9

  <bb 92> :
<L31>:
  D.100890 ={v} {CLOBBER};
  std::allocator<char>::~allocator (&D.100889);
  resx 8

  <bb 93> :
<L32>:
  resx 7

  <bb 94> :
<L33>:
  resx 2

  <bb 95> :
<L34>:
  __builtin_stack_restore (saved_stack.31_87);
  resx 1

}



;; Function processInput (_Z12processInputP10GLFWwindow, funcdef_no=3559, decl_uid=97937, cgraph_uid=900, symbol_order=904)

processInput (struct GLFWwindow * window)
{
  int D.105804;
  bool retval.76;
  int _1;
  int _6;
  bool retval.76_7;

  <bb 2> :
  _6 = glfwGetKey (window_4(D), 256);
  _1 = _6;
  retval.76_7 = _1 == 1;
  if (retval.76_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  glfwSetWindowShouldClose (window_4(D), 1);

  <bb 4> :
  return;

}



;; Function framebuffer_size_callback (_Z25framebuffer_size_callbackP10GLFWwindowii, funcdef_no=3560, decl_uid=97935, cgraph_uid=901, symbol_order=905)

framebuffer_size_callback (struct GLFWwindow * window, int width, int height)
{
  <bb 2> :
  glViewport (0, 0, width_2(D), height_3(D));
  return;

}



;; Function glm::detail::compute_abs<float, true>::call (_ZN3glm6detail11compute_absIfLb1EE4callEf, funcdef_no=3606, decl_uid=59504, cgraph_uid=947, symbol_order=951)

glm::detail::compute_abs<float, true>::call (float x)
{
  float iftmp.63;
  float D.105721;
  float iftmp.63_1;
  float iftmp.63_3;
  float iftmp.63_4;
  float _5;

  <bb 2> :
  if (x_2(D) >= 0.0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.63_3 = x_2(D);
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.63_4 = -x_2(D);

  <bb 5> :
  # iftmp.63_1 = PHI <iftmp.63_3(3), iftmp.63_4(4)>
  _5 = iftmp.63_1;

  <bb 6> :
<L3>:
  return _5;

}



;; Function glm::vec<3, float, (glm::qualifier)0>::length (_ZN3glm3vecILi3EfLNS_9qualifierE0EE6lengthEv, funcdef_no=3898, decl_uid=95572, cgraph_uid=1238, symbol_order=1242)

glm::vec<3, float, (glm::qualifier)0>::length ()
{
  length_type D.105637;
  length_type _1;

  <bb 2> :
  _1 = 3;

  <bb 3> :
<L0>:
  return _1;

}



;; Function glm::vec<3, float, (glm::qualifier)0>::operator[] (_ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi, funcdef_no=3897, decl_uid=95576, cgraph_uid=1239, symbol_order=1243)

glm::vec<3, float, (glm::qualifier)0>::operator[] (const struct vec * const this, length_type i)
{
  const float & D.105691;
  bool iftmp.59;
  int _1;
  const float & _2;
  bool iftmp.59_8;
  bool iftmp.59_10;
  const float & _12;
  const float & _13;
  const float & _14;

  <bb 2> :
  if (i_5(D) >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = glm::vec<3, float, (glm::qualifier)0>::length ();
  if (i_5(D) < _1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _assert ("i >= 0 && i < this->length()", "C:/glm/glm/detail/type_vec3.inl", 186);
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.59_8 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.59_10 = 0;

  <bb 7> :
  switch (i_5(D)) <default: <L5> [INV], case 1: <L7> [INV], case 2: <L8> [INV]>

  <bb 8> :
<L5>:
  _12 = &this_11(D)->D.95554.x;
  goto <bb 11>; [INV]

  <bb 9> :
<L7>:
  _13 = &this_11(D)->D.95560.y;
  goto <bb 11>; [INV]

  <bb 10> :
<L8>:
  _14 = &this_11(D)->D.95566.z;

  <bb 11> :
  # _2 = PHI <_12(8), _13(9), _14(10)>
<L9>:
  return _2;

}



;; Function glm::vec<4, float, (glm::qualifier)0>::length (_ZN3glm3vecILi4EfLNS_9qualifierE0EE6lengthEv, funcdef_no=3900, decl_uid=51375, cgraph_uid=1240, symbol_order=1244)

glm::vec<4, float, (glm::qualifier)0>::length ()
{
  length_type D.105747;
  length_type _1;

  <bb 2> :
  _1 = 4;

  <bb 3> :
<L0>:
  return _1;

}



;; Function glm::vec<4, float, (glm::qualifier)0>::operator[] (_ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi, funcdef_no=3899, decl_uid=51379, cgraph_uid=1241, symbol_order=1245)

glm::vec<4, float, (glm::qualifier)0>::operator[] (const struct vec * const this, length_type i)
{
  const float & D.105798;
  bool iftmp.75;
  int _1;
  const float & _2;
  bool iftmp.75_8;
  bool iftmp.75_10;
  const float & _12;
  const float & _13;
  const float & _14;
  const float & _15;

  <bb 2> :
  if (i_5(D) >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = glm::vec<4, float, (glm::qualifier)0>::length ();
  if (i_5(D) < _1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _assert ("i >= 0 && i < this->length()", "C:/glm/glm/detail/type_vec4.inl", 497);
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.75_8 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.75_10 = 0;

  <bb 7> :
  switch (i_5(D)) <default: <L5> [INV], case 1: <L7> [INV], case 2: <L8> [INV], case 3: <L9> [INV]>

  <bb 8> :
<L5>:
  _12 = &this_11(D)->D.51351.x;
  goto <bb 12>; [INV]

  <bb 9> :
<L7>:
  _13 = &this_11(D)->D.51357.y;
  goto <bb 12>; [INV]

  <bb 10> :
<L8>:
  _14 = &this_11(D)->D.51363.z;
  goto <bb 12>; [INV]

  <bb 11> :
<L9>:
  _15 = &this_11(D)->D.51369.w;

  <bb 12> :
  # _2 = PHI <_12(8), _13(9), _14(10), _15(11)>
<L10>:
  return _2;

}



;; Function std::operator!=<char, std::char_traits<char>, std::allocator<char> > (_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_, funcdef_no=3901, decl_uid=97879, cgraph_uid=1242, symbol_order=1246)

std::operator!=<char, std::char_traits<char>, std::allocator<char> > (const struct basic_string & __lhs, const char * __rhs)
{
  bool D.105506;
  bool _1;
  bool _6;

  <bb 2> :
  _1 = std::operator==<char, std::char_traits<char>, std::allocator<char> > (__lhs_3(D), __rhs_4(D));
  _6 = ~_1;

  <bb 3> :
<L0>:
  return _6;

}



;; Function glm::vec<3, float, (glm::qualifier)0>::operator[] (_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi, funcdef_no=3905, decl_uid=95573, cgraph_uid=1245, symbol_order=1249)

glm::vec<3, float, (glm::qualifier)0>::operator[] (struct vec * const this, length_type i)
{
  float & D.105635;
  bool iftmp.57;
  int _1;
  float & _2;
  bool iftmp.57_8;
  bool iftmp.57_10;
  float & _12;
  float & _13;
  float & _14;

  <bb 2> :
  if (i_5(D) >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = glm::vec<3, float, (glm::qualifier)0>::length ();
  if (i_5(D) < _1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _assert ("i >= 0 && i < this->length()", "C:/glm/glm/detail/type_vec3.inl", 170);
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.57_8 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.57_10 = 0;

  <bb 7> :
  switch (i_5(D)) <default: <L5> [INV], case 1: <L7> [INV], case 2: <L8> [INV]>

  <bb 8> :
<L5>:
  _12 = &this_11(D)->D.95554.x;
  goto <bb 11>; [INV]

  <bb 9> :
<L7>:
  _13 = &this_11(D)->D.95560.y;
  goto <bb 11>; [INV]

  <bb 10> :
<L8>:
  _14 = &this_11(D)->D.95566.z;

  <bb 11> :
  # _2 = PHI <_12(8), _13(9), _14(10)>
<L9>:
  return _2;

}



;; Function glm::rotate<float, (glm::qualifier)0> (_ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE, funcdef_no=3904, decl_uid=100852, cgraph_uid=1246, symbol_order=1250)

glm::rotate<float, (glm::qualifier)0> (const struct mat & m, float angle, const struct vec & v)
{
  struct col_type & D.105601;
  const struct col_type & D.105600;
  struct col_type & D.105595;
  const struct col_type & D.105594;
  float & D.105593;
  struct col_type & D.105592;
  const struct col_type & D.105591;
  float & D.105590;
  struct col_type & D.105589;
  const struct col_type & D.105588;
  float & D.105587;
  struct col_type & D.105586;
  struct col_type & D.105581;
  const struct col_type & D.105580;
  float & D.105579;
  struct col_type & D.105578;
  const struct col_type & D.105577;
  float & D.105576;
  struct col_type & D.105575;
  const struct col_type & D.105574;
  float & D.105573;
  struct col_type & D.105572;
  struct col_type & D.105567;
  const struct col_type & D.105566;
  float & D.105565;
  struct col_type & D.105564;
  const struct col_type & D.105563;
  float & D.105562;
  struct col_type & D.105561;
  const struct col_type & D.105560;
  float & D.105559;
  struct col_type & D.105558;
  float & D.105557;
  struct col_type & D.105556;
  float & D.105555;
  float & D.105554;
  float & D.105553;
  struct col_type & D.105552;
  float & D.105551;
  float & D.105550;
  float & D.105549;
  float & D.105548;
  struct col_type & D.105547;
  float & D.105546;
  float & D.105545;
  float & D.105544;
  float & D.105543;
  struct col_type & D.105542;
  float & D.105541;
  float & D.105540;
  float & D.105539;
  float & D.105538;
  struct col_type & D.105537;
  float & D.105536;
  float & D.105535;
  float & D.105534;
  struct col_type & D.105533;
  float & D.105532;
  float & D.105531;
  float & D.105530;
  float & D.105529;
  struct col_type & D.105528;
  float & D.105527;
  float & D.105526;
  float & D.105525;
  float & D.105524;
  struct col_type & D.105523;
  float & D.105522;
  float & D.105521;
  float & D.105520;
  float & D.105519;
  struct col_type & D.105518;
  float & D.105517;
  float & D.105516;
  struct mat Result [value-expr: <retval>];
  struct mat Rotate;
  struct vec temp;
  struct vec axis;
  const float s;
  const float c;
  const float a;
  struct col_type & D.105514;
  struct col_type & D.105513;
  struct vec D.103200;
  struct vec D.103201;
  struct vec D.103202;
  struct vec D.103203;
  struct col_type & D.105512;
  struct vec D.103195;
  struct vec D.103196;
  struct vec D.103197;
  struct vec D.103198;
  struct col_type & D.105511;
  struct vec D.103187;
  struct vec D.103188;
  struct vec D.103192;
  struct vec D.103193;
  float _1;
  float & _2;
  float _3;
  float & _4;
  float _5;
  float _6;
  struct col_type & _7;
  float & _8;
  float _9;
  float & _10;
  float _11;
  float & _12;
  float _13;
  float _14;
  float & _15;
  float _16;
  float _17;
  struct col_type & _18;
  float & _19;
  float _20;
  float & _21;
  float _22;
  float & _23;
  float _24;
  float _25;
  float & _26;
  float _27;
  float _28;
  struct col_type & _29;
  float & _30;
  float _31;
  float & _32;
  float _33;
  float & _34;
  float _35;
  float _36;
  float & _37;
  float _38;
  float _39;
  struct col_type & _40;
  float & _41;
  float _42;
  float & _43;
  float _44;
  float & _45;
  float _46;
  float _47;
  struct col_type & _48;
  float & _49;
  float _50;
  float & _51;
  float _52;
  float & _53;
  float _54;
  float _55;
  float & _56;
  float _57;
  float _58;
  struct col_type & _59;
  float & _60;
  float _61;
  float & _62;
  float _63;
  float & _64;
  float _65;
  float _66;
  float & _67;
  float _68;
  float _69;
  struct col_type & _70;
  float & _71;
  float _72;
  float & _73;
  float _74;
  float & _75;
  float _76;
  float _77;
  float & _78;
  float _79;
  float _80;
  struct col_type & _81;
  float & _82;
  float _83;
  float & _84;
  float _85;
  float & _86;
  float _87;
  float _88;
  struct col_type & _89;
  float & _90;
  float _91;
  struct col_type & _92;
  float & _93;
  const struct col_type & _94;
  struct col_type & _95;
  float & _96;
  const struct col_type & _97;
  struct col_type & _98;
  float & _99;
  const struct col_type & _100;
  struct col_type & _101;
  float & _102;
  const struct col_type & _103;
  struct col_type & _104;
  float & _105;
  const struct col_type & _106;
  struct col_type & _107;
  float & _108;
  const struct col_type & _109;
  struct col_type & _110;
  float & _111;
  const struct col_type & _112;
  struct col_type & _113;
  float & _114;
  const struct col_type & _115;
  struct col_type & _116;
  float & _117;
  const struct col_type & _118;
  const struct col_type & _119;
  float & _144;
  float & _146;
  struct col_type & _148;
  float & _150;
  float & _153;
  float & _155;
  float & _157;
  struct col_type & _159;
  float & _161;
  float & _164;
  float & _166;
  float & _168;
  struct col_type & _170;
  float & _172;
  float & _175;
  float & _177;
  float & _179;
  struct col_type & _181;
  float & _183;
  float & _186;
  float & _188;
  struct col_type & _190;
  float & _192;
  float & _195;
  float & _197;
  float & _199;
  struct col_type & _201;
  float & _203;
  float & _206;
  float & _208;
  float & _210;
  struct col_type & _212;
  float & _214;
  float & _217;
  float & _219;
  float & _221;
  struct col_type & _223;
  float & _225;
  float & _228;
  float & _230;
  struct col_type & _232;
  float & _234;
  struct col_type & _237;
  float & _239;
  const struct col_type & _242;
  struct col_type & _245;
  float & _247;
  const struct col_type & _249;
  struct col_type & _252;
  float & _254;
  const struct col_type & _256;
  struct col_type & _260;
  struct col_type & _261;
  struct col_type & _268;
  float & _270;
  const struct col_type & _272;
  struct col_type & _275;
  float & _277;
  const struct col_type & _279;
  struct col_type & _282;
  float & _284;
  const struct col_type & _286;
  struct col_type & _290;
  struct col_type & _291;
  struct col_type & _298;
  float & _300;
  const struct col_type & _302;
  struct col_type & _305;
  float & _307;
  const struct col_type & _309;
  struct col_type & _312;
  float & _314;
  const struct col_type & _316;
  struct col_type & _320;
  struct col_type & _321;
  const struct col_type & _328;
  struct col_type & _330;
  struct col_type & _331;

  <bb 2> :
  a_134 = angle_133(D);
  c_137 = std::cos (a_134);
  s_139 = std::sin (a_134);
  axis = glm::normalize<3, float, (glm::qualifier)0> (v_140(D)); [return slot optimization]

  <bb 3> :
  _1 = 1.0e+0 - c_137;
  temp = glm::operator*<float, (glm::qualifier)0> (_1, &axis); [return slot optimization]
  _144 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 0);

  <bb 4> :
  _2 = _144;
  _3 = *_2;
  _146 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0);

  <bb 5> :
  _4 = _146;
  _5 = *_4;
  _6 = _3 * _5;
  _148 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0);

  <bb 6> :
  _7 = _148;
  _150 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_7, 0);

  <bb 7> :
  _8 = _150;
  _9 = c_137 + _6;
  *_8 = _9;
  _153 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 0);

  <bb 8> :
  _10 = _153;
  _11 = *_10;
  _155 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1);

  <bb 9> :
  _12 = _155;
  _13 = *_12;
  _14 = _11 * _13;
  _157 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2);

  <bb 10> :
  _15 = _157;
  _16 = *_15;
  _17 = s_139 * _16;
  _159 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0);

  <bb 11> :
  _18 = _159;
  _161 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_18, 1);

  <bb 12> :
  _19 = _161;
  _20 = _14 + _17;
  *_19 = _20;
  _164 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 0);

  <bb 13> :
  _21 = _164;
  _22 = *_21;
  _166 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2);

  <bb 14> :
  _23 = _166;
  _24 = *_23;
  _25 = _22 * _24;
  _168 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1);

  <bb 15> :
  _26 = _168;
  _27 = *_26;
  _28 = s_139 * _27;
  _170 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0);

  <bb 16> :
  _29 = _170;
  _172 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_29, 2);

  <bb 17> :
  _30 = _172;
  _31 = _25 - _28;
  *_30 = _31;
  _175 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 1);

  <bb 18> :
  _32 = _175;
  _33 = *_32;
  _177 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0);

  <bb 19> :
  _34 = _177;
  _35 = *_34;
  _36 = _33 * _35;
  _179 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2);

  <bb 20> :
  _37 = _179;
  _38 = *_37;
  _39 = s_139 * _38;
  _181 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1);

  <bb 21> :
  _40 = _181;
  _183 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_40, 0);

  <bb 22> :
  _41 = _183;
  _42 = _36 - _39;
  *_41 = _42;
  _186 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 1);

  <bb 23> :
  _43 = _186;
  _44 = *_43;
  _188 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1);

  <bb 24> :
  _45 = _188;
  _46 = *_45;
  _47 = _44 * _46;
  _190 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1);

  <bb 25> :
  _48 = _190;
  _192 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_48, 1);

  <bb 26> :
  _49 = _192;
  _50 = c_137 + _47;
  *_49 = _50;
  _195 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 1);

  <bb 27> :
  _51 = _195;
  _52 = *_51;
  _197 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2);

  <bb 28> :
  _53 = _197;
  _54 = *_53;
  _55 = _52 * _54;
  _199 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0);

  <bb 29> :
  _56 = _199;
  _57 = *_56;
  _58 = s_139 * _57;
  _201 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1);

  <bb 30> :
  _59 = _201;
  _203 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_59, 2);

  <bb 31> :
  _60 = _203;
  _61 = _55 + _58;
  *_60 = _61;
  _206 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 2);

  <bb 32> :
  _62 = _206;
  _63 = *_62;
  _208 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0);

  <bb 33> :
  _64 = _208;
  _65 = *_64;
  _66 = _63 * _65;
  _210 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1);

  <bb 34> :
  _67 = _210;
  _68 = *_67;
  _69 = s_139 * _68;
  _212 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2);

  <bb 35> :
  _70 = _212;
  _214 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_70, 0);

  <bb 36> :
  _71 = _214;
  _72 = _66 + _69;
  *_71 = _72;
  _217 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 2);

  <bb 37> :
  _73 = _217;
  _74 = *_73;
  _219 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 1);

  <bb 38> :
  _75 = _219;
  _76 = *_75;
  _77 = _74 * _76;
  _221 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 0);

  <bb 39> :
  _78 = _221;
  _79 = *_78;
  _80 = s_139 * _79;
  _223 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2);

  <bb 40> :
  _81 = _223;
  _225 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_81, 1);

  <bb 41> :
  _82 = _225;
  _83 = _77 - _80;
  *_82 = _83;
  _228 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&temp, 2);

  <bb 42> :
  _84 = _228;
  _85 = *_84;
  _230 = glm::vec<3, float, (glm::qualifier)0>::operator[] (&axis, 2);

  <bb 43> :
  _86 = _230;
  _87 = *_86;
  _88 = _85 * _87;
  _232 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2);

  <bb 44> :
  _89 = _232;
  _234 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_89, 2);

  <bb 45> :
  _90 = _234;
  _91 = c_137 + _88;
  *_90 = _91;
  _237 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0);

  <bb 46> :
  _92 = _237;
  _239 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_92, 2);

  <bb 47> :
  _93 = _239;
  _242 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 2);

  <bb 48> :
  _94 = _242;
  D.103193 = glm::operator*<float, (glm::qualifier)0> (_94, _93); [return slot optimization]
  _245 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0);

  <bb 49> :
  _95 = _245;
  _247 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_95, 1);

  <bb 50> :
  _96 = _247;
  _249 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 1);

  <bb 51> :
  _97 = _249;
  D.103188 = glm::operator*<float, (glm::qualifier)0> (_97, _96); [return slot optimization]
  _252 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 0);

  <bb 52> :
  _98 = _252;
  _254 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_98, 0);

  <bb 53> :
  _99 = _254;
  _256 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 0);

  <bb 54> :
  _100 = _256;
  D.103187 = glm::operator*<float, (glm::qualifier)0> (_100, _99); [return slot optimization]
  D.103192 = glm::operator+<float, (glm::qualifier)0> (&D.103187, &D.103188); [return slot optimization]

  <bb 55> :
  _260 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 0);

  <bb 56> :
  _261 = _260;
  *_261 = glm::operator+<float, (glm::qualifier)0> (&D.103192, &D.103193);

  <bb 57> :
  D.103192 ={v} {CLOBBER};
  D.103187 ={v} {CLOBBER};
  D.103188 ={v} {CLOBBER};
  D.103193 ={v} {CLOBBER};
  _268 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1);

  <bb 58> :
  _101 = _268;
  _270 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_101, 2);

  <bb 59> :
  _102 = _270;
  _272 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 2);

  <bb 60> :
  _103 = _272;
  D.103198 = glm::operator*<float, (glm::qualifier)0> (_103, _102); [return slot optimization]
  _275 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1);

  <bb 61> :
  _104 = _275;
  _277 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_104, 1);

  <bb 62> :
  _105 = _277;
  _279 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 1);

  <bb 63> :
  _106 = _279;
  D.103196 = glm::operator*<float, (glm::qualifier)0> (_106, _105); [return slot optimization]
  _282 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 1);

  <bb 64> :
  _107 = _282;
  _284 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_107, 0);

  <bb 65> :
  _108 = _284;
  _286 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 0);

  <bb 66> :
  _109 = _286;
  D.103195 = glm::operator*<float, (glm::qualifier)0> (_109, _108); [return slot optimization]
  D.103197 = glm::operator+<float, (glm::qualifier)0> (&D.103195, &D.103196); [return slot optimization]

  <bb 67> :
  _290 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 1);

  <bb 68> :
  _291 = _290;
  *_291 = glm::operator+<float, (glm::qualifier)0> (&D.103197, &D.103198);

  <bb 69> :
  D.103197 ={v} {CLOBBER};
  D.103195 ={v} {CLOBBER};
  D.103196 ={v} {CLOBBER};
  D.103198 ={v} {CLOBBER};
  _298 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2);

  <bb 70> :
  _110 = _298;
  _300 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_110, 2);

  <bb 71> :
  _111 = _300;
  _302 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 2);

  <bb 72> :
  _112 = _302;
  D.103203 = glm::operator*<float, (glm::qualifier)0> (_112, _111); [return slot optimization]
  _305 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2);

  <bb 73> :
  _113 = _305;
  _307 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_113, 1);

  <bb 74> :
  _114 = _307;
  _309 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 1);

  <bb 75> :
  _115 = _309;
  D.103201 = glm::operator*<float, (glm::qualifier)0> (_115, _114); [return slot optimization]
  _312 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&Rotate, 2);

  <bb 76> :
  _116 = _312;
  _314 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_116, 0);

  <bb 77> :
  _117 = _314;
  _316 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 0);

  <bb 78> :
  _118 = _316;
  D.103200 = glm::operator*<float, (glm::qualifier)0> (_118, _117); [return slot optimization]
  D.103202 = glm::operator+<float, (glm::qualifier)0> (&D.103200, &D.103201); [return slot optimization]

  <bb 79> :
  _320 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 2);

  <bb 80> :
  _321 = _320;
  *_321 = glm::operator+<float, (glm::qualifier)0> (&D.103202, &D.103203);

  <bb 81> :
  D.103202 ={v} {CLOBBER};
  D.103200 ={v} {CLOBBER};
  D.103201 ={v} {CLOBBER};
  D.103203 ={v} {CLOBBER};
  _328 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_240(D), 3);

  <bb 82> :
  _119 = _328;
  _330 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 3);

  <bb 83> :
  _331 = _330;
  *_331 = MEM[(const struct vec &)_119];

  <bb 84> :
  axis ={v} {CLOBBER};
  temp ={v} {CLOBBER};
  Rotate ={v} {CLOBBER};

  <bb 85> :
<L1>:
  return <retval>;

  <bb 86> :
<L2>:
  resx 5

  <bb 87> :
<L3>:
  resx 4

  <bb 88> :
<L4>:
  resx 3

  <bb 89> :
<L5>:
  resx 2

  <bb 90> :
<L6>:
  resx 13

  <bb 91> :
<L7>:
  resx 12

  <bb 92> :
<L8>:
  resx 11

  <bb 93> :
<L9>:
  resx 10

  <bb 94> :
<L10>:
  resx 21

  <bb 95> :
<L11>:
  resx 20

  <bb 96> :
<L12>:
  resx 19

  <bb 97> :
<L13>:
  resx 18

  <bb 98> :
<L14>:
  resx 1

}



;; Function glm::detail::compute_vec4_add<float, (glm::qualifier)0, false>::call (_ZN3glm6detail16compute_vec4_addIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_, funcdef_no=3909, decl_uid=103223, cgraph_uid=1247, symbol_order=1251)

glm::detail::compute_vec4_add<float, (glm::qualifier)0, false>::call (const struct vec & a, const struct vec & b)
{
  float _1;
  float _2;
  float _3;
  float _4;
  float _5;
  float _6;
  float _7;
  float _8;
  float _9;
  float _10;
  float _11;
  float _12;

  <bb 2> :
  _1 = a_14(D)->D.51369.w;
  _2 = b_15(D)->D.51369.w;
  _3 = _1 + _2;
  _4 = a_14(D)->D.51363.z;
  _5 = b_15(D)->D.51363.z;
  _6 = _4 + _5;
  _7 = a_14(D)->D.51357.y;
  _8 = b_15(D)->D.51357.y;
  _9 = _7 + _8;
  _10 = a_14(D)->D.51351.x;
  _11 = b_15(D)->D.51351.x;
  _12 = _10 + _11;
  glm::vec<4, float, (glm::qualifier)0>::vec (&<retval>, _12, _9, _6, _3);

  <bb 3> :
<L0>:
  return <retval>;

}



;; Function glm::vec<4, float, (glm::qualifier)0>::operator+=<float> (_ZN3glm3vecILi4EfLNS_9qualifierE0EEpLIfEERS2_RKNS0_ILi4ET_LS1_0EEE, funcdef_no=3908, decl_uid=103214, cgraph_uid=1248, symbol_order=1252)

glm::vec<4, float, (glm::qualifier)0>::operator+=<float> (struct vec * const this, const struct vec & v)
{
  struct vec D.103227;
  struct vec & D.105655;
  struct vec & _6;

  <bb 2> :
  D.103227 = *v_2(D);
  *this_4(D) = glm::detail::compute_vec4_add<float, (glm::qualifier)0, false>::call (this_4(D), &D.103227);
  _6 = this_4(D);
  D.103227 ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _6;

}



;; Function glm::operator+<float, (glm::qualifier)0> (_ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_, funcdef_no=3907, decl_uid=103189, cgraph_uid=1249, symbol_order=1253)

glm::operator+<float, (glm::qualifier)0> (const struct vec & v1, const struct vec & v2)
{
  struct vec & D.105652;
  struct vec D.103213;
  struct vec & _1;
  struct vec & _7;

  <bb 2> :
  D.103213 = *v1_3(D);
  _7 = glm::vec<4, float, (glm::qualifier)0>::operator+=<float> (&D.103213, v2_5(D));
  _1 = _7;
  <retval> = MEM[(const struct vec &)_1];
  D.103213 ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return <retval>;

}



;; Function glm::translate<float, (glm::qualifier)0> (_ZN3glm9translateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE, funcdef_no=3906, decl_uid=100871, cgraph_uid=1250, symbol_order=1254)

glm::translate<float, (glm::qualifier)0> (const struct mat & m, const struct vec & v)
{
  struct col_type & D.105679;
  const struct col_type & D.105678;
  const float & D.105677;
  const struct col_type & D.105676;
  const float & D.105675;
  const struct col_type & D.105674;
  const float & D.105673;
  const struct col_type & D.105672;
  struct mat Result [value-expr: <retval>];
  struct col_type & D.105670;
  struct vec D.103208;
  struct vec D.103209;
  struct vec D.103210;
  struct vec D.103211;
  struct vec D.103232;
  const struct col_type & _1;
  const float & _2;
  const struct col_type & _3;
  const float & _4;
  const struct col_type & _5;
  const float & _6;
  const struct col_type & _7;
  const struct col_type & _17;
  const float & _20;
  const struct col_type & _22;
  const float & _25;
  const struct col_type & _27;
  const float & _30;
  const struct col_type & _32;
  struct col_type & _37;
  struct col_type & _38;

  <bb 2> :
  <retval> = *m_14(D);
  _17 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_14(D), 3);
  _1 = _17;
  _20 = glm::vec<3, float, (glm::qualifier)0>::operator[] (v_18(D), 2);
  _2 = _20;
  _22 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_14(D), 2);
  _3 = _22;
  D.103211 = glm::operator*<float, (glm::qualifier)0> (_3, _2); [return slot optimization]
  _25 = glm::vec<3, float, (glm::qualifier)0>::operator[] (v_18(D), 1);

  <bb 3> :
  _4 = _25;
  _27 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_14(D), 1);

  <bb 4> :
  _5 = _27;
  D.103209 = glm::operator*<float, (glm::qualifier)0> (_5, _4); [return slot optimization]
  _30 = glm::vec<3, float, (glm::qualifier)0>::operator[] (v_18(D), 0);

  <bb 5> :
  _6 = _30;
  _32 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_14(D), 0);

  <bb 6> :
  _7 = _32;
  D.103208 = glm::operator*<float, (glm::qualifier)0> (_7, _6); [return slot optimization]
  D.103210 = glm::operator+<float, (glm::qualifier)0> (&D.103208, &D.103209); [return slot optimization]
  D.103232 = glm::operator+<float, (glm::qualifier)0> (&D.103210, &D.103211); [return slot optimization]
  _37 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 3);

  <bb 7> :
  _38 = _37;
  *_38 = glm::operator+<float, (glm::qualifier)0> (&D.103232, _1);
  D.103232 ={v} {CLOBBER};
  D.103210 ={v} {CLOBBER};
  D.103208 ={v} {CLOBBER};
  D.103209 ={v} {CLOBBER};
  D.103211 ={v} {CLOBBER};

  <bb 8> :
<L0>:
  return <retval>;

  <bb 9> :
<L1>:
  resx 5

  <bb 10> :
<L2>:
  resx 4

  <bb 11> :
<L3>:
  resx 3

  <bb 12> :
<L4>:
  resx 2

  <bb 13> :
<L5>:
  resx 1

}



;; Function glm::perspective<float> (_ZN3glm11perspectiveIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_, funcdef_no=3910, decl_uid=100875, cgraph_uid=1251, symbol_order=1255)

glm::perspective<float> (float fovy, float aspect, float zNear, float zFar)
{
  <bb 2> :
  <retval> = glm::perspectiveRH_NO<float> (fovy_2(D), aspect_3(D), zNear_4(D), zFar_5(D)); [return slot optimization]

  <bb 3> :
<L0>:
  return <retval>;

}



;; Function glm::value_ptr<float, (glm::qualifier)0> (_ZN3glm9value_ptrIfLNS_9qualifierE0EEEPT_RNS_3matILi4ELi4ES2_XT0_EEE, funcdef_no=3911, decl_uid=100883, cgraph_uid=1252, symbol_order=1256)

glm::value_ptr<float, (glm::qualifier)0> (struct mat & m)
{
  struct col_type & D.105731;
  float * D.105729;
  struct col_type & _1;
  struct col_type & _5;
  float * _6;

  <bb 2> :
  _5 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (m_3(D), 0);
  _1 = _5;
  _6 = &_1->D.51351.x;

  <bb 3> :
<L0>:
  return _6;

}



;; Function glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi, funcdef_no=3912, decl_uid=97334, cgraph_uid=1253, symbol_order=1257)

glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (struct mat * const this, length_type i)
{
  struct col_type & D.105737;
  bool iftmp.64;
  int _1;
  bool iftmp.64_7;
  bool iftmp.64_8;
  struct col_type & _10;

  <bb 2> :
  _1 = glm::mat<4, 4, float, (glm::qualifier)0>::length ();
  if (i_5(D) < _1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _assert ("i < this->length()", "C:/glm/glm/detail/type_mat4x4.inl", 291);
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.64_8 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.64_7 = 0;

  <bb 6> :
  _10 = &this_9(D)->value[i_5(D)];

  <bb 7> :
<L4>:
  return _10;

}



;; Function glm::vec<4, float, (glm::qualifier)0>::operator[] (_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi, funcdef_no=3913, decl_uid=51376, cgraph_uid=1254, symbol_order=1258)

glm::vec<4, float, (glm::qualifier)0>::operator[] (struct vec * const this, length_type i)
{
  float & D.105745;
  bool iftmp.65;
  int _1;
  float & _2;
  bool iftmp.65_8;
  bool iftmp.65_10;
  float & _12;
  float & _13;
  float & _14;
  float & _15;

  <bb 2> :
  if (i_5(D) >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = glm::vec<4, float, (glm::qualifier)0>::length ();
  if (i_5(D) < _1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _assert ("i >= 0 && i < this->length()", "C:/glm/glm/detail/type_vec4.inl", 479);
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.65_8 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.65_10 = 0;

  <bb 7> :
  switch (i_5(D)) <default: <L5> [INV], case 1: <L7> [INV], case 2: <L8> [INV], case 3: <L9> [INV]>

  <bb 8> :
<L5>:
  _12 = &this_11(D)->D.51351.x;
  goto <bb 12>; [INV]

  <bb 9> :
<L7>:
  _13 = &this_11(D)->D.51357.y;
  goto <bb 12>; [INV]

  <bb 10> :
<L8>:
  _14 = &this_11(D)->D.51363.z;
  goto <bb 12>; [INV]

  <bb 11> :
<L9>:
  _15 = &this_11(D)->D.51369.w;

  <bb 12> :
  # _2 = PHI <_12(8), _13(9), _14(10), _15(11)>
<L10>:
  return _2;

}



;; Function std::operator==<char, std::char_traits<char>, std::allocator<char> > (_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_, funcdef_no=4071, decl_uid=103153, cgraph_uid=1412, symbol_order=1416)

std::operator==<char, std::char_traits<char>, std::allocator<char> > (const struct basic_string & __lhs, const char * __rhs)
{
  bool D.105508;
  int _1;
  bool _6;

  <bb 2> :
  _1 = std::__cxx11::basic_string<char>::compare (__lhs_3(D), __rhs_4(D));
  _6 = _1 == 0;

  <bb 3> :
<L0>:
  return _6;

}



;; Function glm::normalize<3, float, (glm::qualifier)0> (_ZN3glm9normalizeILi3EfLNS_9qualifierE0EEENS_3vecIXT_ET0_XT1_EEERKS4_, funcdef_no=4072, decl_uid=103171, cgraph_uid=1413, symbol_order=1417)

glm::normalize<3, float, (glm::qualifier)0> (const struct vec & x)
{
  <bb 2> :
  <retval> = glm::detail::compute_normalize<3, float, (glm::qualifier)0, false>::call (x_2(D)); [return slot optimization]

  <bb 3> :
<L0>:
  return <retval>;

}



;; Function glm::operator*<float, (glm::qualifier)0> (_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEES3_RKS4_, funcdef_no=4073, decl_uid=103175, cgraph_uid=1414, symbol_order=1418)

glm::operator*<float, (glm::qualifier)0> (float scalar, const struct vec & v)
{
  float _1;
  float _2;
  float _3;
  float _4;
  float _5;
  float _6;

  <bb 2> :
  _1 = v_8(D)->D.95566.z;
  _2 = scalar_9(D) * _1;
  _3 = v_8(D)->D.95560.y;
  _4 = scalar_9(D) * _3;
  _5 = v_8(D)->D.95554.x;
  _6 = scalar_9(D) * _5;
  glm::vec<3, float, (glm::qualifier)0>::vec (&<retval>, _6, _4, _2);

  <bb 3> :
<L0>:
  return <retval>;

}



;; Function glm::perspectiveRH_NO<float> (_ZN3glm16perspectiveRH_NOIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_, funcdef_no=4074, decl_uid=103236, cgraph_uid=1415, symbol_order=1419)

glm::perspectiveRH_NO<float> (float fovy, float aspect, float zNear, float zFar)
{
  float & D.105714;
  struct col_type & D.105713;
  float & D.105712;
  struct col_type & D.105711;
  float & D.105710;
  struct col_type & D.105709;
  float & D.105708;
  struct col_type & D.105707;
  float & D.105706;
  struct col_type & D.105705;
  float D.105704;
  struct mat Result [value-expr: <retval>];
  const float tanHalfFovy;
  bool iftmp.60;
  float _1;
  float _2;
  float _3;
  float _4;
  float _5;
  float tanHalfFovy.61_6;
  float _7;
  struct col_type & _8;
  float & _9;
  float _10;
  float tanHalfFovy.62_11;
  struct col_type & _12;
  float & _13;
  float _14;
  float _15;
  float _16;
  float _17;
  struct col_type & _18;
  float & _19;
  float _20;
  struct col_type & _21;
  float & _22;
  float _23;
  float _24;
  float _25;
  float _26;
  struct col_type & _27;
  float & _28;
  float _29;
  float _36;
  bool iftmp.60_38;
  bool iftmp.60_39;
  struct col_type & _45;
  float & _47;
  struct col_type & _50;
  float & _52;
  struct col_type & _57;
  float & _59;
  struct col_type & _62;
  float & _64;
  struct col_type & _67;
  float & _69;

  <bb 2> :
  _1 = std::numeric_limits<float>::epsilon ();
  _2 = aspect_34(D) - _1;
  _36 = glm::abs<float> (_2);
  _3 = _36;
  if (_3 > 0.0)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _assert ("abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)", "C:/glm/glm/ext/matrix_clip_space.inl", 251);

  <bb 4> :
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.60_39 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.60_38 = 0;

  <bb 7> :
  _4 = fovy_40(D) / 2.0e+0;
  _5 = std::tan (_4);
  tanHalfFovy = _5;
  <retval> = {};
  tanHalfFovy.61_6 = tanHalfFovy;
  _7 = aspect_34(D) * tanHalfFovy.61_6;
  _45 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 0);

  <bb 8> :
  _8 = _45;
  _47 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_8, 0);

  <bb 9> :
  _9 = _47;
  _10 = 1.0e+0 / _7;
  *_9 = _10;
  tanHalfFovy.62_11 = tanHalfFovy;
  _50 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 1);

  <bb 10> :
  _12 = _50;
  _52 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_12, 1);

  <bb 11> :
  _13 = _52;
  _14 = 1.0e+0 / tanHalfFovy.62_11;
  *_13 = _14;
  _15 = zFar_54(D) + zNear_55(D);
  _16 = -_15;
  _17 = zFar_54(D) - zNear_55(D);
  _57 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 2);

  <bb 12> :
  _18 = _57;
  _59 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_18, 2);

  <bb 13> :
  _19 = _59;
  _20 = _16 / _17;
  *_19 = _20;
  _62 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 2);

  <bb 14> :
  _21 = _62;
  _64 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_21, 3);

  <bb 15> :
  _22 = _64;
  *_22 = -1.0e+0;
  _23 = zFar_54(D) * 2.0e+0;
  _24 = zNear_55(D) * _23;
  _25 = -_24;
  _26 = zFar_54(D) - zNear_55(D);
  _67 = glm::mat<4, 4, float, (glm::qualifier)0>::operator[] (&<retval>, 3);

  <bb 16> :
  _27 = _67;
  _69 = glm::vec<4, float, (glm::qualifier)0>::operator[] (_27, 2);

  <bb 17> :
  _28 = _69;
  _29 = _25 / _26;
  *_28 = _29;

  <bb 18> :
  tanHalfFovy ={v} {CLOBBER};

  <bb 19> :
<L5>:
  return <retval>;

  <bb 20> :
<L6>:
  resx 1

}



;; Function glm::detail::compute_normalize<3, float, (glm::qualifier)0, false>::call (_ZN3glm6detail17compute_normalizeILi3EfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi3EfLS2_0EEE, funcdef_no=4136, decl_uid=103781, cgraph_uid=1477, symbol_order=1481)

glm::detail::compute_normalize<3, float, (glm::qualifier)0, false>::call (const struct vec & v)
{
  float D.105612;
  float _1;
  float _2;
  float _6;

  <bb 2> :
  _6 = glm::dot<3, float, (glm::qualifier)0> (v_4(D), v_4(D));
  _1 = _6;
  _2 = glm::inversesqrt<float> (_1);
  <retval> = glm::operator*<float, (glm::qualifier)0> (v_4(D), _2); [return slot optimization]

  <bb 3> :
<L0>:
  return <retval>;

}



;; Function glm::dot<3, float, (glm::qualifier)0> (_ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_, funcdef_no=4179, decl_uid=104331, cgraph_uid=1520, symbol_order=1524)

glm::dot<3, float, (glm::qualifier)0> (const struct vec & x, const struct vec & y)
{
  float D.105615;
  float D.105613;
  float _5;
  float _6;

  <bb 2> :
  _5 = glm::detail::compute_dot<glm::vec<3, float, (glm::qualifier)0>, float, false>::call (x_2(D), y_3(D));
  _6 = _5;

  <bb 3> :
<L0>:
  return _6;

}



;; Function glm::inversesqrt<float> (_ZN3glm11inversesqrtIfEET_S1_, funcdef_no=4180, decl_uid=104334, cgraph_uid=1521, symbol_order=1525)

glm::inversesqrt<float> (float x)
{
  float D.105621;
  float _1;
  float _5;

  <bb 2> :
  _1 = std::sqrt (x_3(D));
  _5 = 1.0e+0 / _1;

  <bb 3> :
<L0>:
  return _5;

}



;; Function glm::operator*<float, (glm::qualifier)0> (_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S3_, funcdef_no=4181, decl_uid=104336, cgraph_uid=1522, symbol_order=1526)

glm::operator*<float, (glm::qualifier)0> (const struct vec & v, float scalar)
{
  float _1;
  float _2;
  float _3;
  float _4;
  float _5;
  float _6;

  <bb 2> :
  _1 = v_8(D)->D.95566.z;
  _2 = scalar_9(D) * _1;
  _3 = v_8(D)->D.95560.y;
  _4 = scalar_9(D) * _3;
  _5 = v_8(D)->D.95554.x;
  _6 = scalar_9(D) * _5;
  glm::vec<3, float, (glm::qualifier)0>::vec (&<retval>, _6, _4, _2);

  <bb 3> :
<L0>:
  return <retval>;

}



;; Function glm::operator*<float, (glm::qualifier)0> (_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_, funcdef_no=4223, decl_uid=105269, cgraph_uid=1563, symbol_order=1567)

glm::operator*<float, (glm::qualifier)0> (const struct vec & v1, const struct vec & v2)
{
  float _1;
  float _2;
  float _3;
  float _4;
  float _5;
  float _6;
  float _7;
  float _8;
  float _9;

  <bb 2> :
  _1 = v1_11(D)->D.95566.z;
  _2 = v2_12(D)->D.95566.z;
  _3 = _1 * _2;
  _4 = v1_11(D)->D.95560.y;
  _5 = v2_12(D)->D.95560.y;
  _6 = _4 * _5;
  _7 = v1_11(D)->D.95554.x;
  _8 = v2_12(D)->D.95554.x;
  _9 = _7 * _8;
  glm::vec<3, float, (glm::qualifier)0>::vec (&<retval>, _9, _6, _3);

  <bb 3> :
<L0>:
  return <retval>;

}



;; Function glm::detail::compute_dot<glm::vec<3, float, (glm::qualifier)0>, float, false>::call (_ZN3glm6detail11compute_dotINS_3vecILi3EfLNS_9qualifierE0EEEfLb0EE4callERKS4_S7_, funcdef_no=4222, decl_uid=105136, cgraph_uid=1564, symbol_order=1568)

glm::detail::compute_dot<glm::vec<3, float, (glm::qualifier)0>, float, false>::call (const struct vec & a, const struct vec & b)
{
  struct vec tmp;
  float D.105616;
  float _1;
  float _2;
  float _3;
  float _4;
  float _9;

  <bb 2> :
  tmp = glm::operator*<float, (glm::qualifier)0> (a_6(D), b_7(D)); [return slot optimization]
  _1 = tmp.D.95554.x;
  _2 = tmp.D.95560.y;
  _3 = _1 + _2;
  _4 = tmp.D.95566.z;
  _9 = _3 + _4;
  tmp ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _9;

}



;; Function __tcf_0 (__tcf_0, funcdef_no=4261, decl_uid=105358, cgraph_uid=1601, symbol_order=1701)

__tcf_0 ()
{
  <bb 2> :
  std::ios_base::Init::~Init (&__ioinit);
  return;

}



;; Function __static_initialization_and_destruction_0 (_Z41__static_initialization_and_destruction_0ii, funcdef_no=4260, decl_uid=105354, cgraph_uid=1602, symbol_order=1702)

__static_initialization_and_destruction_0 (int __initialize_p, int __priority)
{
  <bb 2> :
  if (__initialize_p_2(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (__priority_4(D) == 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  std::ios_base::Init::Init (&__ioinit);
  atexit (__tcf_0);

  <bb 5> :
  return;

}



;; Function _GLOBAL__sub_I_main (_GLOBAL__sub_I_main, funcdef_no=4262, decl_uid=105362, cgraph_uid=1603, symbol_order=2318)

_GLOBAL__sub_I_main ()
{
  <bb 2> :
  __static_initialization_and_destruction_0 (1, 65535);
  return;

}


