
;; Function void __debugbreak() (null)
;; enabled by -tree-original


<<cleanup_point __asm__ __volatile__("int {$}3"::)>>;


;; Function int vfscanf(FILE*, const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vfscanf (__stream, __format, __local_argv)>>;


;; Function int vsscanf(const char*, const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vsscanf (__source, __format, __local_argv)>>;


;; Function int vscanf(const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vscanf (__format, __local_argv)>>;


;; Function int vsnprintf(char*, size_t, const char*, va_list) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vsnprintf (__stream, __n, __format, __local_argv)>>;


;; Function int snprintf(char*, size_t, const char*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __ms_vsnprintf (__stream, __n, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vfwscanf(FILE*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vfwscanf (__stream, __format, __local_argv)>>;


;; Function int vswscanf(const wchar_t*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vswscanf (__source, __format, __local_argv)>>;


;; Function int vwscanf(const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __ms_vwscanf (__format, __local_argv)>>;


;; Function int snwprintf(wchar_t*, size_t, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int r;
  char * argp;

    int r;
    char * argp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &argp, format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = _vsnwprintf (s, n, format, argp)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &argp) >>>>>;
  return <retval> = r;
}


;; Function int vsnwprintf(wchar_t*, size_t, const wchar_t*, va_list) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _vsnwprintf (s, n, format, arg)>>;


;; Function int vswprintf(wchar_t*, size_t, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = vsnwprintf (__stream, __count, __format, __local_argv)>>;


;; Function int swprintf(wchar_t*, size_t, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = vswprintf (__stream, __count, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vswprintf(wchar_t*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _vswprintf (__stream, __format, __local_argv)>>;


;; Function int swprintf(wchar_t*, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = vswprintf (__stream, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function long long int _abs64(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <x>;


;; Function double strtod(const char*, char**) (null)
;; enabled by -tree-original


{
  extern double __mingw_strtod (const char *, char * *);

  <<cleanup_point return <retval> = __mingw_strtod (_Str, _EndPtr)>>;
}


;; Function float strtof(const char*, char**) (null)
;; enabled by -tree-original


{
  extern float __mingw_strtof (const char *, char * *);

  <<cleanup_point return <retval> = __mingw_strtof (_Str, _EndPtr)>>;
}


;; Function double wcstod(const wchar_t*, wchar_t**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_wcstod (_Str, _EndPtr)>>;


;; Function float wcstof(const wchar_t*, wchar_t**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_wcstof (_Str, _EndPtr)>>;


;; Function void* _MarkAllocaS(void*, unsigned int) (null)
;; enabled by -tree-original


if (_Ptr != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(unsigned int *) _Ptr = _Marker) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_Ptr = _Ptr + 16) >>>>>;
  }
return <retval> = _Ptr;


;; Function void _freea(void*) (null)
;; enabled by -tree-original


{
  unsigned int _Marker;

    unsigned int _Marker;
  if (_Memory != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_Memory = _Memory + 18446744073709551600) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_Marker = *(unsigned int *) _Memory) >>>>>;
      if (_Marker == 56797)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  free (_Memory) >>>>>;
        }
    }
}


;; Function long int std::abs(long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__i>;


;; Function long long int std::abs(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr double std::abs(double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::abs(float) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::abs(long double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __int128 std::abs(__int128) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __float128 std::abs(__float128) (null)
;; enabled by -tree-original


return <retval> = __x < 0.0 ? -NON_LVALUE_EXPR <__x> : __x;


;; Function ldiv_t std::div(long int, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.4831, ldiv (__i, __j)>>>;


;; Function lldiv_t __gnu_cxx::div(long long int, long long int) (null)
;; enabled by -tree-original


{
  struct lldiv_t __q [value-expr: <retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval>.quot = __n / __d) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval>.rem = __n % __d) >>>>>;
  <<cleanup_point return <retval>>>;
}


;; Function size_t wcsnlen_s(const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _src != 0B ? wcsnlen (_src, _count) : 0>>;


;; Function bool __gnu_cxx::__is_null_pointer(std::nullptr_t) (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr float std::acos(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acosf (__x)>>;


;; Function constexpr long double std::acos(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acosl (__x)>>;


;; Function constexpr float std::asin(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_asinf (__x)>>;


;; Function constexpr long double std::asin(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_asinl (__x)>>;


;; Function constexpr float std::atan(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_atanf (__x);


;; Function constexpr long double std::atan(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_atanl (__x);


;; Function constexpr float std::atan2(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atan2f (__y, __x)>>;


;; Function constexpr long double std::atan2(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atan2l (__y, __x)>>;


;; Function constexpr float std::ceil(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_ceilf (__x);


;; Function constexpr long double std::ceil(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_ceill (__x);


;; Function constexpr float std::cos(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_cosf (__x);


;; Function constexpr long double std::cos(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_cosl (__x);


;; Function constexpr float std::cosh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_coshf (__x)>>;


;; Function constexpr long double std::cosh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_coshl (__x)>>;


;; Function constexpr float std::exp(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expf (__x)>>;


;; Function constexpr long double std::exp(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expl (__x)>>;


;; Function constexpr float std::fabs(float) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::fabs(long double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::floor(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_floorf (__x);


;; Function constexpr long double std::floor(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_floorl (__x);


;; Function constexpr float std::fmod(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fmodf (__x, __y)>>;


;; Function constexpr long double std::fmod(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fmodl (__x, __y)>>;


;; Function float std::frexp(float, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_frexpf (__x, __exp)>>;


;; Function long double std::frexp(long double, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_frexpl (__x, __exp)>>;


;; Function constexpr float std::ldexp(float, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ldexpf (__x, __exp)>>;


;; Function constexpr long double std::ldexp(long double, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ldexpl (__x, __exp)>>;


;; Function constexpr float std::log(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logf (__x)>>;


;; Function constexpr long double std::log(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logl (__x)>>;


;; Function constexpr float std::log10(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log10f (__x)>>;


;; Function constexpr long double std::log10(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log10l (__x)>>;


;; Function float std::modf(float, float*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_modff (__x, __iptr)>>;


;; Function long double std::modf(long double, long double*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_modfl (__x, __iptr)>>;


;; Function constexpr float std::pow(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_powf (__x, __y)>>;


;; Function constexpr long double std::pow(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_powl (__x, __y)>>;


;; Function constexpr float std::sin(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_sinf (__x);


;; Function constexpr long double std::sin(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_sinl (__x);


;; Function constexpr float std::sinh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sinhf (__x)>>;


;; Function constexpr long double std::sinh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sinhl (__x)>>;


;; Function constexpr float std::sqrt(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sqrtf (__x)>>;


;; Function constexpr long double std::sqrt(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sqrtl (__x)>>;


;; Function constexpr float std::tan(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanf (__x);


;; Function constexpr long double std::tan(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanl (__x);


;; Function constexpr float std::tanh(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanhf (__x);


;; Function constexpr long double std::tanh(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanhl (__x);


;; Function constexpr int std::fpclassify(float) (null)
;; enabled by -tree-original


return <retval> = SAVE_EXPR <ABS_EXPR <__x>> ord SAVE_EXPR <ABS_EXPR <__x>> ? SAVE_EXPR <ABS_EXPR <__x>> u<= 3.4028234663852885981170418348451692544e+38 ? SAVE_EXPR <ABS_EXPR <__x>> >= 1.17549435082228750796873653722224567781866555677e-38 ? 1024 : SAVE_EXPR <ABS_EXPR <__x>> == 0.0 ? 16384 : 17408 : 1280 : 256;


;; Function constexpr int std::fpclassify(double) (null)
;; enabled by -tree-original


return <retval> = SAVE_EXPR <ABS_EXPR <__x>> ord SAVE_EXPR <ABS_EXPR <__x>> ? SAVE_EXPR <ABS_EXPR <__x>> u<= 1.79769313486231570814527423731704356798070567526e+308 ? SAVE_EXPR <ABS_EXPR <__x>> >= 2.22507385850720138309023271733240406421921598046e-308 ? 1024 : SAVE_EXPR <ABS_EXPR <__x>> == 0.0 ? 16384 : 17408 : 1280 : 256;


;; Function constexpr int std::fpclassify(long double) (null)
;; enabled by -tree-original


return <retval> = SAVE_EXPR <ABS_EXPR <__x>> ord SAVE_EXPR <ABS_EXPR <__x>> ? SAVE_EXPR <ABS_EXPR <__x>> u<= 1.1897314953572317650212638530309702051690633223e+4932 ? SAVE_EXPR <ABS_EXPR <__x>> >= 3.36210314311209350626267781732175260259807934483e-4932 ? 1024 : SAVE_EXPR <ABS_EXPR <__x>> == 0.0 ? 16384 : 17408 : 1280 : 256;


;; Function constexpr bool std::isfinite(float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 3.4028234663852885981170418348451692544e+38);


;; Function constexpr bool std::isfinite(double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 1.79769313486231570814527423731704356798070567526e+308);


;; Function constexpr bool std::isfinite(long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 1.1897314953572317650212638530309702051690633223e+4932);


;; Function constexpr bool std::isinf(float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u<= 3.4028234663852885981170418348451692544e+38);


;; Function constexpr bool std::isinf(double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u<= 1.79769313486231570814527423731704356798070567526e+308);


;; Function constexpr bool std::isinf(long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u<= 1.1897314953572317650212638530309702051690633223e+4932);


;; Function constexpr bool std::isnan(float) (null)
;; enabled by -tree-original


return <retval> = __x unord __x ? 1 : 0;


;; Function constexpr bool std::isnan(double) (null)
;; enabled by -tree-original


return <retval> = __x unord __x ? 1 : 0;


;; Function constexpr bool std::isnan(long double) (null)
;; enabled by -tree-original


return <retval> = __x unord __x ? 1 : 0;


;; Function constexpr bool std::isnormal(float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 3.4028234663852885981170418348451692544e+38) && (bool) !(ABS_EXPR <__x> u< 1.17549435082228750796873653722224567781866555677e-38);


;; Function constexpr bool std::isnormal(double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 1.79769313486231570814527423731704356798070567526e+308) && (bool) !(ABS_EXPR <__x> u< 2.22507385850720138309023271733240406421921598046e-308);


;; Function constexpr bool std::isnormal(long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(ABS_EXPR <__x> u> 1.1897314953572317650212638530309702051690633223e+4932) && (bool) !(ABS_EXPR <__x> u< 3.36210314311209350626267781732175260259807934483e-4932);


;; Function constexpr bool std::signbit(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_signbit (__x) != 0;


;; Function constexpr bool std::signbit(double) (null)
;; enabled by -tree-original


return <retval> = __builtin_signbit (__x) != 0;


;; Function constexpr bool std::signbit(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_signbit (__x) != 0;


;; Function constexpr bool std::isgreater(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u<= __y);


;; Function constexpr bool std::isgreater(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u<= __y);


;; Function constexpr bool std::isgreater(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u<= __y);


;; Function constexpr bool std::isgreaterequal(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u< __y);


;; Function constexpr bool std::isgreaterequal(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u< __y);


;; Function constexpr bool std::isgreaterequal(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u< __y);


;; Function constexpr bool std::isless(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u>= __y);


;; Function constexpr bool std::isless(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u>= __y);


;; Function constexpr bool std::isless(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u>= __y);


;; Function constexpr bool std::islessequal(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u> __y);


;; Function constexpr bool std::islessequal(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u> __y);


;; Function constexpr bool std::islessequal(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u> __y);


;; Function constexpr bool std::islessgreater(float, float) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u== __y);


;; Function constexpr bool std::islessgreater(double, double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u== __y);


;; Function constexpr bool std::islessgreater(long double, long double) (null)
;; enabled by -tree-original


return <retval> = (bool) !(__x u== __y);


;; Function constexpr bool std::isunordered(float, float) (null)
;; enabled by -tree-original


return <retval> = __x unord __y ? 1 : 0;


;; Function constexpr bool std::isunordered(double, double) (null)
;; enabled by -tree-original


return <retval> = __x unord __y ? 1 : 0;


;; Function constexpr bool std::isunordered(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __x unord __y ? 1 : 0;


;; Function constexpr float std::acosh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acoshf (__x)>>;


;; Function constexpr long double std::acosh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acoshl (__x)>>;


;; Function constexpr float std::asinh(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_asinhf (__x);


;; Function constexpr long double std::asinh(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_asinhl (__x);


;; Function constexpr float std::atanh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atanhf (__x)>>;


;; Function constexpr long double std::atanh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atanhl (__x)>>;


;; Function constexpr float std::cbrt(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_cbrtf (__x);


;; Function constexpr long double std::cbrt(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_cbrtl (__x);


;; Function constexpr float std::copysign(float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_copysignf (__x, __y);


;; Function constexpr long double std::copysign(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_copysignl (__x, __y);


;; Function constexpr float std::erf(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_erff (__x);


;; Function constexpr long double std::erf(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_erfl (__x);


;; Function constexpr float std::erfc(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_erfcf (__x)>>;


;; Function constexpr long double std::erfc(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_erfcl (__x)>>;


;; Function constexpr float std::exp2(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_exp2f (__x)>>;


;; Function constexpr long double std::exp2(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_exp2l (__x)>>;


;; Function constexpr float std::expm1(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expm1f (__x)>>;


;; Function constexpr long double std::expm1(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expm1l (__x)>>;


;; Function constexpr float std::fdim(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fdimf (__x, __y)>>;


;; Function constexpr long double std::fdim(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fdiml (__x, __y)>>;


;; Function constexpr float std::fma(float, float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmaf (__x, __y, __z);


;; Function constexpr long double std::fma(long double, long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmal (__x, __y, __z);


;; Function constexpr float std::fmax(float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmaxf (__x, __y);


;; Function constexpr long double std::fmax(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmaxl (__x, __y);


;; Function constexpr float std::fmin(float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_fminf (__x, __y);


;; Function constexpr long double std::fmin(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_fminl (__x, __y);


;; Function constexpr float std::hypot(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_hypotf (__x, __y)>>;


;; Function constexpr long double std::hypot(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_hypotl (__x, __y)>>;


;; Function constexpr int std::ilogb(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ilogbf (__x)>>;


;; Function constexpr int std::ilogb(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ilogbl (__x)>>;


;; Function constexpr float std::lgamma(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lgammaf (__x)>>;


;; Function constexpr long double std::lgamma(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lgammal (__x)>>;


;; Function constexpr long long int std::llrint(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llrintf (__x)>>;


;; Function constexpr long long int std::llrint(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llrintl (__x)>>;


;; Function constexpr long long int std::llround(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llroundf (__x)>>;


;; Function constexpr long long int std::llround(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llroundl (__x)>>;


;; Function constexpr float std::log1p(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log1pf (__x)>>;


;; Function constexpr long double std::log1p(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log1pl (__x)>>;


;; Function constexpr float std::log2(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log2f (__x)>>;


;; Function constexpr long double std::log2(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log2l (__x)>>;


;; Function constexpr float std::logb(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logbf (__x)>>;


;; Function constexpr long double std::logb(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logbl (__x)>>;


;; Function constexpr long int std::lrint(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lrintf (__x)>>;


;; Function constexpr long int std::lrint(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lrintl (__x)>>;


;; Function constexpr long int std::lround(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lroundf (__x)>>;


;; Function constexpr long int std::lround(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lroundl (__x)>>;


;; Function constexpr float std::nearbyint(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_nearbyintf (__x);


;; Function constexpr long double std::nearbyint(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_nearbyintl (__x);


;; Function constexpr float std::nextafter(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nextafterf (__x, __y)>>;


;; Function constexpr long double std::nextafter(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nextafterl (__x, __y)>>;


;; Function constexpr float std::nexttoward(float, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nexttowardf (__x, __y)>>;


;; Function constexpr long double std::nexttoward(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nexttowardl (__x, __y)>>;


;; Function constexpr float std::remainder(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remainderf (__x, __y)>>;


;; Function constexpr long double std::remainder(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remainderl (__x, __y)>>;


;; Function float std::remquo(float, float, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remquof (__x, __y, __pquo)>>;


;; Function long double std::remquo(long double, long double, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remquol (__x, __y, __pquo)>>;


;; Function constexpr float std::rint(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_rintf (__x);


;; Function constexpr long double std::rint(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_rintl (__x);


;; Function constexpr float std::round(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_roundf (__x);


;; Function constexpr long double std::round(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_roundl (__x);


;; Function constexpr float std::scalbln(float, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalblnf (__x, __ex)>>;


;; Function constexpr long double std::scalbln(long double, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalblnl (__x, __ex)>>;


;; Function constexpr float std::scalbn(float, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalbnf (__x, __ex)>>;


;; Function constexpr long double std::scalbn(long double, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalbnl (__x, __ex)>>;


;; Function constexpr float std::tgamma(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_tgammaf (__x)>>;


;; Function constexpr long double std::tgamma(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_tgammal (__x)>>;


;; Function constexpr float std::trunc(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_truncf (__x);


;; Function constexpr long double std::trunc(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_truncl (__x);


;; Function void _mm_empty() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_emms () >>>>>;


;; Function void _m_empty() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_empty () >>>>>;


;; Function __m64 _mm_cvtsi32_si64(int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_vec_init_v2si (__i, 0);


;; Function __m64 _m_from_int(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cvtsi32_si64 (__i)>>;


;; Function __m64 _m_from_int64(long long int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__i);


;; Function __m64 _mm_cvtsi64_m64(long long int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__i);


;; Function __m64 _mm_cvtsi64x_si64(long long int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__i);


;; Function __m64 _mm_set_pi64x(long long int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__i);


;; Function int _mm_cvtsi64_si32(__m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_vec_ext_v2si (NON_LVALUE_EXPR <__i>, 0);


;; Function int _m_to_int(__m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cvtsi64_si32 (__i)>>;


;; Function long long int _m_to_int64(__m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<long long int>(__i);


;; Function long long int _mm_cvtm64_si64(__m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<long long int>(__i);


;; Function long long int _mm_cvtsi64_si64x(__m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<long long int>(__i);


;; Function __m64 _mm_packs_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_packsswb (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_packsswb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_packs_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_packs_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_packssdw (NON_LVALUE_EXPR <__m1>, NON_LVALUE_EXPR <__m2>));


;; Function __m64 _m_packssdw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_packs_pi32 (__m1, __m2)>>;


;; Function __m64 _mm_packs_pu16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_packuswb (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_packuswb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_packs_pu16 (__m1, __m2)>>;


;; Function __m64 _mm_unpackhi_pi8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_punpckhbw (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_punpckhbw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_unpackhi_pi8 (__m1, __m2)>>;


;; Function __m64 _mm_unpackhi_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_punpckhwd (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_punpckhwd(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_unpackhi_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_unpackhi_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_punpckhdq (NON_LVALUE_EXPR <__m1>, NON_LVALUE_EXPR <__m2>);


;; Function __m64 _m_punpckhdq(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_unpackhi_pi32 (__m1, __m2)>>;


;; Function __m64 _mm_unpacklo_pi8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_punpcklbw (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_punpcklbw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_unpacklo_pi8 (__m1, __m2)>>;


;; Function __m64 _mm_unpacklo_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_punpcklwd (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_punpcklwd(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_unpacklo_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_unpacklo_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_punpckldq (NON_LVALUE_EXPR <__m1>, NON_LVALUE_EXPR <__m2>);


;; Function __m64 _m_punpckldq(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_unpacklo_pi32 (__m1, __m2)>>;


;; Function __m64 _mm_add_pi8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_paddb (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_paddb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_add_pi8 (__m1, __m2)>>;


;; Function __m64 _mm_add_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_paddw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_paddw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_add_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_add_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_paddd (NON_LVALUE_EXPR <__m1>, NON_LVALUE_EXPR <__m2>);


;; Function __m64 _m_paddd(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_add_pi32 (__m1, __m2)>>;


;; Function __m64 _mm_add_si64(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_paddq (VIEW_CONVERT_EXPR<__v1di>(__m1), VIEW_CONVERT_EXPR<__v1di>(__m2)));


;; Function __m64 _mm_adds_pi8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_paddsb (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_paddsb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_adds_pi8 (__m1, __m2)>>;


;; Function __m64 _mm_adds_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_paddsw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_paddsw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_adds_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_adds_pu8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_paddusb (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_paddusb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_adds_pu8 (__m1, __m2)>>;


;; Function __m64 _mm_adds_pu16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_paddusw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_paddusw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_adds_pu16 (__m1, __m2)>>;


;; Function __m64 _mm_sub_pi8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psubb (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_psubb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_sub_pi8 (__m1, __m2)>>;


;; Function __m64 _mm_sub_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psubw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_psubw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_sub_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_sub_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psubd (NON_LVALUE_EXPR <__m1>, NON_LVALUE_EXPR <__m2>);


;; Function __m64 _m_psubd(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_sub_pi32 (__m1, __m2)>>;


;; Function __m64 _mm_sub_si64(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psubq (VIEW_CONVERT_EXPR<__v1di>(__m1), VIEW_CONVERT_EXPR<__v1di>(__m2)));


;; Function __m64 _mm_subs_pi8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psubsb (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_psubsb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_subs_pi8 (__m1, __m2)>>;


;; Function __m64 _mm_subs_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psubsw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_psubsw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_subs_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_subs_pu8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psubusb (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_psubusb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_subs_pu8 (__m1, __m2)>>;


;; Function __m64 _mm_subs_pu16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psubusw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_psubusw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_subs_pu16 (__m1, __m2)>>;


;; Function __m64 _mm_madd_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pmaddwd (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2));


;; Function __m64 _m_pmaddwd(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_madd_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_mulhi_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pmulhw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_pmulhw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_mulhi_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_mullo_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pmullw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_pmullw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_mullo_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_sll_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psllw (VIEW_CONVERT_EXPR<__v4hi>(__m), VIEW_CONVERT_EXPR<__v4hi>(__count)));


;; Function __m64 _m_psllw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_sll_pi16 (__m, __count)>>;


;; Function __m64 _mm_slli_pi16(__m64, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psllwi (VIEW_CONVERT_EXPR<__v4hi>(__m), __count));


;; Function __m64 _m_psllwi(__m64, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_slli_pi16 (__m, __count)>>;


;; Function __m64 _mm_sll_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pslld (NON_LVALUE_EXPR <__m>, NON_LVALUE_EXPR <__count>);


;; Function __m64 _m_pslld(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_sll_pi32 (__m, __count)>>;


;; Function __m64 _mm_slli_pi32(__m64, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pslldi (NON_LVALUE_EXPR <__m>, __count);


;; Function __m64 _m_pslldi(__m64, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_slli_pi32 (__m, __count)>>;


;; Function __m64 _mm_sll_si64(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psllq (VIEW_CONVERT_EXPR<__v1di>(__m), VIEW_CONVERT_EXPR<__v1di>(__count)));


;; Function __m64 _m_psllq(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_sll_si64 (__m, __count)>>;


;; Function __m64 _mm_slli_si64(__m64, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psllqi (VIEW_CONVERT_EXPR<__v1di>(__m), __count));


;; Function __m64 _m_psllqi(__m64, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_slli_si64 (__m, __count)>>;


;; Function __m64 _mm_sra_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psraw (VIEW_CONVERT_EXPR<__v4hi>(__m), VIEW_CONVERT_EXPR<__v4hi>(__count)));


;; Function __m64 _m_psraw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_sra_pi16 (__m, __count)>>;


;; Function __m64 _mm_srai_pi16(__m64, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psrawi (VIEW_CONVERT_EXPR<__v4hi>(__m), __count));


;; Function __m64 _m_psrawi(__m64, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_srai_pi16 (__m, __count)>>;


;; Function __m64 _mm_sra_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psrad (NON_LVALUE_EXPR <__m>, NON_LVALUE_EXPR <__count>);


;; Function __m64 _m_psrad(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_sra_pi32 (__m, __count)>>;


;; Function __m64 _mm_srai_pi32(__m64, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psradi (NON_LVALUE_EXPR <__m>, __count);


;; Function __m64 _m_psradi(__m64, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_srai_pi32 (__m, __count)>>;


;; Function __m64 _mm_srl_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psrlw (VIEW_CONVERT_EXPR<__v4hi>(__m), VIEW_CONVERT_EXPR<__v4hi>(__count)));


;; Function __m64 _m_psrlw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_srl_pi16 (__m, __count)>>;


;; Function __m64 _mm_srli_pi16(__m64, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psrlwi (VIEW_CONVERT_EXPR<__v4hi>(__m), __count));


;; Function __m64 _m_psrlwi(__m64, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_srli_pi16 (__m, __count)>>;


;; Function __m64 _mm_srl_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psrld (NON_LVALUE_EXPR <__m>, NON_LVALUE_EXPR <__count>);


;; Function __m64 _m_psrld(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_srl_pi32 (__m, __count)>>;


;; Function __m64 _mm_srli_pi32(__m64, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psrldi (NON_LVALUE_EXPR <__m>, __count);


;; Function __m64 _m_psrldi(__m64, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_srli_pi32 (__m, __count)>>;


;; Function __m64 _mm_srl_si64(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psrlq (VIEW_CONVERT_EXPR<__v1di>(__m), VIEW_CONVERT_EXPR<__v1di>(__count)));


;; Function __m64 _m_psrlq(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_srl_si64 (__m, __count)>>;


;; Function __m64 _mm_srli_si64(__m64, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psrlqi (VIEW_CONVERT_EXPR<__v1di>(__m), __count));


;; Function __m64 _m_psrlqi(__m64, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_srli_si64 (__m, __count)>>;


;; Function __m64 _mm_and_si64(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pand (__m1, __m2);


;; Function __m64 _m_pand(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_and_si64 (__m1, __m2)>>;


;; Function __m64 _mm_andnot_si64(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pandn (__m1, __m2);


;; Function __m64 _m_pandn(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_andnot_si64 (__m1, __m2)>>;


;; Function __m64 _mm_or_si64(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_por (__m1, __m2);


;; Function __m64 _m_por(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_or_si64 (__m1, __m2)>>;


;; Function __m64 _mm_xor_si64(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pxor (__m1, __m2);


;; Function __m64 _m_pxor(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_xor_si64 (__m1, __m2)>>;


;; Function __m64 _mm_cmpeq_pi8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pcmpeqb (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_pcmpeqb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cmpeq_pi8 (__m1, __m2)>>;


;; Function __m64 _mm_cmpgt_pi8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pcmpgtb (VIEW_CONVERT_EXPR<__v8qi>(__m1), VIEW_CONVERT_EXPR<__v8qi>(__m2)));


;; Function __m64 _m_pcmpgtb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cmpgt_pi8 (__m1, __m2)>>;


;; Function __m64 _mm_cmpeq_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pcmpeqw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_pcmpeqw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cmpeq_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_cmpgt_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pcmpgtw (VIEW_CONVERT_EXPR<__v4hi>(__m1), VIEW_CONVERT_EXPR<__v4hi>(__m2)));


;; Function __m64 _m_pcmpgtw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cmpgt_pi16 (__m1, __m2)>>;


;; Function __m64 _mm_cmpeq_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pcmpeqd (NON_LVALUE_EXPR <__m1>, NON_LVALUE_EXPR <__m2>);


;; Function __m64 _m_pcmpeqd(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cmpeq_pi32 (__m1, __m2)>>;


;; Function __m64 _mm_cmpgt_pi32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pcmpgtd (NON_LVALUE_EXPR <__m1>, NON_LVALUE_EXPR <__m2>);


;; Function __m64 _m_pcmpgtd(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cmpgt_pi32 (__m1, __m2)>>;


;; Function __m64 _mm_setzero_si64() (null)
;; enabled by -tree-original


return <retval> = { 0, 0 };


;; Function __m64 _mm_set_pi32(int, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_vec_init_v2si (__i0, __i1);


;; Function __m64 _mm_set_pi16(short int, short int, short int, short int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_vec_init_v4hi ((int) __w0, (int) __w1, (int) __w2, (int) __w3));


;; Function __m64 _mm_set_pi8(char, char, char, char, char, char, char, char) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_vec_init_v8qi ((int) __b0, (int) __b1, (int) __b2, (int) __b3, (int) __b4, (int) __b5, (int) __b6, (int) __b7));


;; Function __m64 _mm_setr_pi32(int, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_pi32 (__i1, __i0)>>;


;; Function __m64 _mm_setr_pi16(short int, short int, short int, short int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_pi16 ((int) __w3, (int) __w2, (int) __w1, (int) __w0)>>;


;; Function __m64 _mm_setr_pi8(char, char, char, char, char, char, char, char) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_pi8 ((int) __b7, (int) __b6, (int) __b5, (int) __b4, (int) __b3, (int) __b2, (int) __b1, (int) __b0)>>;


;; Function __m64 _mm_set1_pi32(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_pi32 (__i, __i)>>;


;; Function __m64 _mm_set1_pi16(short int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_pi16 ((int) __w, (int) __w, (int) __w, (int) __w)>>;


;; Function __m64 _mm_set1_pi8(char) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_pi8 ((int) __b, (int) __b, (int) __b, (int) __b, (int) __b, (int) __b, (int) __b, (int) __b)>>;


;; Function __m128 _mm_undefined_ps() (null)
;; enabled by -tree-original


{
  __m128 __Y = __Y;

    __m128 __Y = __Y;
  return <retval> = __Y;
}


;; Function __m128 _mm_setzero_ps() (null)
;; enabled by -tree-original


return <retval> = { 0.0, 0.0, 0.0, 0.0 };


;; Function __m128 _mm_add_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_addss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_sub_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_subss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_mul_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_mulss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_div_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_divss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_sqrt_ss(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_sqrtss (NON_LVALUE_EXPR <__A>);


;; Function __m128 _mm_rcp_ss(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_rcpss (NON_LVALUE_EXPR <__A>);


;; Function __m128 _mm_rsqrt_ss(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_rsqrtss (NON_LVALUE_EXPR <__A>);


;; Function __m128 _mm_min_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_minss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_max_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_maxss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_add_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __A + __B;


;; Function __m128 _mm_sub_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __A - __B;


;; Function __m128 _mm_mul_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __A * __B;


;; Function __m128 _mm_div_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __A / __B;


;; Function __m128 _mm_sqrt_ps(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_sqrtps (NON_LVALUE_EXPR <__A>);


;; Function __m128 _mm_rcp_ps(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_rcpps (NON_LVALUE_EXPR <__A>);


;; Function __m128 _mm_rsqrt_ps(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_rsqrtps (NON_LVALUE_EXPR <__A>);


;; Function __m128 _mm_min_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_minps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_max_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_maxps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_and_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_andps (__A, __B);


;; Function __m128 _mm_andnot_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_andnps (__A, __B);


;; Function __m128 _mm_or_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_orps (__A, __B);


;; Function __m128 _mm_xor_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_xorps (__A, __B);


;; Function __m128 _mm_cmpeq_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpeqss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmplt_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpltss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmple_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpless (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpgt_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movss (NON_LVALUE_EXPR <__A>, __builtin_ia32_cmpltss (NON_LVALUE_EXPR <__B>, NON_LVALUE_EXPR <__A>));


;; Function __m128 _mm_cmpge_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movss (NON_LVALUE_EXPR <__A>, __builtin_ia32_cmpless (NON_LVALUE_EXPR <__B>, NON_LVALUE_EXPR <__A>));


;; Function __m128 _mm_cmpneq_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpneqss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpnlt_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpnltss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpnle_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpnless (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpngt_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movss (NON_LVALUE_EXPR <__A>, __builtin_ia32_cmpnltss (NON_LVALUE_EXPR <__B>, NON_LVALUE_EXPR <__A>));


;; Function __m128 _mm_cmpnge_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movss (NON_LVALUE_EXPR <__A>, __builtin_ia32_cmpnless (NON_LVALUE_EXPR <__B>, NON_LVALUE_EXPR <__A>));


;; Function __m128 _mm_cmpord_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpordss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpunord_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpunordss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpeq_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpeqps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmplt_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpltps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmple_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpleps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpgt_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpgtps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpge_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpgeps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpneq_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpneqps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpnlt_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpnltps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpnle_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpnleps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpngt_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpngtps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpnge_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpngeps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpord_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpordps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cmpunord_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpunordps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comieq_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comieq (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comilt_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comilt (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comile_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comile (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comigt_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comigt (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comige_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comige (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comineq_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comineq (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomieq_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomieq (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomilt_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomilt (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomile_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomile (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomigt_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomigt (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomige_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomige (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomineq_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomineq (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_cvtss_si32(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtss2si (NON_LVALUE_EXPR <__A>);


;; Function int _mm_cvt_ss2si(__m128) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cvtss_si32 (__A)>>;


;; Function long long int _mm_cvtss_si64(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtss2si64 (NON_LVALUE_EXPR <__A>);


;; Function long long int _mm_cvtss_si64x(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtss2si64 (NON_LVALUE_EXPR <__A>);


;; Function __m64 _mm_cvtps_pi32(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtps2pi (NON_LVALUE_EXPR <__A>);


;; Function __m64 _mm_cvt_ps2pi(__m128) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cvtps_pi32 (__A)>>;


;; Function int _mm_cvttss_si32(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvttss2si (NON_LVALUE_EXPR <__A>);


;; Function int _mm_cvtt_ss2si(__m128) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cvttss_si32 (__A)>>;


;; Function long long int _mm_cvttss_si64(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvttss2si64 (NON_LVALUE_EXPR <__A>);


;; Function long long int _mm_cvttss_si64x(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvttss2si64 (NON_LVALUE_EXPR <__A>);


;; Function __m64 _mm_cvttps_pi32(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvttps2pi (NON_LVALUE_EXPR <__A>);


;; Function __m64 _mm_cvtt_ps2pi(__m128) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cvttps_pi32 (__A)>>;


;; Function __m128 _mm_cvtsi32_ss(__m128, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsi2ss (NON_LVALUE_EXPR <__A>, __B);


;; Function __m128 _mm_cvt_si2ss(__m128, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cvtsi32_ss (__A, __B)>>;


;; Function __m128 _mm_cvtsi64_ss(__m128, long long int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsi642ss (NON_LVALUE_EXPR <__A>, __B);


;; Function __m128 _mm_cvtsi64x_ss(__m128, long long int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsi642ss (NON_LVALUE_EXPR <__A>, __B);


;; Function __m128 _mm_cvtpi32_ps(__m128, __m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtpi2ps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_cvt_pi2ps(__m128, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_cvtpi32_ps (__A, __B)>>;


;; Function __m128 _mm_cvtpi16_ps(__m64) (null)
;; enabled by -tree-original


{
  __v4hi __sign;
  __v2si __hisi;
  __v2si __losi;
  __v4sf __zero;
  __v4sf __ra;
  __v4sf __rb;

    __v4hi __sign;
    __v2si __hisi;
    __v2si __losi;
    __v4sf __zero;
    __v4sf __ra;
    __v4sf __rb;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__sign = __builtin_ia32_pcmpgtw ({ 0, 0, 0, 0 }, VIEW_CONVERT_EXPR<__v4hi>(__A))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__losi = VIEW_CONVERT_EXPR<__v2si>(__builtin_ia32_punpcklwd (VIEW_CONVERT_EXPR<__v4hi>(__A), __sign))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__hisi = VIEW_CONVERT_EXPR<__v2si>(__builtin_ia32_punpckhwd (VIEW_CONVERT_EXPR<__v4hi>(__A), __sign))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__zero = _mm_setzero_ps ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ra = __builtin_ia32_cvtpi2ps (__zero, __losi)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__rb = __builtin_ia32_cvtpi2ps (__ra, __hisi)) >>>>>;
  return <retval> = __builtin_ia32_movlhps (__ra, __rb);
}


;; Function __m128 _mm_cvtpu16_ps(__m64) (null)
;; enabled by -tree-original


{
  __v2si __hisi;
  __v2si __losi;
  __v4sf __zero;
  __v4sf __ra;
  __v4sf __rb;

    __v2si __hisi;
    __v2si __losi;
    __v4sf __zero;
    __v4sf __ra;
    __v4sf __rb;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__losi = VIEW_CONVERT_EXPR<__v2si>(__builtin_ia32_punpcklwd (VIEW_CONVERT_EXPR<__v4hi>(__A), { 0, 0, 0, 0 }))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__hisi = VIEW_CONVERT_EXPR<__v2si>(__builtin_ia32_punpckhwd (VIEW_CONVERT_EXPR<__v4hi>(__A), { 0, 0, 0, 0 }))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__zero = _mm_setzero_ps ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ra = __builtin_ia32_cvtpi2ps (__zero, __losi)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__rb = __builtin_ia32_cvtpi2ps (__ra, __hisi)) >>>>>;
  return <retval> = __builtin_ia32_movlhps (__ra, __rb);
}


;; Function __m128 _mm_cvtpi8_ps(__m64) (null)
;; enabled by -tree-original


{
  __v8qi __sign;

    __v8qi __sign;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__sign = __builtin_ia32_pcmpgtb ({ 0, 0, 0, 0, 0, 0, 0, 0 }, VIEW_CONVERT_EXPR<__v8qi>(__A))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__A = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_punpcklbw (VIEW_CONVERT_EXPR<__v8qi>(__A), __sign))) >>>>>;
  <<cleanup_point return <retval> = _mm_cvtpi16_ps (__A)>>;
}


;; Function __m128 _mm_cvtpu8_ps(__m64) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__A = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_punpcklbw (VIEW_CONVERT_EXPR<__v8qi>(__A), { 0, 0, 0, 0, 0, 0, 0, 0 }))) >>>>>;
<<cleanup_point return <retval> = _mm_cvtpu16_ps (__A)>>;


;; Function __m128 _mm_cvtpi32x2_ps(__m64, __m64) (null)
;; enabled by -tree-original


{
  __v4sf __zero;
  __v4sf __sfa = __builtin_ia32_cvtpi2ps (__zero, NON_LVALUE_EXPR <__A>);
  __v4sf __sfb = __builtin_ia32_cvtpi2ps (__sfa, NON_LVALUE_EXPR <__B>);

    __v4sf __zero;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__zero = _mm_setzero_ps ()) >>>>>;
    __v4sf __sfa = __builtin_ia32_cvtpi2ps (__zero, NON_LVALUE_EXPR <__A>);
    __v4sf __sfb = __builtin_ia32_cvtpi2ps (__sfa, NON_LVALUE_EXPR <__B>);
  return <retval> = __builtin_ia32_movlhps (__sfa, __sfb);
}


;; Function __m64 _mm_cvtps_pi16(__m128) (null)
;; enabled by -tree-original


{
  __v4sf __hisf = __A;
  __v4sf __losf = __builtin_ia32_movhlps (__hisf, __hisf);
  __v2si __hisi = __builtin_ia32_cvtps2pi (__hisf);
  __v2si __losi = __builtin_ia32_cvtps2pi (__losf);

    __v4sf __hisf = __A;
    __v4sf __losf = __builtin_ia32_movhlps (__hisf, __hisf);
    __v2si __hisi = __builtin_ia32_cvtps2pi (__hisf);
    __v2si __losi = __builtin_ia32_cvtps2pi (__losf);
  return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_packssdw (__hisi, __losi));
}


;; Function __m64 _mm_cvtps_pi8(__m128) (null)
;; enabled by -tree-original


{
  __v4hi __tmp;

    __v4hi __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = VIEW_CONVERT_EXPR<__v4hi>(_mm_cvtps_pi16 (__A))) >>>>>;
  return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_packsswb (__tmp, { 0, 0, 0, 0 }));
}


;; Function __m128 _mm_unpackhi_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_unpckhps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_unpacklo_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_unpcklps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_loadh_pi(__m128, const __m64*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ia32_loadhps (NON_LVALUE_EXPR <__A>, (const __v2sf *) __P)>>;


;; Function void _mm_storeh_pi(__m64*, __m128) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_storehps ((__v2sf *) __P, NON_LVALUE_EXPR <__A>) >>>>>;


;; Function __m128 _mm_movehl_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movhlps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_movelh_ps(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movlhps (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128 _mm_loadl_pi(__m128, const __m64*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ia32_loadlps (NON_LVALUE_EXPR <__A>, (const __v2sf *) __P)>>;


;; Function void _mm_storel_pi(__m64*, __m128) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_storelps ((__v2sf *) __P, NON_LVALUE_EXPR <__A>) >>>>>;


;; Function int _mm_movemask_ps(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movmskps (NON_LVALUE_EXPR <__A>);


;; Function unsigned int _mm_getcsr() (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_stmxcsr ();


;; Function unsigned int _MM_GET_EXCEPTION_STATE() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_getcsr () & 63>>;


;; Function unsigned int _MM_GET_EXCEPTION_MASK() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_getcsr () & 8064>>;


;; Function unsigned int _MM_GET_ROUNDING_MODE() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_getcsr () & 24576>>;


;; Function unsigned int _MM_GET_FLUSH_ZERO_MODE() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_getcsr () & 32768>>;


;; Function void _mm_setcsr(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_ldmxcsr (__I) >>>>>;


;; Function void _MM_SET_EXCEPTION_STATE(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_setcsr (_mm_getcsr () & 4294967232 | __mask) >>>>>;


;; Function void _MM_SET_EXCEPTION_MASK(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_setcsr (_mm_getcsr () & 4294959231 | __mask) >>>>>;


;; Function void _MM_SET_ROUNDING_MODE(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_setcsr (_mm_getcsr () & 4294942719 | __mode) >>>>>;


;; Function void _MM_SET_FLUSH_ZERO_MODE(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_setcsr (_mm_getcsr () & 4294934527 | __mode) >>>>>;


;; Function __m128 _mm_set_ss(float) (null)
;; enabled by -tree-original


return <retval> = {__F, 0.0, 0.0, 0.0};


;; Function __m128 _mm_set1_ps(float) (null)
;; enabled by -tree-original


return <retval> = {__F, __F, __F, __F};


;; Function __m128 _mm_set_ps1(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set1_ps (__F)>>;


;; Function __m128 _mm_load_ss(const float*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_ss ((float) *__P)>>;


;; Function __m128 _mm_load1_ps(const float*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set1_ps ((float) *__P)>>;


;; Function __m128 _mm_load_ps1(const float*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_load1_ps (__P)>>;


;; Function __m128 _mm_load_ps(const float*) (null)
;; enabled by -tree-original


return <retval> = *(__m128 * {ref-all}) __P;


;; Function __m128 _mm_loadu_ps(const float*) (null)
;; enabled by -tree-original


return <retval> = *(__m128_u * {ref-all}) __P;


;; Function __m128 _mm_loadr_ps(const float*) (null)
;; enabled by -tree-original


{
  __v4sf __tmp = *(__v4sf *) __P;

    __v4sf __tmp = *(__v4sf *) __P;
  return <retval> = __builtin_ia32_shufps (__tmp, __tmp, 27);
}


;; Function __m128 _mm_set_ps(float, float, float, float) (null)
;; enabled by -tree-original


return <retval> = {(float) __W, (float) __X, (float) __Y, (float) __Z};


;; Function __m128 _mm_setr_ps(float, float, float, float) (null)
;; enabled by -tree-original


return <retval> = {__Z, __Y, __X, __W};


;; Function void _mm_store_ss(float*, __m128) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__P = VIEW_CONVERT_EXPR<float[4]>(NON_LVALUE_EXPR <__A>)[0]) >>>>>;


;; Function float _mm_cvtss_f32(__m128) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<float[4]>(NON_LVALUE_EXPR <__A>)[0];


;; Function void _mm_store_ps(float*, __m128) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__m128 * {ref-all}) __P = __A) >>>>>;


;; Function void _mm_storeu_ps(float*, __m128) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__m128_u * {ref-all}) __P = __A) >>>>>;


;; Function void _mm_store1_ps(float*, __m128) (null)
;; enabled by -tree-original


{
  __v4sf __va = __A;
  __v4sf __tmp = __builtin_ia32_shufps (__va, __va, 0);

    __v4sf __va = __A;
    __v4sf __tmp = __builtin_ia32_shufps (__va, __va, 0);
  <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storeu_ps (__P, __tmp) >>>>>;
}


;; Function void _mm_store_ps1(float*, __m128) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_store1_ps (__P, __A) >>>>>;


;; Function void _mm_storer_ps(float*, __m128) (null)
;; enabled by -tree-original


{
  __v4sf __va = __A;
  __v4sf __tmp = __builtin_ia32_shufps (__va, __va, 27);

    __v4sf __va = __A;
    __v4sf __tmp = __builtin_ia32_shufps (__va, __va, 27);
  <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_store_ps (__P, __tmp) >>>>>;
}


;; Function __m128 _mm_move_ss(__m128, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m64 _mm_max_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pmaxsw (VIEW_CONVERT_EXPR<__v4hi>(__A), VIEW_CONVERT_EXPR<__v4hi>(__B)));


;; Function __m64 _m_pmaxsw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_max_pi16 (__A, __B)>>;


;; Function __m64 _mm_max_pu8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pmaxub (VIEW_CONVERT_EXPR<__v8qi>(__A), VIEW_CONVERT_EXPR<__v8qi>(__B)));


;; Function __m64 _m_pmaxub(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_max_pu8 (__A, __B)>>;


;; Function __m64 _mm_min_pi16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pminsw (VIEW_CONVERT_EXPR<__v4hi>(__A), VIEW_CONVERT_EXPR<__v4hi>(__B)));


;; Function __m64 _m_pminsw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_min_pi16 (__A, __B)>>;


;; Function __m64 _mm_min_pu8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pminub (VIEW_CONVERT_EXPR<__v8qi>(__A), VIEW_CONVERT_EXPR<__v8qi>(__B)));


;; Function __m64 _m_pminub(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_min_pu8 (__A, __B)>>;


;; Function int _mm_movemask_pi8(__m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pmovmskb (VIEW_CONVERT_EXPR<__v8qi>(__A));


;; Function int _m_pmovmskb(__m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_movemask_pi8 (__A)>>;


;; Function __m64 _mm_mulhi_pu16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pmulhuw (VIEW_CONVERT_EXPR<__v4hi>(__A), VIEW_CONVERT_EXPR<__v4hi>(__B)));


;; Function __m64 _m_pmulhuw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_mulhi_pu16 (__A, __B)>>;


;; Function void _mm_maskmove_si64(__m64, __m64, char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_maskmovq (VIEW_CONVERT_EXPR<__v8qi>(__A), VIEW_CONVERT_EXPR<__v8qi>(__N), __P) >>>>>;


;; Function void _m_maskmovq(__m64, __m64, char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_maskmove_si64 (__A, __N, __P) >>>>>;


;; Function __m64 _mm_avg_pu8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pavgb (VIEW_CONVERT_EXPR<__v8qi>(__A), VIEW_CONVERT_EXPR<__v8qi>(__B)));


;; Function __m64 _m_pavgb(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_avg_pu8 (__A, __B)>>;


;; Function __m64 _mm_avg_pu16(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pavgw (VIEW_CONVERT_EXPR<__v4hi>(__A), VIEW_CONVERT_EXPR<__v4hi>(__B)));


;; Function __m64 _m_pavgw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_avg_pu16 (__A, __B)>>;


;; Function __m64 _mm_sad_pu8(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_psadbw (VIEW_CONVERT_EXPR<__v8qi>(__A), VIEW_CONVERT_EXPR<__v8qi>(__B)));


;; Function __m64 _m_psadbw(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_sad_pu8 (__A, __B)>>;


;; Function void _mm_stream_pi(__m64*, __m64) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_movntq ((long long unsigned int *) __P, VIEW_CONVERT_EXPR<long long unsigned int>(__A)) >>>>>;


;; Function void _mm_stream_ps(float*, __m128) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_movntps (__P, NON_LVALUE_EXPR <__A>) >>>>>;


;; Function void _mm_sfence() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_sfence () >>>>>;


;; Function void _mm_pause() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_pause () >>>>>;


;; Function __m128d _mm_set_sd(double) (null)
;; enabled by -tree-original


return <retval> = {__F, 0.0};


;; Function __m128d _mm_set1_pd(double) (null)
;; enabled by -tree-original


return <retval> = {__F, __F};


;; Function __m128d _mm_set_pd1(double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set1_pd (__F)>>;


;; Function __m128d _mm_set_pd(double, double) (null)
;; enabled by -tree-original


return <retval> = {__X, __W};


;; Function __m128d _mm_setr_pd(double, double) (null)
;; enabled by -tree-original


return <retval> = {__W, __X};


;; Function __m128d _mm_undefined_pd() (null)
;; enabled by -tree-original


{
  __m128d __Y = __Y;

    __m128d __Y = __Y;
  return <retval> = __Y;
}


;; Function __m128d _mm_setzero_pd() (null)
;; enabled by -tree-original


return <retval> = { 0.0, 0.0 };


;; Function __m128d _mm_move_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_load_pd(const double*) (null)
;; enabled by -tree-original


return <retval> = *(__m128d * {ref-all}) __P;


;; Function __m128d _mm_loadu_pd(const double*) (null)
;; enabled by -tree-original


return <retval> = *(__m128d_u * {ref-all}) __P;


;; Function __m128d _mm_load1_pd(const double*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set1_pd ((double) *__P)>>;


;; Function __m128d _mm_load_sd(const double*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_sd ((double) *__P)>>;


;; Function __m128d _mm_load_pd1(const double*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_load1_pd (__P)>>;


;; Function __m128d _mm_loadr_pd(const double*) (null)
;; enabled by -tree-original


{
  __m128d __tmp;

    __m128d __tmp;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = _mm_load_pd (__P)) >>>>>;
  return <retval> = __builtin_ia32_shufpd (__tmp, __tmp, 1);
}


;; Function void _mm_store_pd(double*, __m128d) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__m128d * {ref-all}) __P = __A) >>>>>;


;; Function void _mm_storeu_pd(double*, __m128d) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__m128d_u * {ref-all}) __P = __A) >>>>>;


;; Function void _mm_store_sd(double*, __m128d) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__P = VIEW_CONVERT_EXPR<double[2]>(NON_LVALUE_EXPR <__A>)[0]) >>>>>;


;; Function double _mm_cvtsd_f64(__m128d) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<double[2]>(NON_LVALUE_EXPR <__A>)[0];


;; Function void _mm_storel_pd(double*, __m128d) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_store_sd (__P, __A) >>>>>;


;; Function void _mm_storeh_pd(double*, __m128d) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__P = VIEW_CONVERT_EXPR<double[2]>(NON_LVALUE_EXPR <__A>)[1]) >>>>>;


;; Function void _mm_store1_pd(double*, __m128d) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_store_pd (__P, __builtin_ia32_shufpd (__A, __A, 0)) >>>>>;


;; Function void _mm_store_pd1(double*, __m128d) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_store1_pd (__P, __A) >>>>>;


;; Function void _mm_storer_pd(double*, __m128d) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  _mm_store_pd (__P, __builtin_ia32_shufpd (__A, __A, 1)) >>>>>;


;; Function int _mm_cvtsi128_si32(__m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_vec_ext_v4si (VIEW_CONVERT_EXPR<__v4si>(__A), 0);


;; Function long long int _mm_cvtsi128_si64(__m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<long long int[2]>(NON_LVALUE_EXPR <__A>)[0];


;; Function long long int _mm_cvtsi128_si64x(__m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<long long int[2]>(NON_LVALUE_EXPR <__A>)[0];


;; Function __m128d _mm_add_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __A + __B;


;; Function __m128d _mm_add_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_addsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_sub_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __A - __B;


;; Function __m128d _mm_sub_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_subsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_mul_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __A * __B;


;; Function __m128d _mm_mul_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_mulsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_div_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __A / __B;


;; Function __m128d _mm_div_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_divsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_sqrt_pd(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_sqrtpd (NON_LVALUE_EXPR <__A>);


;; Function __m128d _mm_sqrt_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


{
  __v2df __tmp = __builtin_ia32_movsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);

    __v2df __tmp = __builtin_ia32_movsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);
  return <retval> = __builtin_ia32_sqrtsd (NON_LVALUE_EXPR <__tmp>);
}


;; Function __m128d _mm_min_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_minpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_min_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_minsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_max_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_maxpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_max_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_maxsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_and_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_andpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_andnot_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_andnpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_or_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_orpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_xor_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_xorpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpeq_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpeqpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmplt_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpltpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmple_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmplepd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpgt_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpgtpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpge_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpgepd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpneq_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpneqpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpnlt_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpnltpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpnle_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpnlepd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpngt_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpngtpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpnge_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpngepd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpord_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpordpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpunord_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpunordpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpeq_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpeqsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmplt_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpltsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmple_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmplesd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpgt_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movsd (NON_LVALUE_EXPR <__A>, __builtin_ia32_cmpltsd (NON_LVALUE_EXPR <__B>, NON_LVALUE_EXPR <__A>));


;; Function __m128d _mm_cmpge_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movsd (NON_LVALUE_EXPR <__A>, __builtin_ia32_cmplesd (NON_LVALUE_EXPR <__B>, NON_LVALUE_EXPR <__A>));


;; Function __m128d _mm_cmpneq_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpneqsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpnlt_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpnltsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpnle_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpnlesd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpngt_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movsd (NON_LVALUE_EXPR <__A>, __builtin_ia32_cmpnltsd (NON_LVALUE_EXPR <__B>, NON_LVALUE_EXPR <__A>));


;; Function __m128d _mm_cmpnge_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movsd (NON_LVALUE_EXPR <__A>, __builtin_ia32_cmpnlesd (NON_LVALUE_EXPR <__B>, NON_LVALUE_EXPR <__A>));


;; Function __m128d _mm_cmpord_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpordsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cmpunord_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cmpunordsd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comieq_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comisdeq (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comilt_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comisdlt (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comile_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comisdle (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comigt_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comisdgt (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comige_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comisdge (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_comineq_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_comisdneq (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomieq_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomisdeq (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomilt_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomisdlt (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomile_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomisdle (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomigt_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomisdgt (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomige_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomisdge (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function int _mm_ucomineq_sd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_ucomisdneq (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128i _mm_set_epi64x(long long int, long long int) (null)
;; enabled by -tree-original


return <retval> = {__q0, __q1};


;; Function __m128i _mm_set_epi64(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi64x (VIEW_CONVERT_EXPR<long long int>(__q1), VIEW_CONVERT_EXPR<long long int>(__q0))>>;


;; Function __m128i _mm_set_epi32(int, int, int, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>({__q0, __q1, __q2, __q3});


;; Function __m128i _mm_set_epi16(short int, short int, short int, short int, short int, short int, short int, short int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>({__q0, __q1, __q2, __q3, __q4, __q5, __q6, __q7});


;; Function __m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>({__q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07, __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15});


;; Function __m128i _mm_set1_epi64x(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi64x (__A, __A)>>;


;; Function __m128i _mm_set1_epi64(__m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi64 (__A, __A)>>;


;; Function __m128i _mm_set1_epi32(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi32 (__A, __A, __A, __A)>>;


;; Function __m128i _mm_set1_epi16(short int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi16 ((int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A)>>;


;; Function __m128i _mm_set1_epi8(char) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi8 ((int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A, (int) __A)>>;


;; Function __m128i _mm_setr_epi64(__m64, __m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi64 (__q1, __q0)>>;


;; Function __m128i _mm_setr_epi32(int, int, int, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi32 (__q3, __q2, __q1, __q0)>>;


;; Function __m128i _mm_setr_epi16(short int, short int, short int, short int, short int, short int, short int, short int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi16 ((int) __q7, (int) __q6, (int) __q5, (int) __q4, (int) __q3, (int) __q2, (int) __q1, (int) __q0)>>;


;; Function __m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi8 ((int) __q15, (int) __q14, (int) __q13, (int) __q12, (int) __q11, (int) __q10, (int) __q09, (int) __q08, (int) __q07, (int) __q06, (int) __q05, (int) __q04, (int) __q03, (int) __q02, (int) __q01, (int) __q00)>>;


;; Function __m128i _mm_load_si128(const __m128i*) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(*__P);


;; Function __m128i _mm_loadu_si128(const __m128i_u*) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(*__P);


;; Function __m128i _mm_loadl_epi64(const __m128i_u*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi64 ({ 0, 0 }, *(__m64_u * {ref-all}) __P)>>;


;; Function void _mm_store_si128(__m128i*, __m128i) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__P = __B) >>>>>;


;; Function void _mm_storeu_si128(__m128i_u*, __m128i) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__P = __B) >>>>>;


;; Function void _mm_storel_epi64(__m128i_u*, __m128i) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__m64_u * {ref-all}) __P = VIEW_CONVERT_EXPR<__m64>(NON_LVALUE_EXPR <VIEW_CONVERT_EXPR<long long int[2]>(NON_LVALUE_EXPR <__B>)[0]>)) >>>>>;


;; Function __m64 _mm_movepi64_pi64(__m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(NON_LVALUE_EXPR <VIEW_CONVERT_EXPR<long long int[2]>(NON_LVALUE_EXPR <__B>)[0]>);


;; Function __m128i _mm_movpi64_epi64(__m64) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi64 ({ 0, 0 }, __A)>>;


;; Function __m128i _mm_move_epi64(__m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movq128 (NON_LVALUE_EXPR <__A>);


;; Function __m128i _mm_undefined_si128() (null)
;; enabled by -tree-original


{
  __m128i __Y = __Y;

    __m128i __Y = __Y;
  return <retval> = __Y;
}


;; Function __m128i _mm_setzero_si128() (null)
;; enabled by -tree-original


return <retval> = { 0, 0 };


;; Function __m128d _mm_cvtepi32_pd(__m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtdq2pd (VIEW_CONVERT_EXPR<__v4si>(__A));


;; Function __m128 _mm_cvtepi32_ps(__m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtdq2ps (VIEW_CONVERT_EXPR<__v4si>(__A));


;; Function __m128i _mm_cvtpd_epi32(__m128d) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_cvtpd2dq (NON_LVALUE_EXPR <__A>));


;; Function __m64 _mm_cvtpd_pi32(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtpd2pi (NON_LVALUE_EXPR <__A>);


;; Function __m128 _mm_cvtpd_ps(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtpd2ps (NON_LVALUE_EXPR <__A>);


;; Function __m128i _mm_cvttpd_epi32(__m128d) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_cvttpd2dq (NON_LVALUE_EXPR <__A>));


;; Function __m64 _mm_cvttpd_pi32(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvttpd2pi (NON_LVALUE_EXPR <__A>);


;; Function __m128d _mm_cvtpi32_pd(__m64) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtpi2pd (NON_LVALUE_EXPR <__A>);


;; Function __m128i _mm_cvtps_epi32(__m128) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_cvtps2dq (NON_LVALUE_EXPR <__A>));


;; Function __m128i _mm_cvttps_epi32(__m128) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_cvttps2dq (NON_LVALUE_EXPR <__A>));


;; Function __m128d _mm_cvtps_pd(__m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtps2pd (NON_LVALUE_EXPR <__A>);


;; Function int _mm_cvtsd_si32(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsd2si (NON_LVALUE_EXPR <__A>);


;; Function long long int _mm_cvtsd_si64(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsd2si64 (NON_LVALUE_EXPR <__A>);


;; Function long long int _mm_cvtsd_si64x(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsd2si64 (NON_LVALUE_EXPR <__A>);


;; Function int _mm_cvttsd_si32(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvttsd2si (NON_LVALUE_EXPR <__A>);


;; Function long long int _mm_cvttsd_si64(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvttsd2si64 (NON_LVALUE_EXPR <__A>);


;; Function long long int _mm_cvttsd_si64x(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvttsd2si64 (NON_LVALUE_EXPR <__A>);


;; Function __m128 _mm_cvtsd_ss(__m128, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsd2ss (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_cvtsi32_sd(__m128d, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsi2sd (NON_LVALUE_EXPR <__A>, __B);


;; Function __m128d _mm_cvtsi64_sd(__m128d, long long int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsi642sd (NON_LVALUE_EXPR <__A>, __B);


;; Function __m128d _mm_cvtsi64x_sd(__m128d, long long int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtsi642sd (NON_LVALUE_EXPR <__A>, __B);


;; Function __m128d _mm_cvtss_sd(__m128d, __m128) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_cvtss2sd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_unpackhi_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_unpckhpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_unpacklo_pd(__m128d, __m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_unpcklpd (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128d _mm_loadh_pd(__m128d, const double*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ia32_loadhpd (NON_LVALUE_EXPR <__A>, __B)>>;


;; Function __m128d _mm_loadl_pd(__m128d, const double*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ia32_loadlpd (NON_LVALUE_EXPR <__A>, __B)>>;


;; Function int _mm_movemask_pd(__m128d) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_movmskpd (NON_LVALUE_EXPR <__A>);


;; Function __m128i _mm_packs_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_packsswb128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_packs_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_packssdw128 (VIEW_CONVERT_EXPR<__v4si>(__A), VIEW_CONVERT_EXPR<__v4si>(__B)));


;; Function __m128i _mm_packus_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_packuswb128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_unpackhi_epi8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_punpckhbw128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B)));


;; Function __m128i _mm_unpackhi_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_punpckhwd128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_unpackhi_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_punpckhdq128 (VIEW_CONVERT_EXPR<__v4si>(__A), VIEW_CONVERT_EXPR<__v4si>(__B)));


;; Function __m128i _mm_unpackhi_epi64(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_punpckhqdq128 (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128i _mm_unpacklo_epi8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_punpcklbw128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B)));


;; Function __m128i _mm_unpacklo_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_punpcklwd128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_unpacklo_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_punpckldq128 (VIEW_CONVERT_EXPR<__v4si>(__A), VIEW_CONVERT_EXPR<__v4si>(__B)));


;; Function __m128i _mm_unpacklo_epi64(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_punpcklqdq128 (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128i _mm_add_epi8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v16qu>(__A) + VIEW_CONVERT_EXPR<__v16qu>(__B));


;; Function __m128i _mm_add_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v8hu>(__A) + VIEW_CONVERT_EXPR<__v8hu>(__B));


;; Function __m128i _mm_add_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v4su>(__A) + VIEW_CONVERT_EXPR<__v4su>(__B));


;; Function __m128i _mm_add_epi64(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v2du>(__A) + VIEW_CONVERT_EXPR<__v2du>(__B));


;; Function __m128i _mm_adds_epi8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_paddsb128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B)));


;; Function __m128i _mm_adds_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_paddsw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_adds_epu8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_paddusb128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B)));


;; Function __m128i _mm_adds_epu16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_paddusw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_sub_epi8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v16qu>(__A) - VIEW_CONVERT_EXPR<__v16qu>(__B));


;; Function __m128i _mm_sub_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v8hu>(__A) - VIEW_CONVERT_EXPR<__v8hu>(__B));


;; Function __m128i _mm_sub_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v4su>(__A) - VIEW_CONVERT_EXPR<__v4su>(__B));


;; Function __m128i _mm_sub_epi64(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v2du>(__A) - VIEW_CONVERT_EXPR<__v2du>(__B));


;; Function __m128i _mm_subs_epi8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psubsb128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B)));


;; Function __m128i _mm_subs_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psubsw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_subs_epu8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psubusb128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B)));


;; Function __m128i _mm_subs_epu16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psubusw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_madd_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pmaddwd128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_mulhi_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pmulhw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_mullo_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v8hu>(__A) * VIEW_CONVERT_EXPR<__v8hu>(__B));


;; Function __m64 _mm_mul_su32(__m64, __m64) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m64>(__builtin_ia32_pmuludq (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>));


;; Function __m128i _mm_mul_epu32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pmuludq128 (VIEW_CONVERT_EXPR<__v4si>(__A), VIEW_CONVERT_EXPR<__v4si>(__B));


;; Function __m128i _mm_slli_epi16(__m128i, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psllwi128 (VIEW_CONVERT_EXPR<__v8hi>(__A), __B));


;; Function __m128i _mm_slli_epi32(__m128i, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pslldi128 (VIEW_CONVERT_EXPR<__v4si>(__A), __B));


;; Function __m128i _mm_slli_epi64(__m128i, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psllqi128 (NON_LVALUE_EXPR <__A>, __B);


;; Function __m128i _mm_srai_epi16(__m128i, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psrawi128 (VIEW_CONVERT_EXPR<__v8hi>(__A), __B));


;; Function __m128i _mm_srai_epi32(__m128i, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psradi128 (VIEW_CONVERT_EXPR<__v4si>(__A), __B));


;; Function __m128i _mm_srli_epi16(__m128i, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psrlwi128 (VIEW_CONVERT_EXPR<__v8hi>(__A), __B));


;; Function __m128i _mm_srli_epi32(__m128i, int) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psrldi128 (VIEW_CONVERT_EXPR<__v4si>(__A), __B));


;; Function __m128i _mm_srli_epi64(__m128i, int) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psrlqi128 (NON_LVALUE_EXPR <__A>, __B);


;; Function __m128i _mm_sll_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psllw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_sll_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pslld128 (VIEW_CONVERT_EXPR<__v4si>(__A), VIEW_CONVERT_EXPR<__v4si>(__B)));


;; Function __m128i _mm_sll_epi64(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psllq128 (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128i _mm_sra_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psraw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_sra_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psrad128 (VIEW_CONVERT_EXPR<__v4si>(__A), VIEW_CONVERT_EXPR<__v4si>(__B)));


;; Function __m128i _mm_srl_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psrlw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_srl_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_psrld128 (VIEW_CONVERT_EXPR<__v4si>(__A), VIEW_CONVERT_EXPR<__v4si>(__B)));


;; Function __m128i _mm_srl_epi64(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psrlq128 (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128i _mm_and_si128(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v2du>(__A) & VIEW_CONVERT_EXPR<__v2du>(__B));


;; Function __m128i _mm_andnot_si128(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pandn128 (NON_LVALUE_EXPR <__A>, NON_LVALUE_EXPR <__B>);


;; Function __m128i _mm_or_si128(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v2du>(__A) | VIEW_CONVERT_EXPR<__v2du>(__B));


;; Function __m128i _mm_xor_si128(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(VIEW_CONVERT_EXPR<__v2du>(__A) ^ VIEW_CONVERT_EXPR<__v2du>(__B));


;; Function __m128i _mm_cmpeq_epi8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>( VEC_COND_EXPR < VIEW_CONVERT_EXPR<__v16qi>(__A) == VIEW_CONVERT_EXPR<__v16qi>(__B) , { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 } , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } > );


;; Function __m128i _mm_cmpeq_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>( VEC_COND_EXPR < VIEW_CONVERT_EXPR<__v8hi>(__A) == VIEW_CONVERT_EXPR<__v8hi>(__B) , { -1, -1, -1, -1, -1, -1, -1, -1 } , { 0, 0, 0, 0, 0, 0, 0, 0 } > );


;; Function __m128i _mm_cmpeq_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>( VEC_COND_EXPR < VIEW_CONVERT_EXPR<__v4si>(__A) == VIEW_CONVERT_EXPR<__v4si>(__B) , { -1, -1, -1, -1 } , { 0, 0, 0, 0 } > );


;; Function __m128i _mm_cmplt_epi8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>( VEC_COND_EXPR < VIEW_CONVERT_EXPR<__v16qi>(__A) < VIEW_CONVERT_EXPR<__v16qi>(__B) , { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 } , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } > );


;; Function __m128i _mm_cmplt_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>( VEC_COND_EXPR < VIEW_CONVERT_EXPR<__v8hi>(__A) < VIEW_CONVERT_EXPR<__v8hi>(__B) , { -1, -1, -1, -1, -1, -1, -1, -1 } , { 0, 0, 0, 0, 0, 0, 0, 0 } > );


;; Function __m128i _mm_cmplt_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>( VEC_COND_EXPR < VIEW_CONVERT_EXPR<__v4si>(__A) < VIEW_CONVERT_EXPR<__v4si>(__B) , { -1, -1, -1, -1 } , { 0, 0, 0, 0 } > );


;; Function __m128i _mm_cmpgt_epi8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>( VEC_COND_EXPR < VIEW_CONVERT_EXPR<__v16qi>(__A) > VIEW_CONVERT_EXPR<__v16qi>(__B) , { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 } , { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } > );


;; Function __m128i _mm_cmpgt_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>( VEC_COND_EXPR < VIEW_CONVERT_EXPR<__v8hi>(__A) > VIEW_CONVERT_EXPR<__v8hi>(__B) , { -1, -1, -1, -1, -1, -1, -1, -1 } , { 0, 0, 0, 0, 0, 0, 0, 0 } > );


;; Function __m128i _mm_cmpgt_epi32(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>( VEC_COND_EXPR < VIEW_CONVERT_EXPR<__v4si>(__A) > VIEW_CONVERT_EXPR<__v4si>(__B) , { -1, -1, -1, -1 } , { 0, 0, 0, 0 } > );


;; Function __m128i _mm_max_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pmaxsw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_max_epu8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pmaxub128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B)));


;; Function __m128i _mm_min_epi16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pminsw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_min_epu8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pminub128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B)));


;; Function int _mm_movemask_epi8(__m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_pmovmskb128 (VIEW_CONVERT_EXPR<__v16qi>(__A));


;; Function __m128i _mm_mulhi_epu16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pmulhuw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function void _mm_maskmoveu_si128(__m128i, __m128i, char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_maskmovdqu (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B), __C) >>>>>;


;; Function __m128i _mm_avg_epu8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pavgb128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B)));


;; Function __m128i _mm_avg_epu16(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pavgw128 (VIEW_CONVERT_EXPR<__v8hi>(__A), VIEW_CONVERT_EXPR<__v8hi>(__B)));


;; Function __m128i _mm_sad_epu8(__m128i, __m128i) (null)
;; enabled by -tree-original


return <retval> = __builtin_ia32_psadbw128 (VIEW_CONVERT_EXPR<__v16qi>(__A), VIEW_CONVERT_EXPR<__v16qi>(__B));


;; Function void _mm_stream_si32(int*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_movnti (__A, __B) >>>>>;


;; Function void _mm_stream_si64(long long int*, long long int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_movnti64 (__A, __B) >>>>>;


;; Function void _mm_stream_si128(__m128i*, __m128i) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_movntdq ((__v2di *) __A, NON_LVALUE_EXPR <__B>) >>>>>;


;; Function void _mm_stream_pd(double*, __m128d) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_movntpd (__A, NON_LVALUE_EXPR <__B>) >>>>>;


;; Function void _mm_clflush(const void*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_clflush (__A) >>>>>;


;; Function void _mm_lfence() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_lfence () >>>>>;


;; Function void _mm_mfence() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_ia32_mfence () >>>>>;


;; Function __m128i _mm_cvtsi32_si128(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi32 (0, 0, 0, __A)>>;


;; Function __m128i _mm_cvtsi64_si128(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi64x (0, __A)>>;


;; Function __m128i _mm_cvtsi64x_si128(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mm_set_epi64x (0, __A)>>;


;; Function __m128 _mm_castpd_ps(__m128d) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128>(__A);


;; Function __m128i _mm_castpd_si128(__m128d) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__A);


;; Function __m128d _mm_castps_pd(__m128) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128d>(__A);


;; Function __m128i _mm_castps_si128(__m128) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128i>(__A);


;; Function __m128 _mm_castsi128_ps(__m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128>(__A);


;; Function __m128d _mm_castsi128_pd(__m128i) (null)
;; enabled by -tree-original


return <retval> = VIEW_CONVERT_EXPR<__m128d>(__A);


;; Function int stbi__sse2_available() (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function void stbi__start_mem(stbi__context*, const stbi_uc*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->io.read = 0B) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->read_from_callbacks = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->callback_already_read = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer + (sizetype) len) >>>>>;


;; Function void stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->io = *(const struct stbi_io_callbacks &) NON_LVALUE_EXPR <c>) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->io_user_data = user) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->buflen = 128) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->read_from_callbacks = 1) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->callback_already_read = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = s->img_buffer_original = (stbi_uc *) &s->buffer_start) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  stbi__refill_buffer (s) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer_original_end = s->img_buffer_end) >>>>>;


;; Function int stbi__stdio_read(void*, char*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) fread ((void *) data, 1, (size_t) size, (struct FILE *) user)>>;


;; Function void stbi__stdio_skip(void*, int) (null)
;; enabled by -tree-original


{
  int ch;

    int ch;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fseek ((struct FILE *) user, (long int) n, 1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ch = fgetc ((struct FILE *) user)) >>>>>;
  if (ch != -1)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ungetc (ch, (struct FILE *) user) >>>>>;
    }
}


;; Function int stbi__stdio_eof(void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) (feof ((struct FILE *) user) != 0 || ferror ((struct FILE *) user) != 0)>>;


;; Function void stbi__start_file(stbi__context*, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_callbacks (s, &stbi__stdio_callbacks, (void *) f) >>>>>;


;; Function void stbi__rewind(stbi__context*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = s->img_buffer_original) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer_end = s->img_buffer_original_end) >>>>>;


;; Function const char* stbi_failure_reason() (null)
;; enabled by -tree-original


return <retval> = stbi__g_failure_reason;


;; Function int stbi__err(const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__g_failure_reason = str) >>>>>;
return <retval> = 0;


;; Function void* stbi__malloc(size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = malloc (size)>>;


;; Function int stbi__addsizes_valid(int, int) (null)
;; enabled by -tree-original


if (b < 0)
  {
    return <retval> = 0;
  }
return <retval> = 2147483647 - b >= a;


;; Function int stbi__mul2sizes_valid(int, int) (null)
;; enabled by -tree-original


if (a < 0 || b < 0)
  {
    return <retval> = 0;
  }
if (b == 0)
  {
    return <retval> = 1;
  }
return <retval> = 2147483647 / b >= a;


;; Function int stbi__mad2sizes_valid(int, int, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) (stbi__mul2sizes_valid (a, b) != 0 && stbi__addsizes_valid (a * b, add) != 0)>>;


;; Function int stbi__mad3sizes_valid(int, int, int, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) ((stbi__mul2sizes_valid (a, b) != 0 && stbi__mul2sizes_valid (a * b, c) != 0) && stbi__addsizes_valid ((a * b) * c, add) != 0)>>;


;; Function int stbi__mad4sizes_valid(int, int, int, int, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) (((stbi__mul2sizes_valid (a, b) != 0 && stbi__mul2sizes_valid (a * b, c) != 0) && stbi__mul2sizes_valid ((a * b) * c, d) != 0) && stbi__addsizes_valid (((a * b) * c) * d, add) != 0)>>;


;; Function void* stbi__malloc_mad2(int, int, int) (null)
;; enabled by -tree-original


if (<<cleanup_point stbi__mad2sizes_valid (a, b, add) == 0>>)
  {
    return <retval> = 0B;
  }
<<cleanup_point return <retval> = stbi__malloc ((size_t) (a * b + add))>>;


;; Function void* stbi__malloc_mad3(int, int, int, int) (null)
;; enabled by -tree-original


if (<<cleanup_point stbi__mad3sizes_valid (a, b, c, add) == 0>>)
  {
    return <retval> = 0B;
  }
<<cleanup_point return <retval> = stbi__malloc ((size_t) ((a * b) * c + add))>>;


;; Function void* stbi__malloc_mad4(int, int, int, int, int) (null)
;; enabled by -tree-original


if (<<cleanup_point stbi__mad4sizes_valid (a, b, c, d, add) == 0>>)
  {
    return <retval> = 0B;
  }
<<cleanup_point return <retval> = stbi__malloc ((size_t) (((a * b) * c) * d + add))>>;


;; Function void stbi_image_free(void*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  free (retval_from_stbi_load) >>>>>;


;; Function void stbi_set_flip_vertically_on_load(int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__vertically_flip_on_load_global = flag_true_if_should_flip) >>>>>;


;; Function void stbi_set_flip_vertically_on_load_thread(int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__vertically_flip_on_load_local = flag_true_if_should_flip) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__vertically_flip_on_load_set = 1) >>>>>;


;; Function void* stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) ri, 0, 12) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ri->bits_per_channel = 8) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ri->channel_order = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ri->num_channels = 0) >>>>>;
  if (<<cleanup_point stbi__jpeg_test (s) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__jpeg_load (s, x, y, comp, req_comp, ri)>>;
    }
  if (<<cleanup_point stbi__png_test (s) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__png_load (s, x, y, comp, req_comp, ri)>>;
    }
  if (<<cleanup_point stbi__bmp_test (s) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__bmp_load (s, x, y, comp, req_comp, ri)>>;
    }
  if (<<cleanup_point stbi__gif_test (s) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__gif_load (s, x, y, comp, req_comp, ri)>>;
    }
  if (<<cleanup_point stbi__psd_test (s) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__psd_load (s, x, y, comp, req_comp, ri, bpc)>>;
    }
  if (<<cleanup_point stbi__pic_test (s) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__pic_load (s, x, y, comp, req_comp, ri)>>;
    }
  if (<<cleanup_point stbi__pnm_test (s) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__pnm_load (s, x, y, comp, req_comp, ri)>>;
    }
  {
    if (<<cleanup_point stbi__hdr_test (s) != 0>>)
      {
        {
          float * hdr;

                    float * hdr;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (hdr = stbi__hdr_load (s, x, y, comp, req_comp, ri)) >>>>>;
          <<cleanup_point return <retval> = (void *) stbi__hdr_to_ldr (hdr, *x, *y, req_comp == 0 ? *comp : req_comp)>>;
        }
      }
  }
  if (<<cleanup_point stbi__tga_test (s) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__tga_load (s, x, y, comp, req_comp, ri)>>;
    }
  <<cleanup_point return <retval> = stbi__err ((const char *) "unknown image type");, 0B>>;
}


;; Function stbi_uc* stbi__convert_16_to_8(stbi__uint16*, int, int, int) (null)
;; enabled by -tree-original


{
  int i;
  int img_len = (w * h) * channels;
  stbi_uc * reduced;

    int i;
    int img_len = (w * h) * channels;
    stbi_uc * reduced;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (reduced = (stbi_uc *) stbi__malloc ((size_t) img_len)) >>>>>;
  if (reduced == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i >= img_len) goto <D.10376>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(reduced + (sizetype) i) = (stbi_uc) (*(orig + (sizetype) ((long long unsigned int) i * 2)) >> 8)) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.10376>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) orig) >>>>>;
  return <retval> = reduced;
}


;; Function stbi__uint16* stbi__convert_8_to_16(stbi_uc*, int, int, int) (null)
;; enabled by -tree-original


{
  int i;
  int img_len = (w * h) * channels;
  stbi__uint16 * enlarged;

    int i;
    int img_len = (w * h) * channels;
    stbi__uint16 * enlarged;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (enlarged = (stbi__uint16 *) stbi__malloc ((size_t) (img_len * 2))) >>>>>;
  if (enlarged == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i >= img_len) goto <D.10387>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(enlarged + (sizetype) ((long long unsigned int) i * 2)) = ((stbi__uint16) *(orig + (sizetype) i) << 8) + (stbi__uint16) *(orig + (sizetype) i)) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.10387>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) orig) >>>>>;
  return <retval> = enlarged;
}


;; Function void stbi__vertical_flip(void*, int, int, int) (null)
;; enabled by -tree-original


{
  int row;
  size_t bytes_per_row = (size_t) w * (size_t) bytes_per_pixel;
  stbi_uc temp[2048];
  stbi_uc * bytes = (stbi_uc *) image;

    int row;
    size_t bytes_per_row = (size_t) w * (size_t) bytes_per_pixel;
    stbi_uc temp[2048];
    stbi_uc * bytes = (stbi_uc *) image;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row = 0) >>>>>;
    while (1)
      {
        if (h >> 1 <= row) goto <D.10403>;
        {
          stbi_uc * row0 = bytes + (sizetype) ((size_t) row * bytes_per_row);
          stbi_uc * row1 = bytes + (sizetype) ((size_t) ((h - row) + -1) * bytes_per_row);
          size_t bytes_left = bytes_per_row;

                    stbi_uc * row0 = bytes + (sizetype) ((size_t) row * bytes_per_row);
                    stbi_uc * row1 = bytes + (sizetype) ((size_t) ((h - row) + -1) * bytes_per_row);
                    size_t bytes_left = bytes_per_row;
          while (1)
            {
              if (bytes_left == 0) goto <D.10405>;
              {
                size_t bytes_copy = MIN_EXPR <bytes_left, 2048>;

                                size_t bytes_copy = MIN_EXPR <bytes_left, 2048>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) &temp, (const void *) row0, bytes_copy) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) row0, (const void *) row1, bytes_copy) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) row1, (const void *) &temp, bytes_copy) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row0 = row0 + (sizetype) NON_LVALUE_EXPR <bytes_copy>) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row1 = row1 + (sizetype) NON_LVALUE_EXPR <bytes_copy>) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bytes_left = bytes_left - bytes_copy) >>>>>;
              }
            }
          <D.10405>:;
        }
        <<cleanup_point (void) row++ >>;
      }
    <D.10403>:;
  }
}


;; Function void stbi__vertical_flip_slices(void*, int, int, int, int) (null)
;; enabled by -tree-original


{
  int slice;
  int slice_size = (w * h) * bytes_per_pixel;
  stbi_uc * bytes = (stbi_uc *) image;

    int slice;
    int slice_size = (w * h) * bytes_per_pixel;
    stbi_uc * bytes = (stbi_uc *) image;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (slice = 0) >>>>>;
  while (1)
    {
      if (slice >= z) goto <D.10417>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__vertical_flip ((void *) bytes, w, h, bytes_per_pixel) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bytes = bytes + (sizetype) slice_size) >>>>>;
      <<cleanup_point (void)  ++slice>>;
    }
  <D.10417>:;
}


;; Function unsigned char* stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__result_info ri;
  void * result;

    struct stbi__result_info ri;
    void * result;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi__load_main (s, x, y, comp, req_comp, &ri, 8)) >>>>>;
  if (result == 0B)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((ri.bits_per_channel == 8 || ri.bits_per_channel == 16) || (_assert ((const char *) "ri.bits_per_channel == 8 || ri.bits_per_channel == 16", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 1210);, 0)) >>>>>;
  if (ri.bits_per_channel != 8)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = (void *) stbi__convert_16_to_8 ((stbi__uint16 *) result, *x, *y, req_comp == 0 ? *comp : req_comp)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ri.bits_per_channel = 8) >>>>>;
    }
  {
    if (stbi__vertically_flip_on_load_set != 0 ? stbi__vertically_flip_on_load_local != 0 : stbi__vertically_flip_on_load_global != 0)
      {
        {
          int channels = req_comp == 0 ? *comp : req_comp;

                    int channels = req_comp == 0 ? *comp : req_comp;
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__vertical_flip (result, *x, *y, channels) >>>>>;
        }
      }
  }
  return <retval> = (unsigned char *) result;
}


;; Function stbi__uint16* stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__result_info ri;
  void * result;

    struct stbi__result_info ri;
    void * result;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi__load_main (s, x, y, comp, req_comp, &ri, 16)) >>>>>;
  if (result == 0B)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((ri.bits_per_channel == 8 || ri.bits_per_channel == 16) || (_assert ((const char *) "ri.bits_per_channel == 8 || ri.bits_per_channel == 16", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 1236);, 0)) >>>>>;
  if (ri.bits_per_channel != 16)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = (void *) stbi__convert_8_to_16 ((stbi_uc *) result, *x, *y, req_comp == 0 ? *comp : req_comp)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ri.bits_per_channel = 16) >>>>>;
    }
  {
    if (stbi__vertically_flip_on_load_set != 0 ? stbi__vertically_flip_on_load_local != 0 : stbi__vertically_flip_on_load_global != 0)
      {
        {
          int channels = req_comp == 0 ? *comp : req_comp;

                    int channels = req_comp == 0 ? *comp : req_comp;
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__vertical_flip (result, *x, *y, (int) ((unsigned int) (long long unsigned int) channels * 2)) >>>>>;
        }
      }
  }
  return <retval> = (stbi__uint16 *) result;
}


;; Function void stbi__float_postprocess(float*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  {
    if ((stbi__vertically_flip_on_load_set != 0 ? stbi__vertically_flip_on_load_local != 0 : stbi__vertically_flip_on_load_global != 0) && result != 0B)
      {
        {
          int channels = req_comp == 0 ? *comp : req_comp;

                    int channels = req_comp == 0 ? *comp : req_comp;
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__vertical_flip ((void *) result, *x, *y, (int) ((unsigned int) (long long unsigned int) channels * 4)) >>>>>;
        }
      }
  }
}


;; Function FILE* stbi__fopen(const char*, const char*) (null)
;; enabled by -tree-original


{
  struct FILE * f;

    struct FILE * f;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (f = fopen (filename, mode)) >>>>>;
  return <retval> = f;
}


;; Function stbi_uc* stbi_load(const char*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct FILE * f;
  unsigned char * result;

    struct FILE * f;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (f = stbi__fopen (filename, (const char *) "rb")) >>>>>;
    unsigned char * result;
  if (f == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "can\'t fopen");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi_load_from_file (f, x, y, comp, req_comp)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fclose (f) >>>>>;
  return <retval> = (stbi_uc *) result;
}


;; Function stbi_uc* stbi_load_from_file(FILE*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  unsigned char * result;
  struct stbi__context s;

    unsigned char * result;
    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_file (&s, f) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi__load_and_postprocess_8bit (&s, x, y, comp, req_comp)) >>>>>;
  if (result != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fseek (f, (long int) -(int) (s.img_buffer_end - s.img_buffer), 1) >>>>>;
    }
  return <retval> = (stbi_uc *) result;
}


;; Function stbi__uint16* stbi_load_from_file_16(FILE*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  stbi__uint16 * result;
  struct stbi__context s;

    stbi__uint16 * result;
    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_file (&s, f) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi__load_and_postprocess_16bit (&s, x, y, comp, req_comp)) >>>>>;
  if (result != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fseek (f, (long int) -(int) (s.img_buffer_end - s.img_buffer), 1) >>>>>;
    }
  return <retval> = result;
}


;; Function stbi_us* stbi_load_16(const char*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct FILE * f;
  stbi__uint16 * result;

    struct FILE * f;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (f = stbi__fopen (filename, (const char *) "rb")) >>>>>;
    stbi__uint16 * result;
  if (f == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "can\'t fopen");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi_load_from_file_16 (f, x, y, comp, req_comp)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fclose (f) >>>>>;
  return <retval> = (stbi_us *) result;
}


;; Function stbi_us* stbi_load_16_from_memory(const stbi_uc*, int, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_mem (&s, buffer, len) >>>>>;
  <<cleanup_point return <retval> = (stbi_us *) stbi__load_and_postprocess_16bit (&s, x, y, channels_in_file, desired_channels)>>;
}


;; Function stbi_us* stbi_load_16_from_callbacks(const stbi_io_callbacks*, void*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_callbacks (&s, (struct stbi_io_callbacks *) clbk, user) >>>>>;
  <<cleanup_point return <retval> = (stbi_us *) stbi__load_and_postprocess_16bit (&s, x, y, channels_in_file, desired_channels)>>;
}


;; Function stbi_uc* stbi_load_from_memory(const stbi_uc*, int, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_mem (&s, buffer, len) >>>>>;
  <<cleanup_point return <retval> = (stbi_uc *) stbi__load_and_postprocess_8bit (&s, x, y, comp, req_comp)>>;
}


;; Function stbi_uc* stbi_load_from_callbacks(const stbi_io_callbacks*, void*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_callbacks (&s, (struct stbi_io_callbacks *) clbk, user) >>>>>;
  <<cleanup_point return <retval> = (stbi_uc *) stbi__load_and_postprocess_8bit (&s, x, y, comp, req_comp)>>;
}


;; Function stbi_uc* stbi_load_gif_from_memory(const stbi_uc*, int, int**, int*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  unsigned char * result;
  struct stbi__context s;

    unsigned char * result;
    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_mem (&s, buffer, len) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = (unsigned char *) stbi__load_gif_main (&s, delays, x, y, z, comp, req_comp)) >>>>>;
  if (stbi__vertically_flip_on_load_set != 0 ? stbi__vertically_flip_on_load_local != 0 : stbi__vertically_flip_on_load_global != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__vertical_flip_slices ((void *) result, *x, *y, *z, *comp) >>>>>;
    }
  return <retval> = (stbi_uc *) result;
}


;; Function float* stbi__loadf_main(stbi__context*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  unsigned char * data;

    unsigned char * data;
  {
    if (<<cleanup_point stbi__hdr_test (s) != 0>>)
      {
        {
          struct stbi__result_info ri;
          float * hdr_data;

                    struct stbi__result_info ri;
                    float * hdr_data;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (hdr_data = stbi__hdr_load (s, x, y, comp, req_comp, &ri)) >>>>>;
          if (hdr_data != 0B)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__float_postprocess (hdr_data, x, y, comp, req_comp) >>>>>;
            }
          return <retval> = hdr_data;
        }
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (data = stbi__load_and_postprocess_8bit (s, x, y, comp, req_comp)) >>>>>;
  if (data != 0B)
    {
      <<cleanup_point return <retval> = stbi__ldr_to_hdr (data, *x, *y, req_comp == 0 ? *comp : req_comp)>>;
    }
  <<cleanup_point return <retval> = stbi__err ((const char *) "unknown image type");, 0B>>;
}


;; Function float* stbi_loadf_from_memory(const stbi_uc*, int, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_mem (&s, buffer, len) >>>>>;
  <<cleanup_point return <retval> = stbi__loadf_main (&s, x, y, comp, req_comp)>>;
}


;; Function float* stbi_loadf_from_callbacks(const stbi_io_callbacks*, void*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_callbacks (&s, (struct stbi_io_callbacks *) clbk, user) >>>>>;
  <<cleanup_point return <retval> = stbi__loadf_main (&s, x, y, comp, req_comp)>>;
}


;; Function float* stbi_loadf(const char*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  float * result;
  struct FILE * f;

    float * result;
    struct FILE * f;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (f = stbi__fopen (filename, (const char *) "rb")) >>>>>;
  if (f == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "can\'t fopen");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi_loadf_from_file (f, x, y, comp, req_comp)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fclose (f) >>>>>;
  return <retval> = result;
}


;; Function float* stbi_loadf_from_file(FILE*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_file (&s, f) >>>>>;
  <<cleanup_point return <retval> = stbi__loadf_main (&s, x, y, comp, req_comp)>>;
}


;; Function int stbi_is_hdr_from_memory(const stbi_uc*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_mem (&s, buffer, len) >>>>>;
  <<cleanup_point return <retval> = stbi__hdr_test (&s)>>;
}


;; Function int stbi_is_hdr(const char*) (null)
;; enabled by -tree-original


{
  struct FILE * f;
  int result = 0;

    struct FILE * f;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (f = stbi__fopen (filename, (const char *) "rb")) >>>>>;
  <<cleanup_point   int result = 0;>>;
  if (f != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi_is_hdr_from_file (f)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fclose (f) >>>>>;
    }
  return <retval> = result;
}


;; Function int stbi_is_hdr_from_file(FILE*) (null)
;; enabled by -tree-original


{
  long int pos;
  int res;
  struct stbi__context s;

    long int pos;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pos = ftell (f)) >>>>>;
    int res;
    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_file (&s, f) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (res = stbi__hdr_test (&s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fseek (f, pos, 0) >>>>>;
  return <retval> = res;
}


;; Function int stbi_is_hdr_from_callbacks(const stbi_io_callbacks*, void*) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_callbacks (&s, (struct stbi_io_callbacks *) clbk, user) >>>>>;
  <<cleanup_point return <retval> = stbi__hdr_test (&s)>>;
}


;; Function void stbi_ldr_to_hdr_gamma(float) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__l2h_gamma = gamma) >>>>>;


;; Function void stbi_ldr_to_hdr_scale(float) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__l2h_scale = scale) >>>>>;


;; Function void stbi_hdr_to_ldr_gamma(float) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__h2l_gamma_i = 1.0e+0 / gamma) >>>>>;


;; Function void stbi_hdr_to_ldr_scale(float) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__h2l_scale_i = 1.0e+0 / scale) >>>>>;


;; Function void stbi__refill_buffer(stbi__context*) (null)
;; enabled by -tree-original


{
  int n;

    int n;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = s->io.read (s->io_user_data, (char *) &s->buffer_start, s->buflen)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->callback_already_read = s->callback_already_read + (int) (s->img_buffer - s->img_buffer_original)) >>>>>;
  if (n == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->read_from_callbacks = 0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = (stbi_uc *) &s->buffer_start) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer_end = (stbi_uc *) &s->buffer_start + 1) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*s->img_buffer = 0) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = (stbi_uc *) &s->buffer_start) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer_end = (stbi_uc *) &s->buffer_start + (sizetype) n) >>>>>;
    }
}


;; Function stbi_uc stbi__get8(stbi__context*) (null)
;; enabled by -tree-original


if (s->img_buffer < s->img_buffer_end)
  {
    <<cleanup_point return <retval> = *s->img_buffer++ >>;
  }
if (s->read_from_callbacks != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__refill_buffer (s) >>>>>;
    <<cleanup_point return <retval> = *s->img_buffer++ >>;
  }
return <retval> = 0;


;; Function int stbi__at_eof(stbi__context*) (null)
;; enabled by -tree-original


if (s->io.read != 0B)
  {
    if (<<cleanup_point s->io.eof (s->io_user_data) == 0>>)
      {
        return <retval> = 0;
      }
    if (s->read_from_callbacks == 0)
      {
        return <retval> = 1;
      }
  }
return <retval> = s->img_buffer >= s->img_buffer_end;


;; Function void stbi__skip(stbi__context*, int) (null)
;; enabled by -tree-original


{
  if (n == 0)
    {
      return;
    }
  if (n < 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = s->img_buffer_end) >>>>>;
      return;
    }
  {
    if (s->io.read != 0B)
      {
        {
          int blen = (int) (s->img_buffer_end - s->img_buffer);

                    int blen = (int) (s->img_buffer_end - s->img_buffer);
          if (blen < n)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = s->img_buffer_end) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  s->io.skip (s->io_user_data, n - blen) >>>>>;
              return;
            }
        }
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = s->img_buffer + (sizetype) n) >>>>>;
}


;; Function int stbi__getn(stbi__context*, stbi_uc*, int) (null)
;; enabled by -tree-original


{
  {
    if (s->io.read != 0B)
      {
        {
          int blen = (int) (s->img_buffer_end - s->img_buffer);

                    int blen = (int) (s->img_buffer_end - s->img_buffer);
          {
            if (blen < n)
              {
                {
                  int res;
                  int count;

                                    int res;
                                    int count;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) buffer, (const void *) s->img_buffer, (size_t) blen) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = s->io.read (s->io_user_data, (char *) buffer + (sizetype) blen, n - blen)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (res = n - blen == count) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = s->img_buffer_end) >>>>>;
                  return <retval> = res;
                }
              }
          }
        }
      }
  }
  if (s->img_buffer + (sizetype) n <= s->img_buffer_end)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) buffer, (const void *) s->img_buffer, (size_t) n) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_buffer = s->img_buffer + (sizetype) n) >>>>>;
      return <retval> = 1;
    }
  else
    {
      return <retval> = 0;
    }
}


;; Function int stbi__get16be(stbi__context*) (null)
;; enabled by -tree-original


{
  int z;

    int z;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = (int) stbi__get8 (s)) >>>>>;
  <<cleanup_point return <retval> = (z << 8) + (int) stbi__get8 (s)>>;
}


;; Function stbi__uint32 stbi__get32be(stbi__context*) (null)
;; enabled by -tree-original


{
  stbi__uint32 z;

    stbi__uint32 z;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = (stbi__uint32) stbi__get16be (s)) >>>>>;
  <<cleanup_point return <retval> = (z << 16) + (stbi__uint32) stbi__get16be (s)>>;
}


;; Function int stbi__get16le(stbi__context*) (null)
;; enabled by -tree-original


{
  int z;

    int z;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = (int) stbi__get8 (s)) >>>>>;
  <<cleanup_point return <retval> = ((int) stbi__get8 (s) << 8) + z>>;
}


;; Function stbi__uint32 stbi__get32le(stbi__context*) (null)
;; enabled by -tree-original


{
  stbi__uint32 z;

    stbi__uint32 z;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = (stbi__uint32) stbi__get16le (s)) >>>>>;
  <<cleanup_point return <retval> = (stbi__uint32) (stbi__get16le (s) << 16) + z>>;
}


;; Function stbi_uc stbi__compute_y(int, int, int) (null)
;; enabled by -tree-original


return <retval> = (stbi_uc) ((r * 77 + g * 150) + b * 29 >> 8);


;; Function unsigned char* stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int) (null)
;; enabled by -tree-original


{
  int i;
  int j;
  unsigned char * good;

    int i;
    int j;
    unsigned char * good;
  if (req_comp == img_n)
    {
      return <retval> = data;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (req_comp > 0 && req_comp <= 4 || (_assert ((const char *) "req_comp >= 1 && req_comp <= 4", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 1701);, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (good = (unsigned char *) stbi__malloc_mad3 (req_comp, (int) x, (int) y, 0)) >>>>>;
  if (good == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
    while (1)
      {
        if (j >= (int) y) goto <D.10733>;
        {
          unsigned char * src = data + (sizetype) (((unsigned int) j * x) * (unsigned int) img_n);
          unsigned char * dest = good + (sizetype) (((unsigned int) j * x) * (unsigned int) req_comp);

                    unsigned char * src = data + (sizetype) (((unsigned int) j * x) * (unsigned int) img_n);
                    unsigned char * dest = good + (sizetype) (((unsigned int) j * x) * (unsigned int) req_comp);
          switch (img_n * 8 + req_comp)
            {
              case 10:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10736>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 1) = 255) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 1);;, (void) (dest = dest + 2);>>;
                }
              <D.10736>:;
              goto <D.10735>;
              case 11:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10738>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *(dest + 1) = *(dest + 2) = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 1);;, (void) (dest = dest + 3);>>;
                }
              <D.10738>:;
              goto <D.10735>;
              case 12:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10740>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *(dest + 1) = *(dest + 2) = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 3) = 255) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 1);;, (void) (dest = dest + 4);>>;
                }
              <D.10740>:;
              goto <D.10735>;
              case 17:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10742>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 2);;, (void) (dest = dest + 1);>>;
                }
              <D.10742>:;
              goto <D.10735>;
              case 19:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10744>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *(dest + 1) = *(dest + 2) = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 2);;, (void) (dest = dest + 3);>>;
                }
              <D.10744>:;
              goto <D.10735>;
              case 20:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10746>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *(dest + 1) = *(dest + 2) = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 3) = *(src + 1)) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 2);;, (void) (dest = dest + 4);>>;
                }
              <D.10746>:;
              goto <D.10735>;
              case 28:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10748>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 1) = *(src + 1)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 2) = *(src + 2)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 3) = 255) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 3);;, (void) (dest = dest + 4);>>;
                }
              <D.10748>:;
              goto <D.10735>;
              case 25:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10750>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = stbi__compute_y ((int) *NON_LVALUE_EXPR <src>, (int) *(src + 1), (int) *(src + 2))) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 3);;, (void) (dest = dest + 1);>>;
                }
              <D.10750>:;
              goto <D.10735>;
              case 26:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10752>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = stbi__compute_y ((int) *NON_LVALUE_EXPR <src>, (int) *(src + 1), (int) *(src + 2))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 1) = 255) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 3);;, (void) (dest = dest + 2);>>;
                }
              <D.10752>:;
              goto <D.10735>;
              case 33:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10754>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = stbi__compute_y ((int) *NON_LVALUE_EXPR <src>, (int) *(src + 1), (int) *(src + 2))) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 4);;, (void) (dest = dest + 1);>>;
                }
              <D.10754>:;
              goto <D.10735>;
              case 34:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10756>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = stbi__compute_y ((int) *NON_LVALUE_EXPR <src>, (int) *(src + 1), (int) *(src + 2))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 1) = *(src + 3)) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 4);;, (void) (dest = dest + 2);>>;
                }
              <D.10756>:;
              goto <D.10735>;
              case 35:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10758>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 1) = *(src + 1)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 2) = *(src + 2)) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 4);;, (void) (dest = dest + 3);>>;
                }
              <D.10758>:;
              goto <D.10735>;
              default:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (NON_LVALUE_EXPR <_assert ((const char *) "0", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 1730);, 0>) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) good) >>>>>;
              <<cleanup_point return <retval> = stbi__err ((const char *) "unsupported");, 0B>>;
              <D.10735>:;
            }
        }
        <<cleanup_point (void)  ++j>>;
      }
    <D.10733>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
  return <retval> = good;
}


;; Function stbi__uint16 stbi__compute_y_16(int, int, int) (null)
;; enabled by -tree-original


return <retval> = (stbi__uint16) ((r * 77 + g * 150) + b * 29 >> 8);


;; Function stbi__uint16* stbi__convert_format16(stbi__uint16*, int, int, unsigned int, unsigned int) (null)
;; enabled by -tree-original


{
  int i;
  int j;
  stbi__uint16 * good;

    int i;
    int j;
    stbi__uint16 * good;
  if (req_comp == img_n)
    {
      return <retval> = data;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (req_comp > 0 && req_comp <= 4 || (_assert ((const char *) "req_comp >= 1 && req_comp <= 4", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 1758);, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (good = (stbi__uint16 *) stbi__malloc ((size_t) ((((unsigned int) req_comp * x) * y) * 2))) >>>>>;
  if (good == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
    while (1)
      {
        if (j >= (int) y) goto <D.10790>;
        {
          stbi__uint16 * src = data + (sizetype) ((long long unsigned int) (((unsigned int) j * x) * (unsigned int) img_n) * 2);
          stbi__uint16 * dest = good + (sizetype) ((long long unsigned int) (((unsigned int) j * x) * (unsigned int) req_comp) * 2);

                    stbi__uint16 * src = data + (sizetype) ((long long unsigned int) (((unsigned int) j * x) * (unsigned int) img_n) * 2);
                    stbi__uint16 * dest = good + (sizetype) ((long long unsigned int) (((unsigned int) j * x) * (unsigned int) req_comp) * 2);
          switch (img_n * 8 + req_comp)
            {
              case 10:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10793>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 2) = 65535) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 2);;, (void) (dest = dest + 4);>>;
                }
              <D.10793>:;
              goto <D.10792>;
              case 11:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10795>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *(dest + 2) = *(dest + 4) = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 2);;, (void) (dest = dest + 6);>>;
                }
              <D.10795>:;
              goto <D.10792>;
              case 12:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10797>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *(dest + 2) = *(dest + 4) = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 6) = 65535) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 2);;, (void) (dest = dest + 8);>>;
                }
              <D.10797>:;
              goto <D.10792>;
              case 17:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10799>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 4);;, (void) (dest = dest + 2);>>;
                }
              <D.10799>:;
              goto <D.10792>;
              case 19:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10801>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *(dest + 2) = *(dest + 4) = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 4);;, (void) (dest = dest + 6);>>;
                }
              <D.10801>:;
              goto <D.10792>;
              case 20:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10803>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *(dest + 2) = *(dest + 4) = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 6) = *(src + 2)) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 4);;, (void) (dest = dest + 8);>>;
                }
              <D.10803>:;
              goto <D.10792>;
              case 28:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10805>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 2) = *(src + 2)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 4) = *(src + 4)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 6) = 65535) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 6);;, (void) (dest = dest + 8);>>;
                }
              <D.10805>:;
              goto <D.10792>;
              case 25:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10807>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = stbi__compute_y_16 ((int) *NON_LVALUE_EXPR <src>, (int) *(src + 2), (int) *(src + 4))) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 6);;, (void) (dest = dest + 2);>>;
                }
              <D.10807>:;
              goto <D.10792>;
              case 26:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10809>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = stbi__compute_y_16 ((int) *NON_LVALUE_EXPR <src>, (int) *(src + 2), (int) *(src + 4))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 2) = 65535) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 6);;, (void) (dest = dest + 4);>>;
                }
              <D.10809>:;
              goto <D.10792>;
              case 33:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10811>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = stbi__compute_y_16 ((int) *NON_LVALUE_EXPR <src>, (int) *(src + 2), (int) *(src + 4))) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 8);;, (void) (dest = dest + 2);>>;
                }
              <D.10811>:;
              goto <D.10792>;
              case 34:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10813>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = stbi__compute_y_16 ((int) *NON_LVALUE_EXPR <src>, (int) *(src + 2), (int) *(src + 4))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 2) = *(src + 6)) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 8);;, (void) (dest = dest + 4);>>;
                }
              <D.10813>:;
              goto <D.10792>;
              case 35:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) (x + 4294967295)) >>>>>;
              while (1)
                {
                  if (i < 0) goto <D.10815>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <dest> = *NON_LVALUE_EXPR <src>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 2) = *(src + 2)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + 4) = *(src + 4)) >>>>>;
                  <<cleanup_point (void)  --i;, (void) (src = src + 8);;, (void) (dest = dest + 6);>>;
                }
              <D.10815>:;
              goto <D.10792>;
              default:;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (NON_LVALUE_EXPR <_assert ((const char *) "0", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 1787);, 0>) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) good) >>>>>;
              <<cleanup_point return <retval> = stbi__err ((const char *) "unsupported");, 0B>>;
              <D.10792>:;
            }
        }
        <<cleanup_point (void)  ++j>>;
      }
    <D.10790>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
  return <retval> = good;
}


;; Function float* stbi__ldr_to_hdr(stbi_uc*, int, int, int) (null)
;; enabled by -tree-original


{
  int i;
  int k;
  int n;
  float * output;

    int i;
    int k;
    int n;
    float * output;
  if (data == 0B)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (output = (float *) stbi__malloc_mad4 (x, y, comp, 4, 0)) >>>>>;
  if (output == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  if ((comp & 1) != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = comp) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = comp + -1) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (x * y <= i) goto <D.10834>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
      while (1)
        {
          if (k >= n) goto <D.10836>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + (sizetype) ((long long unsigned int) (i * comp + k) * 4)) = std::pow ((float) (int) *(data + (sizetype) (i * comp + k)) / 2.55e+2, stbi__l2h_gamma) * stbi__l2h_scale) >>>>>;
          <<cleanup_point (void)  ++k>>;
        }
      <D.10836>:;
      <<cleanup_point (void)  ++i>>;
    }
  <D.10834>:;
  if (n < comp)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
      while (1)
        {
          if (x * y <= i) goto <D.10838>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + (sizetype) ((long long unsigned int) (i * comp + n) * 4)) = (float) (int) *(data + (sizetype) (i * comp + n)) / 2.55e+2) >>>>>;
          <<cleanup_point (void)  ++i>>;
        }
      <D.10838>:;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
  return <retval> = output;
}


;; Function stbi_uc* stbi__hdr_to_ldr(float*, int, int, int) (null)
;; enabled by -tree-original


{
  int i;
  int k;
  int n;
  stbi_uc * output;

    int i;
    int k;
    int n;
    stbi_uc * output;
  if (data == 0B)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (output = (stbi_uc *) stbi__malloc_mad3 (x, y, comp, 0)) >>>>>;
  if (output == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  if ((comp & 1) != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = comp) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = comp + -1) >>>>>;
    }
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
    while (1)
      {
        if (x * y <= i) goto <D.10852>;
        {
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
            while (1)
              {
                if (k >= n) goto <D.10854>;
                {
                  float z;

                                    float z;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = std::pow (*(data + (sizetype) ((long long unsigned int) (i * comp + k) * 4)) * stbi__h2l_scale_i, stbi__h2l_gamma_i) * 2.55e+2 + 5.0e-1) >>>>>;
                  if (z < 0.0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = 0.0) >>>>>;
                    }
                  if (z > 2.55e+2)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = 2.55e+2) >>>>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + (sizetype) (i * comp + k)) = (stbi_uc) (int) z) >>>>>;
                }
                <<cleanup_point (void)  ++k>>;
              }
            <D.10854>:;
          }
          {
            if (k < comp)
              {
                {
                  float z = *(data + (sizetype) ((long long unsigned int) (i * comp + k) * 4)) * 2.55e+2 + 5.0e-1;

                                    float z = *(data + (sizetype) ((long long unsigned int) (i * comp + k) * 4)) * 2.55e+2 + 5.0e-1;
                  if (z < 0.0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = 0.0) >>>>>;
                    }
                  if (z > 2.55e+2)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = 2.55e+2) >>>>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + (sizetype) (i * comp + k)) = (stbi_uc) (int) z) >>>>>;
                }
              }
          }
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.10852>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) data) >>>>>;
  return <retval> = output;
}


;; Function int stbi__build_huffman(stbi__huffman*, int*) (null)
;; enabled by -tree-original


{
  int i;
  int j;
  int k = 0;
  unsigned int code;

    int i;
    int j;
  <<cleanup_point   int k = 0;>>;
    unsigned int code;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i > 15) goto <D.10945>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
      while (1)
        {
          if (*(count + (sizetype) ((long long unsigned int) i * 4)) <= j) goto <D.10947>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h->size[k++ ] = (stbi_uc) i + 1) >>>>>;
          <<cleanup_point (void)  ++j>>;
        }
      <D.10947>:;
      <<cleanup_point (void)  ++i>>;
    }
  <D.10945>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h->size[k] = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (code = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 1) >>>>>;
  while (1)
    {
      if (j > 16) goto <D.10949>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h->delta[j] = (int) ((unsigned int) k - code)) >>>>>;
      if ((int) h->size[k] == j)
        {
          while (1)
            {
              if ((int) h->size[k] != j) goto <D.10951>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h->code[k++ ] = (stbi__uint16) code++ ) >>>>>;
            }
          <D.10951>:;
          if (code + 4294967295 >> j != 0)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad code lengths")>>;
            }
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h->maxcode[j] = code << 16 - j) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (code = code << 1) >>>>>;
      <<cleanup_point (void)  ++j>>;
    }
  <D.10949>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h->maxcode[j] = 4294967295) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) &h->fast, 255, 512) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
    while (1)
      {
        if (i >= k) goto <D.10953>;
        {
          int s = (int) h->size[i];

                    int s = (int) h->size[i];
          {
            if (s <= 9)
              {
                {
                  int c = (int) h->code[i] << 9 - s;
                  int m = 1 << 9 - s;

                                    int c = (int) h->code[i] << 9 - s;
                                    int m = 1 << 9 - s;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                  while (1)
                    {
                      if (j >= m) goto <D.10955>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h->fast[c + j] = (stbi_uc) i) >>>>>;
                      <<cleanup_point (void)  ++j>>;
                    }
                  <D.10955>:;
                }
              }
          }
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.10953>:;
  }
  return <retval> = 1;
}


;; Function void stbi__build_fast_ac(stbi__int16*, stbi__huffman*) (null)
;; enabled by -tree-original


{
  int i;

    int i;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
    while (1)
      {
        if (i > 511) goto <D.10969>;
        {
          stbi_uc fast = h->fast[i];

                    stbi_uc fast = h->fast[i];
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(fast_ac + (sizetype) ((long long unsigned int) i * 2)) = 0) >>>>>;
          {
            if (fast != 255)
              {
                {
                  int rs = (int) h->values[(int) fast];
                  int run = rs >> 4 & 15;
                  int magbits = rs & 15;
                  int len = (int) h->size[(int) fast];

                                    int rs = (int) h->values[(int) fast];
                                    int run = rs >> 4 & 15;
                                    int magbits = rs & 15;
                                    int len = (int) h->size[(int) fast];
                  {
                    if (magbits != 0 && len + magbits <= 9)
                      {
                        {
                          int k = (i << len & 511) >> 9 - magbits;
                          int m = 1 << magbits + -1;

                                                    int k = (i << len & 511) >> 9 - magbits;
                                                    int m = 1 << magbits + -1;
                          if (k < m)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = (int) (((4294967295 << magbits) + (unsigned int) k) + 1)) >>>>>;
                            }
                          if (k >= -128 && k <= 127)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(fast_ac + (sizetype) ((long long unsigned int) i * 2)) = (stbi__int16) ((unsigned short) (k * 16 + run) * 16 + ((unsigned short) len + (unsigned short) magbits))) >>>>>;
                            }
                        }
                      }
                  }
                }
              }
          }
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.10969>:;
  }
}


;; Function void stbi__grow_buffer_unsafe(stbi__jpeg*) (null)
;; enabled by -tree-original


{
  while (1)
    {
      {
        unsigned int b;

                unsigned int b;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = j->nomore == 0 ? (unsigned int) stbi__get8 (j->s) : 0) >>>>>;
        {
          if (b == 255)
            {
              {
                int c;

                                int c;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) stbi__get8 (j->s)) >>>>>;
                while (1)
                  {
                    if (c != 255) goto <D.10978>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) stbi__get8 (j->s)) >>>>>;
                  }
                <D.10978>:;
                if (c != 0)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->marker = (unsigned char) c) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->nomore = 1) >>>>>;
                    return;
                  }
              }
            }
        }
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_buffer = j->code_buffer | b << 24 - j->code_bits) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_bits = j->code_bits + 8) >>>>>;
      }
      if (j->code_bits > 24) goto <D.10976>;
    }
  <D.10976>:;
}


;; Function int stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*) (null)
;; enabled by -tree-original


{
  unsigned int temp;
  int c;
  int k;

    unsigned int temp;
    int c;
    int k;
  if (j->code_bits <= 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (j) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) (j->code_buffer >> 23)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = (int) h->fast[c]) >>>>>;
  {
    if (k <= 254)
      {
        {
          int s = (int) h->size[k];

                    int s = (int) h->size[k];
          if (j->code_bits < s)
            {
              return <retval> = -1;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_buffer = j->code_buffer << s) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_bits = j->code_bits - s) >>>>>;
          return <retval> = (int) h->values[k];
        }
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (temp = j->code_buffer >> 16) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 10) >>>>>;
  while (1)
    {
      if (h->maxcode[k] > temp) goto <D.10989>;
      <<cleanup_point (void)  ++k>>;
    }
  <D.10989>:;
  if (k == 17)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_bits = j->code_bits + -16) >>>>>;
      return <retval> = -1;
    }
  if (j->code_bits < k)
    {
      return <retval> = -1;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) ((j->code_buffer >> 32 - k & (unsigned int) stbi__bmask[k]) + (stbi__uint32) h->delta[k])) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((j->code_buffer >> 32 - (int) h->size[c] & (unsigned int) stbi__bmask[(int) h->size[c]]) == (stbi__uint32) h->code[c] || (_assert ((const char *) "(((j->code_buffer) >> (32 - h->size[c])) & stbi__bmask[h->size[c]]) == h->code[c]", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 2075);, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_bits = j->code_bits - k) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_buffer = j->code_buffer << k) >>>>>;
  return <retval> = (int) h->values[c];
}


;; Function int stbi__extend_receive(stbi__jpeg*, int) (null)
;; enabled by -tree-original


{
  unsigned int k;
  int sgn;

    unsigned int k;
    int sgn;
  if (j->code_bits < n)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (j) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sgn = (stbi__int32) j->code_buffer >> 31) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = j->code_buffer r<< n) >>>>>;
  if (n < 0 || n > 16)
    {
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_buffer = ~(unsigned int) stbi__bmask[n] & k) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = (stbi__uint32) stbi__bmask[n] & k) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_bits = j->code_bits - n) >>>>>;
  return <retval> = (int) ((unsigned int) ((int) stbi__jbias[n] & ~sgn) + k);
}


;; Function int stbi__jpeg_get_bits(stbi__jpeg*, int) (null)
;; enabled by -tree-original


{
  unsigned int k;

    unsigned int k;
  if (j->code_bits < n)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (j) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = j->code_buffer r<< n) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_buffer = ~(unsigned int) stbi__bmask[n] & k) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = (stbi__uint32) stbi__bmask[n] & k) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_bits = j->code_bits - n) >>>>>;
  return <retval> = (int) k;
}


;; Function int stbi__jpeg_get_bit(stbi__jpeg*) (null)
;; enabled by -tree-original


{
  unsigned int k;

    unsigned int k;
  if (j->code_bits <= 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (j) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = j->code_buffer) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_buffer = j->code_buffer << 1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --j->code_bits >>>>>;
  return <retval> = (int) k & -2147483648;
}


;; Function int stbi__jpeg_decode_block(stbi__jpeg*, short int*, stbi__huffman*, stbi__huffman*, stbi__int16*, int, stbi__uint16*) (null)
;; enabled by -tree-original


{
  int diff;
  int dc;
  int k;
  int t;

    int diff;
    int dc;
    int k;
    int t;
  if (j->code_bits <= 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (j) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t = stbi__jpeg_huff_decode (j, hdc)) >>>>>;
  if (t < 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad huffman code")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) data, 0, 128) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (diff = t != 0 ? stbi__extend_receive (j, t) : 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dc = j->img_comp[b].dc_pred + diff) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->img_comp[b].dc_pred = dc) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <data> = (short int) ((unsigned short) *NON_LVALUE_EXPR <dequant> * (unsigned short) dc)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 1) >>>>>;
  while (1)
    {
      {
        unsigned int zig;
        int c;
        int r;
        int s;

                unsigned int zig;
                int c;
                int r;
                int s;
        if (j->code_bits <= 15)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (j) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) (j->code_buffer >> 23)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = (int) *(fac + (sizetype) ((long long unsigned int) c * 2))) >>>>>;
        {
          if (r != 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = (r >> 4 & 15) + k) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = r & 15) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_buffer = j->code_buffer << s) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_bits = j->code_bits - s) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (zig = (unsigned int) stbi__jpeg_dezigzag[k++ ]) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(data + (sizetype) ((long long unsigned int) zig * 2)) = (short int) ((unsigned short) (r >> 8) * (unsigned short) *(dequant + (sizetype) ((long long unsigned int) zig * 2)))) >>>>>;
            }
          else
            {
              {
                int rs;

                                int rs;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rs = stbi__jpeg_huff_decode (j, hac)) >>>>>;
                if (rs < 0)
                  {
                    <<cleanup_point return <retval> = stbi__err ((const char *) "bad huffman code")>>;
                  }
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = rs & 15) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = rs >> 4) >>>>>;
                if (s == 0)
                  {
                    if (rs != 240) goto <D.11026>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = k + 16) >>>>>;
                  }
                else
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = k + r) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (zig = (unsigned int) stbi__jpeg_dezigzag[k++ ]) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(data + (sizetype) ((long long unsigned int) zig * 2)) = (short int) ((unsigned short) stbi__extend_receive (j, s) * (unsigned short) *(dequant + (sizetype) ((long long unsigned int) zig * 2)))) >>>>>;
                  }
              }
            }
        }
      }
      if (k > 63) goto <D.11026>;
    }
  <D.11026>:;
  return <retval> = 1;
}


;; Function int stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short int*, stbi__huffman*, int) (null)
;; enabled by -tree-original


{
  int diff;
  int dc;
  int t;

    int diff;
    int dc;
    int t;
  if (j->spec_end != 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "can\'t merge dc and ac")>>;
    }
  if (j->code_bits <= 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (j) >>>>>;
    }
  if (j->succ_high == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) data, 0, 128) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t = stbi__jpeg_huff_decode (j, hdc)) >>>>>;
      if (t == -1)
        {
          <<cleanup_point return <retval> = stbi__err ((const char *) "can\'t merge dc and ac")>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (diff = t != 0 ? stbi__extend_receive (j, t) : 0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dc = j->img_comp[b].dc_pred + diff) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->img_comp[b].dc_pred = dc) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <data> = (short int) (dc << j->succ_low)) >>>>>;
    }
  else
    {
      if (<<cleanup_point stbi__jpeg_get_bit (j) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <data> = (short int) ((unsigned short) *NON_LVALUE_EXPR <data> + (unsigned short) (1 << j->succ_low))) >>>>>;
        }
    }
  return <retval> = 1;
}


;; Function int stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short int*, stbi__huffman*, stbi__int16*) (null)
;; enabled by -tree-original


{
  int k;

    int k;
  if (j->spec_start == 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "can\'t merge dc and ac")>>;
    }
  {
    if (j->succ_high == 0)
      {
        {
          int shift = j->succ_low;

                    int shift = j->succ_low;
          if (j->eob_run != 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --j->eob_run >>>>>;
              return <retval> = 1;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = j->spec_start) >>>>>;
          while (1)
            {
              {
                unsigned int zig;
                int c;
                int r;
                int s;

                                unsigned int zig;
                                int c;
                                int r;
                                int s;
                if (j->code_bits <= 15)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (j) >>>>>;
                  }
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) (j->code_buffer >> 23)) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = (int) *(fac + (sizetype) ((long long unsigned int) c * 2))) >>>>>;
                {
                  if (r != 0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = (r >> 4 & 15) + k) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = r & 15) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_buffer = j->code_buffer << s) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_bits = j->code_bits - s) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (zig = (unsigned int) stbi__jpeg_dezigzag[k++ ]) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(data + (sizetype) ((long long unsigned int) zig * 2)) = (short int) ((r >> 8) << shift)) >>>>>;
                    }
                  else
                    {
                      {
                        int rs;

                                                int rs;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rs = stbi__jpeg_huff_decode (j, hac)) >>>>>;
                        if (rs < 0)
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "bad huffman code")>>;
                          }
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = rs & 15) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = rs >> 4) >>>>>;
                        if (s == 0)
                          {
                            if (r <= 14)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->eob_run = 1 << r) >>>>>;
                                if (r != 0)
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->eob_run = TARGET_EXPR <D.11050, stbi__jpeg_get_bits (j, r)>;, j->eob_run + D.11050;) >>>>>;
                                  }
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --j->eob_run >>>>>;
                                goto <D.11058>;
                              }
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = k + 16) >>>>>;
                          }
                        else
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = k + r) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (zig = (unsigned int) stbi__jpeg_dezigzag[k++ ]) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(data + (sizetype) ((long long unsigned int) zig * 2)) = (short int) (stbi__extend_receive (j, s) << shift)) >>>>>;
                          }
                      }
                    }
                }
              }
              if (j->spec_end < k) goto <D.11058>;
            }
          <D.11058>:;
        }
      }
    else
      {
        {
          short int bit = (short int) (1 << j->succ_low);

                    short int bit = (short int) (1 << j->succ_low);
          {
            if (j->eob_run != 0)
              {
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --j->eob_run >>>>>;
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = j->spec_start) >>>>>;
                    while (1)
                      {
                        if (j->spec_end < k) goto <D.11060>;
                        {
                          short int * p = data + (sizetype) ((long long unsigned int) stbi__jpeg_dezigzag[k] * 2);

                                                    short int * p = data + (sizetype) ((long long unsigned int) stbi__jpeg_dezigzag[k] * 2);
                          if (*p != 0)
                            {
                              if (<<cleanup_point stbi__jpeg_get_bit (j) != 0>>)
                                {
                                  if ((*p & bit) == 0)
                                    {
                                      if (*p > 0)
                                        {
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = (short int) ((unsigned short) *p + (unsigned short) bit)) >>>>>;
                                        }
                                      else
                                        {
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = (short int) ((unsigned short) *p - (unsigned short) bit)) >>>>>;
                                        }
                                    }
                                }
                            }
                        }
                        <<cleanup_point (void)  ++k>>;
                      }
                    <D.11060>:;
                  }
                }
              }
            else
              {
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = j->spec_start) >>>>>;
                  while (1)
                    {
                      {
                        int r;
                        int s;
                        int rs;

                                                int r;
                                                int s;
                                                int rs;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rs = stbi__jpeg_huff_decode (j, hac)) >>>>>;
                        if (rs < 0)
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "bad huffman code")>>;
                          }
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = rs & 15) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = rs >> 4) >>>>>;
                        if (s == 0)
                          {
                            if (r <= 14)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->eob_run = (1 << r) + -1) >>>>>;
                                if (r != 0)
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->eob_run = TARGET_EXPR <D.11056, stbi__jpeg_get_bits (j, r)>;, j->eob_run + D.11056;) >>>>>;
                                  }
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = 64) >>>>>;
                              }
                            else
                              {
                                
                              }
                          }
                        else
                          {
                            if (s != 1)
                              {
                                <<cleanup_point return <retval> = stbi__err ((const char *) "bad huffman code")>>;
                              }
                            if (<<cleanup_point stbi__jpeg_get_bit (j) != 0>>)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = (int) bit) >>>>>;
                              }
                            else
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = -(int) bit) >>>>>;
                              }
                          }
                        while (1)
                          {
                            if (j->spec_end < k) goto <D.11064>;
                            {
                              short int * p;

                                                            short int * p;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = data + (sizetype) ((long long unsigned int) stbi__jpeg_dezigzag[k++ ] * 2)) >>>>>;
                              if (*p != 0)
                                {
                                  if (<<cleanup_point stbi__jpeg_get_bit (j) != 0>>)
                                    {
                                      if ((*p & bit) == 0)
                                        {
                                          if (*p > 0)
                                            {
                                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = (short int) ((unsigned short) *p + (unsigned short) bit)) >>>>>;
                                            }
                                          else
                                            {
                                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = (short int) ((unsigned short) *p - (unsigned short) bit)) >>>>>;
                                            }
                                        }
                                    }
                                }
                              else
                                {
                                  if (r == 0)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = (short int) s) >>>>>;
                                      goto <D.11064>;
                                    }
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --r >>>>>;
                                }
                            }
                          }
                        <D.11064>:;
                      }
                      if (j->spec_end < k) goto <D.11062>;
                    }
                  <D.11062>:;
                }
              }
          }
        }
      }
  }
  return <retval> = 1;
}


;; Function stbi_uc stbi__clamp(int) (null)
;; enabled by -tree-original


if ((unsigned int) x > 255)
  {
    if (x < 0)
      {
        return <retval> = 0;
      }
    if (x > 255)
      {
        return <retval> = 255;
      }
  }
return <retval> = (stbi_uc) x;


;; Function void stbi__idct_block(stbi_uc*, int, short int*) (null)
;; enabled by -tree-original


{
  int i;
  int val[64];
  int * v = (int *) &val;
  stbi_uc * o;
  short int * d = data;

    int i;
    int val[64];
    int * v = (int *) &val;
    stbi_uc * o;
    short int * d = data;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
    while (1)
      {
        if (i > 7) goto <D.11106>;
        {
          {
            if ((((((*(d + 16) == 0 && *(d + 32) == 0) && *(d + 48) == 0) && *(d + 64) == 0) && *(d + 80) == 0) && *(d + 96) == 0) && *(d + 112) == 0)
              {
                {
                  int dcterm = (int) *NON_LVALUE_EXPR <d> * 4;

                                    int dcterm = (int) *NON_LVALUE_EXPR <d> * 4;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <v> = *(v + 32) = *(v + 64) = *(v + 96) = *(v + 128) = *(v + 160) = *(v + 192) = *(v + 224) = dcterm) >>>>>;
                }
              }
            else
              {
                {
                  int t0;
                  int t1;
                  int t2;
                  int t3;
                  int p1;
                  int p2;
                  int p3;
                  int p4;
                  int p5;
                  int x0;
                  int x1;
                  int x2;
                  int x3;

                                    int t0;
                                    int t1;
                                    int t2;
                                    int t3;
                                    int p1;
                                    int p2;
                                    int p3;
                                    int p4;
                                    int p5;
                                    int x0;
                                    int x1;
                                    int x2;
                                    int x3;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = (int) *(d + 32)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = (int) *(d + 96)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = (p2 + p3) * 2217) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2 = p3 * -7567 + p1) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3 = p2 * 3135 + p1) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = (int) *NON_LVALUE_EXPR <d>) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = (int) *(d + 64)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = (p2 + p3) * 4096) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (p2 - p3) * 4096) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x0 = t0 + t3) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x3 = t0 - t3) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x1 = t1 + t2) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x2 = t1 - t2) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = (int) *(d + 112)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (int) *(d + 80)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2 = (int) *(d + 48)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3 = (int) *(d + 16)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = t0 + t2) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p4 = t1 + t3) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = t0 + t3) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = t1 + t2) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p5 = (p3 + p4) * 4816) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = t0 * 1223) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = t1 * 8410) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2 = t2 * 12586) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3 = t3 * 6149) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = p1 * -3685 + p5) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = p2 * -10497 + p5) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = p3 * -8034) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p4 = p4 * -1597) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3 = (p1 + p4) + t3) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2 = (p2 + p3) + t2) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (p2 + p4) + t1) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = (p1 + p3) + t0) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x0 = x0 + 512) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x1 = x1 + 512) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x2 = x2 + 512) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x3 = x3 + 512) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <v> = x0 + t3 >> 10) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(v + 224) = x0 - t3 >> 10) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(v + 32) = x1 + t2 >> 10) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(v + 192) = x1 - t2 >> 10) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(v + 64) = x2 + t1 >> 10) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(v + 160) = x2 - t1 >> 10) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(v + 96) = x3 + t0 >> 10) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(v + 128) = x3 - t0 >> 10) >>>>>;
                }
              }
          }
        }
        <<cleanup_point (void)  ++i;, (void)  ++d;;, (void)  ++v;>>;
      }
    <D.11106>:;
  }
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0);, (void) (v = (int *) &val);;, (void) (o = out); >>>>>;
    while (1)
      {
        if (i > 7) goto <D.11108>;
        {
          int t0;
          int t1;
          int t2;
          int t3;
          int p1;
          int p2;
          int p3;
          int p4;
          int p5;
          int x0;
          int x1;
          int x2;
          int x3;

                    int t0;
                    int t1;
                    int t2;
                    int t3;
                    int p1;
                    int p2;
                    int p3;
                    int p4;
                    int p5;
                    int x0;
                    int x1;
                    int x2;
                    int x3;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = *(v + 8)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = *(v + 24)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = (p2 + p3) * 2217) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2 = p3 * -7567 + p1) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3 = p2 * 3135 + p1) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = *NON_LVALUE_EXPR <v>) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = *(v + 16)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = (p2 + p3) * 4096) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (p2 - p3) * 4096) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x0 = t0 + t3) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x3 = t0 - t3) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x1 = t1 + t2) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x2 = t1 - t2) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = *(v + 28)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = *(v + 20)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2 = *(v + 12)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3 = *(v + 4)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = t0 + t2) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p4 = t1 + t3) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = t0 + t3) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = t1 + t2) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p5 = (p3 + p4) * 4816) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = t0 * 1223) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = t1 * 8410) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2 = t2 * 12586) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3 = t3 * 6149) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = p1 * -3685 + p5) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = p2 * -10497 + p5) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = p3 * -8034) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p4 = p4 * -1597) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3 = (p1 + p4) + t3) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2 = (p2 + p3) + t2) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (p2 + p4) + t1) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = (p1 + p3) + t0) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x0 = x0 + 16842752) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x1 = x1 + 16842752) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x2 = x2 + 16842752) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x3 = x3 + 16842752) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <o> = stbi__clamp (x0 + t3 >> 17)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(o + 7) = stbi__clamp (x0 - t3 >> 17)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(o + 1) = stbi__clamp (x1 + t2 >> 17)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(o + 6) = stbi__clamp (x1 - t2 >> 17)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(o + 2) = stbi__clamp (x2 + t1 >> 17)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(o + 5) = stbi__clamp (x2 - t1 >> 17)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(o + 3) = stbi__clamp (x3 + t0 >> 17)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(o + 4) = stbi__clamp (x3 - t0 >> 17)) >>>>>;
        }
        <<cleanup_point (void)  ++i;, (void) (v = v + 32);;, (void) (o = o + (sizetype) out_stride);>>;
      }
    <D.11108>:;
  }
}


;; Function void stbi__idct_simd(stbi_uc*, int, short int*) (null)
;; enabled by -tree-original


{
  __m128i row0;
  __m128i row1;
  __m128i row2;
  __m128i row3;
  __m128i row4;
  __m128i row5;
  __m128i row6;
  __m128i row7;
  __m128i tmp;
  __m128i rot0_0;
  __m128i rot0_1;
  __m128i rot1_0;
  __m128i rot1_1;
  __m128i rot2_0;
  __m128i rot2_1;
  __m128i rot3_0;
  __m128i rot3_1;
  __m128i bias_0;
  __m128i bias_1;

    __m128i row0;
    __m128i row1;
    __m128i row2;
    __m128i row3;
    __m128i row4;
    __m128i row5;
    __m128i row6;
    __m128i row7;
    __m128i tmp;
    __m128i rot0_0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot0_0 = _mm_setr_epi16 (2217, -5350, 2217, -5350, 2217, -5350, 2217, -5350)) >>>>>;
    __m128i rot0_1;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot0_1 = _mm_setr_epi16 (5352, 2217, 5352, 2217, 5352, 2217, 5352, 2217)) >>>>>;
    __m128i rot1_0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot1_0 = _mm_setr_epi16 (1131, 4816, 1131, 4816, 1131, 4816, 1131, 4816)) >>>>>;
    __m128i rot1_1;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot1_1 = _mm_setr_epi16 (4816, -5681, 4816, -5681, 4816, -5681, 4816, -5681)) >>>>>;
    __m128i rot2_0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot2_0 = _mm_setr_epi16 (-6811, -8034, -6811, -8034, -6811, -8034, -6811, -8034)) >>>>>;
    __m128i rot2_1;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot2_1 = _mm_setr_epi16 (-8034, 4552, -8034, 4552, -8034, 4552, -8034, 4552)) >>>>>;
    __m128i rot3_0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot3_0 = _mm_setr_epi16 (6813, -1597, 6813, -1597, 6813, -1597, 6813, -1597)) >>>>>;
    __m128i rot3_1;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot3_1 = _mm_setr_epi16 (-1597, 4552, -1597, 4552, -1597, 4552, -1597, 4552)) >>>>>;
    __m128i bias_0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bias_0 = _mm_set1_epi32 (512)) >>>>>;
    __m128i bias_1;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bias_1 = _mm_set1_epi32 (16842752)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row0 = _mm_load_si128 ((const __m128i * {ref-all}) NON_LVALUE_EXPR <data>)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row1 = _mm_load_si128 ((const __m128i * {ref-all}) (data + 16))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row2 = _mm_load_si128 ((const __m128i * {ref-all}) (data + 32))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row3 = _mm_load_si128 ((const __m128i * {ref-all}) (data + 48))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row4 = _mm_load_si128 ((const __m128i * {ref-all}) (data + 64))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row5 = _mm_load_si128 ((const __m128i * {ref-all}) (data + 80))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row6 = _mm_load_si128 ((const __m128i * {ref-all}) (data + 96))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row7 = _mm_load_si128 ((const __m128i * {ref-all}) (data + 112))) >>>>>;
  {
    __m128i rot0_0lo;
    __m128i rot0_0hi;
    __m128i t2e_l;
    __m128i t2e_h;
    __m128i t3e_l;
    __m128i t3e_h;
    __m128i sum04;
    __m128i dif04;
    __m128i t0e_l;
    __m128i t0e_h;
    __m128i t1e_l;
    __m128i t1e_h;
    __m128i x0_l;
    __m128i x0_h;
    __m128i x3_l;
    __m128i x3_h;
    __m128i x1_l;
    __m128i x1_h;
    __m128i x2_l;
    __m128i x2_h;
    __m128i rot2_0lo;
    __m128i rot2_0hi;
    __m128i y0o_l;
    __m128i y0o_h;
    __m128i y2o_l;
    __m128i y2o_h;
    __m128i rot3_0lo;
    __m128i rot3_0hi;
    __m128i y1o_l;
    __m128i y1o_h;
    __m128i y3o_l;
    __m128i y3o_h;
    __m128i sum17;
    __m128i sum35;
    __m128i rot1_0lo;
    __m128i rot1_0hi;
    __m128i y4o_l;
    __m128i y4o_h;
    __m128i y5o_l;
    __m128i y5o_h;
    __m128i x4_l;
    __m128i x4_h;
    __m128i x5_l;
    __m128i x5_h;
    __m128i x6_l;
    __m128i x6_h;
    __m128i x7_l;
    __m128i x7_h;

        __m128i rot0_0lo;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot0_0lo = _mm_unpacklo_epi16 (row2, row6)) >>>>>;
        __m128i rot0_0hi;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot0_0hi = _mm_unpackhi_epi16 (row2, row6)) >>>>>;
        __m128i t2e_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2e_l = _mm_madd_epi16 (rot0_0lo, rot0_0)) >>>>>;
        __m128i t2e_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2e_h = _mm_madd_epi16 (rot0_0hi, rot0_0)) >>>>>;
        __m128i t3e_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3e_l = _mm_madd_epi16 (rot0_0lo, rot0_1)) >>>>>;
        __m128i t3e_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3e_h = _mm_madd_epi16 (rot0_0hi, rot0_1)) >>>>>;
        __m128i sum04;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum04 = _mm_add_epi16 (row0, row4)) >>>>>;
        __m128i dif04;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif04 = _mm_sub_epi16 (row0, row4)) >>>>>;
        __m128i t0e_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0e_l = _mm_srai_epi32 (_mm_unpacklo_epi16 (_mm_setzero_si128 (), sum04), 4)) >>>>>;
        __m128i t0e_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0e_h = _mm_srai_epi32 (_mm_unpackhi_epi16 (_mm_setzero_si128 (), sum04), 4)) >>>>>;
        __m128i t1e_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1e_l = _mm_srai_epi32 (_mm_unpacklo_epi16 (_mm_setzero_si128 (), dif04), 4)) >>>>>;
        __m128i t1e_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1e_h = _mm_srai_epi32 (_mm_unpackhi_epi16 (_mm_setzero_si128 (), dif04), 4)) >>>>>;
        __m128i x0_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x0_l = _mm_add_epi32 (t0e_l, t3e_l)) >>>>>;
        __m128i x0_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x0_h = _mm_add_epi32 (t0e_h, t3e_h)) >>>>>;
        __m128i x3_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x3_l = _mm_sub_epi32 (t0e_l, t3e_l)) >>>>>;
        __m128i x3_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x3_h = _mm_sub_epi32 (t0e_h, t3e_h)) >>>>>;
        __m128i x1_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x1_l = _mm_add_epi32 (t1e_l, t2e_l)) >>>>>;
        __m128i x1_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x1_h = _mm_add_epi32 (t1e_h, t2e_h)) >>>>>;
        __m128i x2_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x2_l = _mm_sub_epi32 (t1e_l, t2e_l)) >>>>>;
        __m128i x2_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x2_h = _mm_sub_epi32 (t1e_h, t2e_h)) >>>>>;
        __m128i rot2_0lo;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot2_0lo = _mm_unpacklo_epi16 (row7, row3)) >>>>>;
        __m128i rot2_0hi;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot2_0hi = _mm_unpackhi_epi16 (row7, row3)) >>>>>;
        __m128i y0o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y0o_l = _mm_madd_epi16 (rot2_0lo, rot2_0)) >>>>>;
        __m128i y0o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y0o_h = _mm_madd_epi16 (rot2_0hi, rot2_0)) >>>>>;
        __m128i y2o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y2o_l = _mm_madd_epi16 (rot2_0lo, rot2_1)) >>>>>;
        __m128i y2o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y2o_h = _mm_madd_epi16 (rot2_0hi, rot2_1)) >>>>>;
        __m128i rot3_0lo;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot3_0lo = _mm_unpacklo_epi16 (row5, row1)) >>>>>;
        __m128i rot3_0hi;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot3_0hi = _mm_unpackhi_epi16 (row5, row1)) >>>>>;
        __m128i y1o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y1o_l = _mm_madd_epi16 (rot3_0lo, rot3_0)) >>>>>;
        __m128i y1o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y1o_h = _mm_madd_epi16 (rot3_0hi, rot3_0)) >>>>>;
        __m128i y3o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y3o_l = _mm_madd_epi16 (rot3_0lo, rot3_1)) >>>>>;
        __m128i y3o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y3o_h = _mm_madd_epi16 (rot3_0hi, rot3_1)) >>>>>;
        __m128i sum17;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum17 = _mm_add_epi16 (row1, row7)) >>>>>;
        __m128i sum35;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum35 = _mm_add_epi16 (row3, row5)) >>>>>;
        __m128i rot1_0lo;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot1_0lo = _mm_unpacklo_epi16 (sum17, sum35)) >>>>>;
        __m128i rot1_0hi;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot1_0hi = _mm_unpackhi_epi16 (sum17, sum35)) >>>>>;
        __m128i y4o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y4o_l = _mm_madd_epi16 (rot1_0lo, rot1_0)) >>>>>;
        __m128i y4o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y4o_h = _mm_madd_epi16 (rot1_0hi, rot1_0)) >>>>>;
        __m128i y5o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y5o_l = _mm_madd_epi16 (rot1_0lo, rot1_1)) >>>>>;
        __m128i y5o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y5o_h = _mm_madd_epi16 (rot1_0hi, rot1_1)) >>>>>;
        __m128i x4_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x4_l = _mm_add_epi32 (y0o_l, y4o_l)) >>>>>;
        __m128i x4_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x4_h = _mm_add_epi32 (y0o_h, y4o_h)) >>>>>;
        __m128i x5_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x5_l = _mm_add_epi32 (y1o_l, y5o_l)) >>>>>;
        __m128i x5_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x5_h = _mm_add_epi32 (y1o_h, y5o_h)) >>>>>;
        __m128i x6_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x6_l = _mm_add_epi32 (y2o_l, y5o_l)) >>>>>;
        __m128i x6_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x6_h = _mm_add_epi32 (y2o_h, y5o_h)) >>>>>;
        __m128i x7_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x7_l = _mm_add_epi32 (y3o_l, y4o_l)) >>>>>;
        __m128i x7_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x7_h = _mm_add_epi32 (y3o_h, y4o_h)) >>>>>;
    {
      __m128i abiased_l;
      __m128i abiased_h;
      __m128i sum_l;
      __m128i sum_h;
      __m128i dif_l;
      __m128i dif_h;

            __m128i abiased_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_l = _mm_add_epi32 (x0_l, bias_0)) >>>>>;
            __m128i abiased_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_h = _mm_add_epi32 (x0_h, bias_0)) >>>>>;
            __m128i sum_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_l = _mm_add_epi32 (abiased_l, x7_l)) >>>>>;
            __m128i sum_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_h = _mm_add_epi32 (abiased_h, x7_h)) >>>>>;
            __m128i dif_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_l = _mm_sub_epi32 (abiased_l, x7_l)) >>>>>;
            __m128i dif_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_h = _mm_sub_epi32 (abiased_h, x7_h)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row0 = _mm_packs_epi32 (_mm_srai_epi32 (sum_l, 10), _mm_srai_epi32 (sum_h, 10))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row7 = _mm_packs_epi32 (_mm_srai_epi32 (dif_l, 10), _mm_srai_epi32 (dif_h, 10))) >>>>>;
    }
    {
      __m128i abiased_l;
      __m128i abiased_h;
      __m128i sum_l;
      __m128i sum_h;
      __m128i dif_l;
      __m128i dif_h;

            __m128i abiased_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_l = _mm_add_epi32 (x1_l, bias_0)) >>>>>;
            __m128i abiased_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_h = _mm_add_epi32 (x1_h, bias_0)) >>>>>;
            __m128i sum_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_l = _mm_add_epi32 (abiased_l, x6_l)) >>>>>;
            __m128i sum_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_h = _mm_add_epi32 (abiased_h, x6_h)) >>>>>;
            __m128i dif_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_l = _mm_sub_epi32 (abiased_l, x6_l)) >>>>>;
            __m128i dif_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_h = _mm_sub_epi32 (abiased_h, x6_h)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row1 = _mm_packs_epi32 (_mm_srai_epi32 (sum_l, 10), _mm_srai_epi32 (sum_h, 10))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row6 = _mm_packs_epi32 (_mm_srai_epi32 (dif_l, 10), _mm_srai_epi32 (dif_h, 10))) >>>>>;
    }
    {
      __m128i abiased_l;
      __m128i abiased_h;
      __m128i sum_l;
      __m128i sum_h;
      __m128i dif_l;
      __m128i dif_h;

            __m128i abiased_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_l = _mm_add_epi32 (x2_l, bias_0)) >>>>>;
            __m128i abiased_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_h = _mm_add_epi32 (x2_h, bias_0)) >>>>>;
            __m128i sum_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_l = _mm_add_epi32 (abiased_l, x5_l)) >>>>>;
            __m128i sum_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_h = _mm_add_epi32 (abiased_h, x5_h)) >>>>>;
            __m128i dif_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_l = _mm_sub_epi32 (abiased_l, x5_l)) >>>>>;
            __m128i dif_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_h = _mm_sub_epi32 (abiased_h, x5_h)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row2 = _mm_packs_epi32 (_mm_srai_epi32 (sum_l, 10), _mm_srai_epi32 (sum_h, 10))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row5 = _mm_packs_epi32 (_mm_srai_epi32 (dif_l, 10), _mm_srai_epi32 (dif_h, 10))) >>>>>;
    }
    {
      __m128i abiased_l;
      __m128i abiased_h;
      __m128i sum_l;
      __m128i sum_h;
      __m128i dif_l;
      __m128i dif_h;

            __m128i abiased_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_l = _mm_add_epi32 (x3_l, bias_0)) >>>>>;
            __m128i abiased_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_h = _mm_add_epi32 (x3_h, bias_0)) >>>>>;
            __m128i sum_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_l = _mm_add_epi32 (abiased_l, x4_l)) >>>>>;
            __m128i sum_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_h = _mm_add_epi32 (abiased_h, x4_h)) >>>>>;
            __m128i dif_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_l = _mm_sub_epi32 (abiased_l, x4_l)) >>>>>;
            __m128i dif_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_h = _mm_sub_epi32 (abiased_h, x4_h)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row3 = _mm_packs_epi32 (_mm_srai_epi32 (sum_l, 10), _mm_srai_epi32 (sum_h, 10))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row4 = _mm_packs_epi32 (_mm_srai_epi32 (dif_l, 10), _mm_srai_epi32 (dif_h, 10))) >>>>>;
    }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row0 = _mm_unpacklo_epi16 (row0, row4)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row4 = _mm_unpackhi_epi16 (tmp, row4)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row1 = _mm_unpacklo_epi16 (row1, row5)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row5 = _mm_unpackhi_epi16 (tmp, row5)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row2) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row2 = _mm_unpacklo_epi16 (row2, row6)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row6 = _mm_unpackhi_epi16 (tmp, row6)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row3) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row3 = _mm_unpacklo_epi16 (row3, row7)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row7 = _mm_unpackhi_epi16 (tmp, row7)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row0 = _mm_unpacklo_epi16 (row0, row2)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row2 = _mm_unpackhi_epi16 (tmp, row2)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row1 = _mm_unpacklo_epi16 (row1, row3)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row3 = _mm_unpackhi_epi16 (tmp, row3)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row4) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row4 = _mm_unpacklo_epi16 (row4, row6)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row6 = _mm_unpackhi_epi16 (tmp, row6)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row5) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row5 = _mm_unpacklo_epi16 (row5, row7)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row7 = _mm_unpackhi_epi16 (tmp, row7)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row0 = _mm_unpacklo_epi16 (row0, row1)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row1 = _mm_unpackhi_epi16 (tmp, row1)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row2) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row2 = _mm_unpacklo_epi16 (row2, row3)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row3 = _mm_unpackhi_epi16 (tmp, row3)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row4) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row4 = _mm_unpacklo_epi16 (row4, row5)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row5 = _mm_unpackhi_epi16 (tmp, row5)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = row6) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row6 = _mm_unpacklo_epi16 (row6, row7)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row7 = _mm_unpackhi_epi16 (tmp, row7)) >>>>>;
  {
    __m128i rot0_0lo;
    __m128i rot0_0hi;
    __m128i t2e_l;
    __m128i t2e_h;
    __m128i t3e_l;
    __m128i t3e_h;
    __m128i sum04;
    __m128i dif04;
    __m128i t0e_l;
    __m128i t0e_h;
    __m128i t1e_l;
    __m128i t1e_h;
    __m128i x0_l;
    __m128i x0_h;
    __m128i x3_l;
    __m128i x3_h;
    __m128i x1_l;
    __m128i x1_h;
    __m128i x2_l;
    __m128i x2_h;
    __m128i rot2_0lo;
    __m128i rot2_0hi;
    __m128i y0o_l;
    __m128i y0o_h;
    __m128i y2o_l;
    __m128i y2o_h;
    __m128i rot3_0lo;
    __m128i rot3_0hi;
    __m128i y1o_l;
    __m128i y1o_h;
    __m128i y3o_l;
    __m128i y3o_h;
    __m128i sum17;
    __m128i sum35;
    __m128i rot1_0lo;
    __m128i rot1_0hi;
    __m128i y4o_l;
    __m128i y4o_h;
    __m128i y5o_l;
    __m128i y5o_h;
    __m128i x4_l;
    __m128i x4_h;
    __m128i x5_l;
    __m128i x5_h;
    __m128i x6_l;
    __m128i x6_h;
    __m128i x7_l;
    __m128i x7_h;

        __m128i rot0_0lo;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot0_0lo = _mm_unpacklo_epi16 (row2, row6)) >>>>>;
        __m128i rot0_0hi;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot0_0hi = _mm_unpackhi_epi16 (row2, row6)) >>>>>;
        __m128i t2e_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2e_l = _mm_madd_epi16 (rot0_0lo, rot0_0)) >>>>>;
        __m128i t2e_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t2e_h = _mm_madd_epi16 (rot0_0hi, rot0_0)) >>>>>;
        __m128i t3e_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3e_l = _mm_madd_epi16 (rot0_0lo, rot0_1)) >>>>>;
        __m128i t3e_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t3e_h = _mm_madd_epi16 (rot0_0hi, rot0_1)) >>>>>;
        __m128i sum04;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum04 = _mm_add_epi16 (row0, row4)) >>>>>;
        __m128i dif04;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif04 = _mm_sub_epi16 (row0, row4)) >>>>>;
        __m128i t0e_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0e_l = _mm_srai_epi32 (_mm_unpacklo_epi16 (_mm_setzero_si128 (), sum04), 4)) >>>>>;
        __m128i t0e_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0e_h = _mm_srai_epi32 (_mm_unpackhi_epi16 (_mm_setzero_si128 (), sum04), 4)) >>>>>;
        __m128i t1e_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1e_l = _mm_srai_epi32 (_mm_unpacklo_epi16 (_mm_setzero_si128 (), dif04), 4)) >>>>>;
        __m128i t1e_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1e_h = _mm_srai_epi32 (_mm_unpackhi_epi16 (_mm_setzero_si128 (), dif04), 4)) >>>>>;
        __m128i x0_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x0_l = _mm_add_epi32 (t0e_l, t3e_l)) >>>>>;
        __m128i x0_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x0_h = _mm_add_epi32 (t0e_h, t3e_h)) >>>>>;
        __m128i x3_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x3_l = _mm_sub_epi32 (t0e_l, t3e_l)) >>>>>;
        __m128i x3_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x3_h = _mm_sub_epi32 (t0e_h, t3e_h)) >>>>>;
        __m128i x1_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x1_l = _mm_add_epi32 (t1e_l, t2e_l)) >>>>>;
        __m128i x1_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x1_h = _mm_add_epi32 (t1e_h, t2e_h)) >>>>>;
        __m128i x2_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x2_l = _mm_sub_epi32 (t1e_l, t2e_l)) >>>>>;
        __m128i x2_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x2_h = _mm_sub_epi32 (t1e_h, t2e_h)) >>>>>;
        __m128i rot2_0lo;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot2_0lo = _mm_unpacklo_epi16 (row7, row3)) >>>>>;
        __m128i rot2_0hi;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot2_0hi = _mm_unpackhi_epi16 (row7, row3)) >>>>>;
        __m128i y0o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y0o_l = _mm_madd_epi16 (rot2_0lo, rot2_0)) >>>>>;
        __m128i y0o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y0o_h = _mm_madd_epi16 (rot2_0hi, rot2_0)) >>>>>;
        __m128i y2o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y2o_l = _mm_madd_epi16 (rot2_0lo, rot2_1)) >>>>>;
        __m128i y2o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y2o_h = _mm_madd_epi16 (rot2_0hi, rot2_1)) >>>>>;
        __m128i rot3_0lo;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot3_0lo = _mm_unpacklo_epi16 (row5, row1)) >>>>>;
        __m128i rot3_0hi;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot3_0hi = _mm_unpackhi_epi16 (row5, row1)) >>>>>;
        __m128i y1o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y1o_l = _mm_madd_epi16 (rot3_0lo, rot3_0)) >>>>>;
        __m128i y1o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y1o_h = _mm_madd_epi16 (rot3_0hi, rot3_0)) >>>>>;
        __m128i y3o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y3o_l = _mm_madd_epi16 (rot3_0lo, rot3_1)) >>>>>;
        __m128i y3o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y3o_h = _mm_madd_epi16 (rot3_0hi, rot3_1)) >>>>>;
        __m128i sum17;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum17 = _mm_add_epi16 (row1, row7)) >>>>>;
        __m128i sum35;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum35 = _mm_add_epi16 (row3, row5)) >>>>>;
        __m128i rot1_0lo;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot1_0lo = _mm_unpacklo_epi16 (sum17, sum35)) >>>>>;
        __m128i rot1_0hi;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rot1_0hi = _mm_unpackhi_epi16 (sum17, sum35)) >>>>>;
        __m128i y4o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y4o_l = _mm_madd_epi16 (rot1_0lo, rot1_0)) >>>>>;
        __m128i y4o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y4o_h = _mm_madd_epi16 (rot1_0hi, rot1_0)) >>>>>;
        __m128i y5o_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y5o_l = _mm_madd_epi16 (rot1_0lo, rot1_1)) >>>>>;
        __m128i y5o_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y5o_h = _mm_madd_epi16 (rot1_0hi, rot1_1)) >>>>>;
        __m128i x4_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x4_l = _mm_add_epi32 (y0o_l, y4o_l)) >>>>>;
        __m128i x4_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x4_h = _mm_add_epi32 (y0o_h, y4o_h)) >>>>>;
        __m128i x5_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x5_l = _mm_add_epi32 (y1o_l, y5o_l)) >>>>>;
        __m128i x5_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x5_h = _mm_add_epi32 (y1o_h, y5o_h)) >>>>>;
        __m128i x6_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x6_l = _mm_add_epi32 (y2o_l, y5o_l)) >>>>>;
        __m128i x6_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x6_h = _mm_add_epi32 (y2o_h, y5o_h)) >>>>>;
        __m128i x7_l;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x7_l = _mm_add_epi32 (y3o_l, y4o_l)) >>>>>;
        __m128i x7_h;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x7_h = _mm_add_epi32 (y3o_h, y4o_h)) >>>>>;
    {
      __m128i abiased_l;
      __m128i abiased_h;
      __m128i sum_l;
      __m128i sum_h;
      __m128i dif_l;
      __m128i dif_h;

            __m128i abiased_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_l = _mm_add_epi32 (x0_l, bias_1)) >>>>>;
            __m128i abiased_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_h = _mm_add_epi32 (x0_h, bias_1)) >>>>>;
            __m128i sum_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_l = _mm_add_epi32 (abiased_l, x7_l)) >>>>>;
            __m128i sum_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_h = _mm_add_epi32 (abiased_h, x7_h)) >>>>>;
            __m128i dif_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_l = _mm_sub_epi32 (abiased_l, x7_l)) >>>>>;
            __m128i dif_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_h = _mm_sub_epi32 (abiased_h, x7_h)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row0 = _mm_packs_epi32 (_mm_srai_epi32 (sum_l, 17), _mm_srai_epi32 (sum_h, 17))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row7 = _mm_packs_epi32 (_mm_srai_epi32 (dif_l, 17), _mm_srai_epi32 (dif_h, 17))) >>>>>;
    }
    {
      __m128i abiased_l;
      __m128i abiased_h;
      __m128i sum_l;
      __m128i sum_h;
      __m128i dif_l;
      __m128i dif_h;

            __m128i abiased_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_l = _mm_add_epi32 (x1_l, bias_1)) >>>>>;
            __m128i abiased_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_h = _mm_add_epi32 (x1_h, bias_1)) >>>>>;
            __m128i sum_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_l = _mm_add_epi32 (abiased_l, x6_l)) >>>>>;
            __m128i sum_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_h = _mm_add_epi32 (abiased_h, x6_h)) >>>>>;
            __m128i dif_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_l = _mm_sub_epi32 (abiased_l, x6_l)) >>>>>;
            __m128i dif_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_h = _mm_sub_epi32 (abiased_h, x6_h)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row1 = _mm_packs_epi32 (_mm_srai_epi32 (sum_l, 17), _mm_srai_epi32 (sum_h, 17))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row6 = _mm_packs_epi32 (_mm_srai_epi32 (dif_l, 17), _mm_srai_epi32 (dif_h, 17))) >>>>>;
    }
    {
      __m128i abiased_l;
      __m128i abiased_h;
      __m128i sum_l;
      __m128i sum_h;
      __m128i dif_l;
      __m128i dif_h;

            __m128i abiased_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_l = _mm_add_epi32 (x2_l, bias_1)) >>>>>;
            __m128i abiased_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_h = _mm_add_epi32 (x2_h, bias_1)) >>>>>;
            __m128i sum_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_l = _mm_add_epi32 (abiased_l, x5_l)) >>>>>;
            __m128i sum_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_h = _mm_add_epi32 (abiased_h, x5_h)) >>>>>;
            __m128i dif_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_l = _mm_sub_epi32 (abiased_l, x5_l)) >>>>>;
            __m128i dif_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_h = _mm_sub_epi32 (abiased_h, x5_h)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row2 = _mm_packs_epi32 (_mm_srai_epi32 (sum_l, 17), _mm_srai_epi32 (sum_h, 17))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row5 = _mm_packs_epi32 (_mm_srai_epi32 (dif_l, 17), _mm_srai_epi32 (dif_h, 17))) >>>>>;
    }
    {
      __m128i abiased_l;
      __m128i abiased_h;
      __m128i sum_l;
      __m128i sum_h;
      __m128i dif_l;
      __m128i dif_h;

            __m128i abiased_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_l = _mm_add_epi32 (x3_l, bias_1)) >>>>>;
            __m128i abiased_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (abiased_h = _mm_add_epi32 (x3_h, bias_1)) >>>>>;
            __m128i sum_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_l = _mm_add_epi32 (abiased_l, x4_l)) >>>>>;
            __m128i sum_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sum_h = _mm_add_epi32 (abiased_h, x4_h)) >>>>>;
            __m128i dif_l;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_l = _mm_sub_epi32 (abiased_l, x4_l)) >>>>>;
            __m128i dif_h;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dif_h = _mm_sub_epi32 (abiased_h, x4_h)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row3 = _mm_packs_epi32 (_mm_srai_epi32 (sum_l, 17), _mm_srai_epi32 (sum_h, 17))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (row4 = _mm_packs_epi32 (_mm_srai_epi32 (dif_l, 17), _mm_srai_epi32 (dif_h, 17))) >>>>>;
    }
  }
  {
    __m128i p0;
    __m128i p1;
    __m128i p2;
    __m128i p3;

        __m128i p0;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p0 = _mm_packus_epi16 (row0, row1)) >>>>>;
        __m128i p1;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = _mm_packus_epi16 (row2, row3)) >>>>>;
        __m128i p2;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = _mm_packus_epi16 (row4, row5)) >>>>>;
        __m128i p3;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = _mm_packus_epi16 (row6, row7)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = p0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p0 = _mm_unpacklo_epi8 (p0, p2)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = _mm_unpackhi_epi8 (tmp, p2)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = p1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = _mm_unpacklo_epi8 (p1, p3)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = _mm_unpackhi_epi8 (tmp, p3)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = p0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p0 = _mm_unpacklo_epi8 (p0, p1)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = _mm_unpackhi_epi8 (tmp, p1)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = p2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = _mm_unpacklo_epi8 (p2, p3)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = _mm_unpackhi_epi8 (tmp, p3)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = p0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p0 = _mm_unpacklo_epi8 (p0, p2)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p2 = _mm_unpackhi_epi8 (tmp, p2)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = p1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p1 = _mm_unpacklo_epi8 (p1, p3)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p3 = _mm_unpackhi_epi8 (tmp, p3)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storel_epi64 ((__m128i * {ref-all}) out, p0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) out_stride) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storel_epi64 ((__m128i * {ref-all}) out, VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pshufd (VIEW_CONVERT_EXPR<__v4si>(NON_LVALUE_EXPR <p0>), 78))) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) out_stride) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storel_epi64 ((__m128i * {ref-all}) out, p2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) out_stride) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storel_epi64 ((__m128i * {ref-all}) out, VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pshufd (VIEW_CONVERT_EXPR<__v4si>(NON_LVALUE_EXPR <p2>), 78))) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) out_stride) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storel_epi64 ((__m128i * {ref-all}) out, p1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) out_stride) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storel_epi64 ((__m128i * {ref-all}) out, VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pshufd (VIEW_CONVERT_EXPR<__v4si>(NON_LVALUE_EXPR <p1>), 78))) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) out_stride) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storel_epi64 ((__m128i * {ref-all}) out, p3) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) out_stride) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storel_epi64 ((__m128i * {ref-all}) out, VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_pshufd (VIEW_CONVERT_EXPR<__v4si>(NON_LVALUE_EXPR <p3>), 78))) >>>>>;
  }
}


;; Function stbi_uc stbi__get_marker(stbi__jpeg*) (null)
;; enabled by -tree-original


{
  stbi_uc x;

    stbi_uc x;
  if (j->marker != 255)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = j->marker) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->marker = 255) >>>>>;
      return <retval> = x;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = stbi__get8 (j->s)) >>>>>;
  if (x != 255)
    {
      return <retval> = 255;
    }
  while (1)
    {
      if (x != 255) goto <D.11286>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = stbi__get8 (j->s)) >>>>>;
    }
  <D.11286>:;
  return <retval> = x;
}


;; Function void stbi__jpeg_reset(stbi__jpeg*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_bits = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->code_buffer = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->nomore = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->marker = 255) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->todo = j->restart_interval != 0 ? j->restart_interval : 2147483647) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->eob_run = 0) >>>>>;


;; Function int stbi__parse_entropy_coded_data(stbi__jpeg*) (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__jpeg_reset (z) >>>>>;
  {
    if (z->progressive == 0)
      {
        {
          {
            if (z->scan_n == 1)
              {
                {
                  int i;
                  int j;
                  short int data[64];
                  int n = z->order[0];
                  int w = z->img_comp[n].x + 7 >> 3;
                  int h = z->img_comp[n].y + 7 >> 3;

                                    int i;
                                    int j;
                                    short int data[64];
                                    int n = z->order[0];
                                    int w = z->img_comp[n].x + 7 >> 3;
                                    int h = z->img_comp[n].y + 7 >> 3;
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                    while (1)
                      {
                        if (j >= h) goto <D.11327>;
                        {
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if (i >= w) goto <D.11329>;
                                {
                                  int ha = z->img_comp[n].ha;

                                                                    int ha = z->img_comp[n].ha;
                                  if (<<cleanup_point stbi__jpeg_decode_block (z, (short int *) &data, (struct stbi__huffman *) &z->huff_dc + (sizetype) ((long long unsigned int) z->img_comp[n].hd * 1680), (struct stbi__huffman *) &z->huff_ac + (sizetype) ((long long unsigned int) ha * 1680), (stbi__int16 *) &z->fast_ac[ha], n, (stbi__uint16 *) &z->dequant[z->img_comp[n].tq]) == 0>>)
                                    {
                                      return <retval> = 0;
                                    }
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  z->idct_block_kernel (z->img_comp[n].data + ((sizetype) ((z->img_comp[n].w2 * j) * 8) + (sizetype) (i * 8)), z->img_comp[n].w2, (short int *) &data) >>>>>;
                                  if (<<cleanup_point  --z->todo <= 0>>)
                                    {
                                      if (z->code_bits <= 23)
                                        {
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (z) >>>>>;
                                        }
                                      if (z->marker <= 207 || z->marker > 215)
                                        {
                                          return <retval> = 1;
                                        }
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__jpeg_reset (z) >>>>>;
                                    }
                                }
                                <<cleanup_point (void)  ++i>>;
                              }
                            <D.11329>:;
                          }
                        }
                        <<cleanup_point (void)  ++j>>;
                      }
                    <D.11327>:;
                  }
                  return <retval> = 1;
                }
              }
            else
              {
                {
                  int i;
                  int j;
                  int k;
                  int x;
                  int y;
                  short int data[64];

                                    int i;
                                    int j;
                                    int k;
                                    int x;
                                    int y;
                                    short int data[64];
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                    while (1)
                      {
                        if (z->img_mcu_y <= j) goto <D.11331>;
                        {
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if (z->img_mcu_x <= i) goto <D.11333>;
                                {
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                                    while (1)
                                      {
                                        if (z->scan_n <= k) goto <D.11335>;
                                        {
                                          int n = z->order[k];

                                                                                    int n = z->order[k];
                                          {
                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = 0) >>>>>;
                                            while (1)
                                              {
                                                if (z->img_comp[n].v <= y) goto <D.11337>;
                                                {
                                                  {
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = 0) >>>>>;
                                                    while (1)
                                                      {
                                                        if (z->img_comp[n].h <= x) goto <D.11339>;
                                                        {
                                                          int x2 = (z->img_comp[n].h * i + x) * 8;
                                                          int y2 = (z->img_comp[n].v * j + y) * 8;
                                                          int ha = z->img_comp[n].ha;

                                                                                                                    int x2 = (z->img_comp[n].h * i + x) * 8;
                                                                                                                    int y2 = (z->img_comp[n].v * j + y) * 8;
                                                                                                                    int ha = z->img_comp[n].ha;
                                                          if (<<cleanup_point stbi__jpeg_decode_block (z, (short int *) &data, (struct stbi__huffman *) &z->huff_dc + (sizetype) ((long long unsigned int) z->img_comp[n].hd * 1680), (struct stbi__huffman *) &z->huff_ac + (sizetype) ((long long unsigned int) ha * 1680), (stbi__int16 *) &z->fast_ac[ha], n, (stbi__uint16 *) &z->dequant[z->img_comp[n].tq]) == 0>>)
                                                            {
                                                              return <retval> = 0;
                                                            }
                                                          <<cleanup_point <<< Unknown tree: expr_stmt
  z->idct_block_kernel (z->img_comp[n].data + ((sizetype) (z->img_comp[n].w2 * y2) + (sizetype) x2), z->img_comp[n].w2, (short int *) &data) >>>>>;
                                                        }
                                                        <<cleanup_point (void)  ++x>>;
                                                      }
                                                    <D.11339>:;
                                                  }
                                                }
                                                <<cleanup_point (void)  ++y>>;
                                              }
                                            <D.11337>:;
                                          }
                                        }
                                        <<cleanup_point (void)  ++k>>;
                                      }
                                    <D.11335>:;
                                  }
                                  if (<<cleanup_point  --z->todo <= 0>>)
                                    {
                                      if (z->code_bits <= 23)
                                        {
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (z) >>>>>;
                                        }
                                      if (z->marker <= 207 || z->marker > 215)
                                        {
                                          return <retval> = 1;
                                        }
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__jpeg_reset (z) >>>>>;
                                    }
                                }
                                <<cleanup_point (void)  ++i>>;
                              }
                            <D.11333>:;
                          }
                        }
                        <<cleanup_point (void)  ++j>>;
                      }
                    <D.11331>:;
                  }
                  return <retval> = 1;
                }
              }
          }
        }
      }
    else
      {
        {
          {
            if (z->scan_n == 1)
              {
                {
                  int i;
                  int j;
                  int n = z->order[0];
                  int w = z->img_comp[n].x + 7 >> 3;
                  int h = z->img_comp[n].y + 7 >> 3;

                                    int i;
                                    int j;
                                    int n = z->order[0];
                                    int w = z->img_comp[n].x + 7 >> 3;
                                    int h = z->img_comp[n].y + 7 >> 3;
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                    while (1)
                      {
                        if (j >= h) goto <D.11341>;
                        {
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if (i >= w) goto <D.11343>;
                                {
                                  short int * data = z->img_comp[n].coeff + (sizetype) ((long long unsigned int) ((z->img_comp[n].coeff_w * j + i) * 64) * 2);

                                                                    short int * data = z->img_comp[n].coeff + (sizetype) ((long long unsigned int) ((z->img_comp[n].coeff_w * j + i) * 64) * 2);
                                  {
                                    if (z->spec_start == 0)
                                      {
                                        if (<<cleanup_point stbi__jpeg_decode_block_prog_dc (z, data, &z->huff_dc[z->img_comp[n].hd], n) == 0>>)
                                          {
                                            return <retval> = 0;
                                          }
                                      }
                                    else
                                      {
                                        {
                                          int ha = z->img_comp[n].ha;

                                                                                    int ha = z->img_comp[n].ha;
                                          if (<<cleanup_point stbi__jpeg_decode_block_prog_ac (z, data, &z->huff_ac[ha], (stbi__int16 *) &z->fast_ac[ha]) == 0>>)
                                            {
                                              return <retval> = 0;
                                            }
                                        }
                                      }
                                  }
                                  if (<<cleanup_point  --z->todo <= 0>>)
                                    {
                                      if (z->code_bits <= 23)
                                        {
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (z) >>>>>;
                                        }
                                      if (z->marker <= 207 || z->marker > 215)
                                        {
                                          return <retval> = 1;
                                        }
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__jpeg_reset (z) >>>>>;
                                    }
                                }
                                <<cleanup_point (void)  ++i>>;
                              }
                            <D.11343>:;
                          }
                        }
                        <<cleanup_point (void)  ++j>>;
                      }
                    <D.11341>:;
                  }
                  return <retval> = 1;
                }
              }
            else
              {
                {
                  int i;
                  int j;
                  int k;
                  int x;
                  int y;

                                    int i;
                                    int j;
                                    int k;
                                    int x;
                                    int y;
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                    while (1)
                      {
                        if (z->img_mcu_y <= j) goto <D.11345>;
                        {
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if (z->img_mcu_x <= i) goto <D.11347>;
                                {
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                                    while (1)
                                      {
                                        if (z->scan_n <= k) goto <D.11349>;
                                        {
                                          int n = z->order[k];

                                                                                    int n = z->order[k];
                                          {
                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = 0) >>>>>;
                                            while (1)
                                              {
                                                if (z->img_comp[n].v <= y) goto <D.11351>;
                                                {
                                                  {
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = 0) >>>>>;
                                                    while (1)
                                                      {
                                                        if (z->img_comp[n].h <= x) goto <D.11353>;
                                                        {
                                                          int x2 = z->img_comp[n].h * i + x;
                                                          int y2 = z->img_comp[n].v * j + y;
                                                          short int * data = z->img_comp[n].coeff + (sizetype) ((long long unsigned int) ((z->img_comp[n].coeff_w * y2 + x2) * 64) * 2);

                                                                                                                    int x2 = z->img_comp[n].h * i + x;
                                                                                                                    int y2 = z->img_comp[n].v * j + y;
                                                                                                                    short int * data = z->img_comp[n].coeff + (sizetype) ((long long unsigned int) ((z->img_comp[n].coeff_w * y2 + x2) * 64) * 2);
                                                          if (<<cleanup_point stbi__jpeg_decode_block_prog_dc (z, data, &z->huff_dc[z->img_comp[n].hd], n) == 0>>)
                                                            {
                                                              return <retval> = 0;
                                                            }
                                                        }
                                                        <<cleanup_point (void)  ++x>>;
                                                      }
                                                    <D.11353>:;
                                                  }
                                                }
                                                <<cleanup_point (void)  ++y>>;
                                              }
                                            <D.11351>:;
                                          }
                                        }
                                        <<cleanup_point (void)  ++k>>;
                                      }
                                    <D.11349>:;
                                  }
                                  if (<<cleanup_point  --z->todo <= 0>>)
                                    {
                                      if (z->code_bits <= 23)
                                        {
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__grow_buffer_unsafe (z) >>>>>;
                                        }
                                      if (z->marker <= 207 || z->marker > 215)
                                        {
                                          return <retval> = 1;
                                        }
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__jpeg_reset (z) >>>>>;
                                    }
                                }
                                <<cleanup_point (void)  ++i>>;
                              }
                            <D.11347>:;
                          }
                        }
                        <<cleanup_point (void)  ++j>>;
                      }
                    <D.11345>:;
                  }
                  return <retval> = 1;
                }
              }
          }
        }
      }
  }
}


;; Function void stbi__jpeg_dequantize(short int*, stbi__uint16*) (null)
;; enabled by -tree-original


{
  int i;

    int i;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i > 63) goto <D.11360>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(data + (sizetype) ((long long unsigned int) i * 2)) = (short int) ((unsigned short) *(data + (sizetype) ((long long unsigned int) i * 2)) * (unsigned short) *(dequant + (sizetype) ((long long unsigned int) i * 2)))) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.11360>:;
}


;; Function void stbi__jpeg_finish(stbi__jpeg*) (null)
;; enabled by -tree-original


{
  {
    if (z->progressive != 0)
      {
        {
          int i;
          int j;
          int n;

                    int i;
                    int j;
                    int n;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = 0) >>>>>;
            while (1)
              {
                if (z->s->img_n <= n) goto <D.11371>;
                {
                  int w = z->img_comp[n].x + 7 >> 3;
                  int h = z->img_comp[n].y + 7 >> 3;

                                    int w = z->img_comp[n].x + 7 >> 3;
                                    int h = z->img_comp[n].y + 7 >> 3;
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                    while (1)
                      {
                        if (j >= h) goto <D.11373>;
                        {
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if (i >= w) goto <D.11375>;
                                {
                                  short int * data = z->img_comp[n].coeff + (sizetype) ((long long unsigned int) ((z->img_comp[n].coeff_w * j + i) * 64) * 2);

                                                                    short int * data = z->img_comp[n].coeff + (sizetype) ((long long unsigned int) ((z->img_comp[n].coeff_w * j + i) * 64) * 2);
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__jpeg_dequantize (data, (stbi__uint16 *) &z->dequant[z->img_comp[n].tq]) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  z->idct_block_kernel (z->img_comp[n].data + ((sizetype) ((z->img_comp[n].w2 * j) * 8) + (sizetype) (i * 8)), z->img_comp[n].w2, data) >>>>>;
                                }
                                <<cleanup_point (void)  ++i>>;
                              }
                            <D.11375>:;
                          }
                        }
                        <<cleanup_point (void)  ++j>>;
                      }
                    <D.11373>:;
                  }
                }
                <<cleanup_point (void)  ++n>>;
              }
            <D.11371>:;
          }
        }
      }
  }
}


;; Function int stbi__process_marker(stbi__jpeg*, int) (null)
;; enabled by -tree-original


{
  int L;

    int L;
  {
    switch (m)
      {
        {
          case 255:;
          <<cleanup_point return <retval> = stbi__err ((const char *) "expected marker")>>;
          case 221:;
          if (<<cleanup_point stbi__get16be (z->s) != 4>>)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad DRI len")>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->restart_interval = stbi__get16be (z->s)) >>>>>;
          return <retval> = 1;
          case 219:;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = stbi__get16be (z->s) + -2) >>>>>;
          while (1)
            {
              if (L <= 0) goto <D.11405>;
              {
                int q;
                int p = q >> 4;
                int sixteen = p != 0;
                int t = q & 15;
                int i;

                                int q;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (q = (int) stbi__get8 (z->s)) >>>>>;
                                int p = q >> 4;
                                int sixteen = p != 0;
                                int t = q & 15;
                                int i;
                if (p != 0 && p != 1)
                  {
                    <<cleanup_point return <retval> = stbi__err ((const char *) "bad DQT type")>>;
                  }
                if (t > 3)
                  {
                    <<cleanup_point return <retval> = stbi__err ((const char *) "bad DQT table")>>;
                  }
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                while (1)
                  {
                    if (i > 63) goto <D.11407>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->dequant[t][(int) stbi__jpeg_dezigzag[i]] = sixteen != 0 ? (stbi__uint16) stbi__get16be (z->s) : (stbi__uint16) stbi__get8 (z->s)) >>>>>;
                    <<cleanup_point (void)  ++i>>;
                  }
                <D.11407>:;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = L - (sixteen != 0 ? 129 : 65)) >>>>>;
              }
            }
          <D.11405>:;
          return <retval> = L == 0;
          case 196:;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = stbi__get16be (z->s) + -2) >>>>>;
          while (1)
            {
              if (L <= 0) goto <D.11409>;
              {
                stbi_uc * v;
                int sizes[16];
                int i;
                int n = 0;
                int q;
                int tc = q >> 4;
                int th = q & 15;

                                stbi_uc * v;
                                int sizes[16];
                                int i;
                <<cleanup_point                 int n = 0;>>;
                                int q;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (q = (int) stbi__get8 (z->s)) >>>>>;
                                int tc = q >> 4;
                                int th = q & 15;
                if (tc > 1 || th > 3)
                  {
                    <<cleanup_point return <retval> = stbi__err ((const char *) "bad DHT header")>>;
                  }
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                while (1)
                  {
                    if (i > 15) goto <D.11411>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sizes[i] = (int) stbi__get8 (z->s)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = sizes[i] + n) >>>>>;
                    <<cleanup_point (void)  ++i>>;
                  }
                <D.11411>:;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = L + -17) >>>>>;
                if (tc == 0)
                  {
                    if (<<cleanup_point stbi__build_huffman ((struct stbi__huffman *) &z->huff_dc + (sizetype) ((long long unsigned int) th * 1680), (int *) &sizes) == 0>>)
                      {
                        return <retval> = 0;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = (stbi_uc *) &z->huff_dc[th].values) >>>>>;
                  }
                else
                  {
                    if (<<cleanup_point stbi__build_huffman ((struct stbi__huffman *) &z->huff_ac + (sizetype) ((long long unsigned int) th * 1680), (int *) &sizes) == 0>>)
                      {
                        return <retval> = 0;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = (stbi_uc *) &z->huff_ac[th].values) >>>>>;
                  }
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                while (1)
                  {
                    if (i >= n) goto <D.11413>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(v + (sizetype) i) = stbi__get8 (z->s)) >>>>>;
                    <<cleanup_point (void)  ++i>>;
                  }
                <D.11413>:;
                if (tc != 0)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__build_fast_ac ((stbi__int16 *) &z->fast_ac[th], (struct stbi__huffman *) &z->huff_ac + (sizetype) ((long long unsigned int) th * 1680)) >>>>>;
                  }
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = L - n) >>>>>;
              }
            }
          <D.11409>:;
          return <retval> = L == 0;
        }
      }
  }
  {
    if (m > 223 && m <= 239 || m == 254)
      {
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = stbi__get16be (z->s)) >>>>>;
          if (L <= 1)
            {
              if (m == 254)
                {
                  <<cleanup_point return <retval> = stbi__err ((const char *) "bad COM len")>>;
                }
              else
                {
                  <<cleanup_point return <retval> = stbi__err ((const char *) "bad APP len")>>;
                }
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = L + -2) >>>>>;
          {
            if (m == 224 && L > 4)
              {
                {
                  static const unsigned char tag[5] = {74, 70, 73, 70, 0};
                  int ok = 1;
                  int i;

                  <<cleanup_point                   static const unsigned char tag[5] = {74, 70, 73, 70, 0};>>;
                  <<cleanup_point                   int ok = 1;>>;
                                    int i;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                  while (1)
                    {
                      if (i > 4) goto <D.11415>;
                      if (<<cleanup_point stbi__get8 (z->s) != (stbi_uc) tag[i]>>)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ok = 0) >>>>>;
                        }
                      <<cleanup_point (void)  ++i>>;
                    }
                  <D.11415>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = L + -5) >>>>>;
                  if (ok != 0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->jfif = 1) >>>>>;
                    }
                }
              }
            else
              {
                {
                  {
                    if (m == 238 && L > 11)
                      {
                        {
                          static const unsigned char tag[6] = {65, 100, 111, 98, 101, 0};
                          int ok = 1;
                          int i;

                          <<cleanup_point                           static const unsigned char tag[6] = {65, 100, 111, 98, 101, 0};>>;
                          <<cleanup_point                           int ok = 1;>>;
                                                    int i;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                          while (1)
                            {
                              if (i > 5) goto <D.11417>;
                              if (<<cleanup_point stbi__get8 (z->s) != (stbi_uc) tag[i]>>)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ok = 0) >>>>>;
                                }
                              <<cleanup_point (void)  ++i>>;
                            }
                          <D.11417>:;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = L + -6) >>>>>;
                          if (ok != 0)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get8 (z->s) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get16be (z->s) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get16be (z->s) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->app14_color_transform = (int) stbi__get8 (z->s)) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (L = L + -6) >>>>>;
                            }
                        }
                      }
                  }
                }
              }
          }
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (z->s, L) >>>>>;
          return <retval> = 1;
        }
      }
  }
  <<cleanup_point return <retval> = stbi__err ((const char *) "unknown marker")>>;
}


;; Function int stbi__process_scan_header(stbi__jpeg*) (null)
;; enabled by -tree-original


{
  int i;
  int Ls;

    int i;
    int Ls;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (Ls = stbi__get16be (z->s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->scan_n = (int) stbi__get8 (z->s)) >>>>>;
  if ((z->scan_n <= 0 || z->scan_n > 4) || z->scan_n > z->s->img_n)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad SOS component count")>>;
    }
  if ((z->scan_n + 3) * 2 != Ls)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad SOS len")>>;
    }
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
    while (1)
      {
        if (z->scan_n <= i) goto <D.11428>;
        {
          int id;
          int which;
          int q;

                    int id;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (id = (int) stbi__get8 (z->s)) >>>>>;
                    int which;
                    int q;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (q = (int) stbi__get8 (z->s)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (which = 0) >>>>>;
          while (1)
            {
              if (z->s->img_n <= which) goto <D.11430>;
              if (z->img_comp[which].id == id) goto <D.11430>;
              <<cleanup_point (void)  ++which>>;
            }
          <D.11430>:;
          if (z->s->img_n == which)
            {
              return <retval> = 0;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[which].hd = q >> 4) >>>>>;
          if (z->img_comp[which].hd > 3)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad DC huff")>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[which].ha = q & 15) >>>>>;
          if (z->img_comp[which].ha > 3)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad AC huff")>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->order[i] = which) >>>>>;
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.11428>:;
  }
  {
    int aa;

        int aa;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->spec_start = (int) stbi__get8 (z->s)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->spec_end = (int) stbi__get8 (z->s)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (aa = (int) stbi__get8 (z->s)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->succ_high = aa >> 4) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->succ_low = aa & 15) >>>>>;
    if (z->progressive != 0)
      {
        if ((((z->spec_start > 63 || z->spec_end > 63) || z->spec_start > z->spec_end) || z->succ_high > 13) || z->succ_low > 13)
          {
            <<cleanup_point return <retval> = stbi__err ((const char *) "bad SOS")>>;
          }
      }
    else
      {
        if (z->spec_start != 0)
          {
            <<cleanup_point return <retval> = stbi__err ((const char *) "bad SOS")>>;
          }
        if (z->succ_high != 0 || z->succ_low != 0)
          {
            <<cleanup_point return <retval> = stbi__err ((const char *) "bad SOS")>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->spec_end = 63) >>>>>;
      }
  }
  return <retval> = 1;
}


;; Function int stbi__free_jpeg_components(stbi__jpeg*, int, int) (null)
;; enabled by -tree-original


{
  int i;

    int i;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i >= ncomp) goto <D.11438>;
      if (z->img_comp[i].raw_data != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  free (z->img_comp[i].raw_data) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].raw_data = 0B) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].data = 0B) >>>>>;
        }
      if (z->img_comp[i].raw_coeff != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  free (z->img_comp[i].raw_coeff) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].raw_coeff = 0B) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].coeff = 0B) >>>>>;
        }
      if (z->img_comp[i].linebuf != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) z->img_comp[i].linebuf) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].linebuf = 0B) >>>>>;
        }
      <<cleanup_point (void)  ++i>>;
    }
  <D.11438>:;
  return <retval> = why;
}


;; Function int stbi__process_frame_header(stbi__jpeg*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context * s = z->s;
  int Lf;
  int p;
  int i;
  int q;
  int h_max = 1;
  int v_max = 1;
  int c;

    struct stbi__context * s = z->s;
    int Lf;
    int p;
    int i;
    int q;
  <<cleanup_point   int h_max = 1;>>;
  <<cleanup_point   int v_max = 1;>>;
    int c;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (Lf = stbi__get16be (s)) >>>>>;
  if (Lf <= 10)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad SOF len")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = (int) stbi__get8 (s)) >>>>>;
  if (p != 8)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "only 8-bit")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_y = (stbi__uint32) stbi__get16be (s)) >>>>>;
  if (s->img_y == 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "no header height")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_x = (stbi__uint32) stbi__get16be (s)) >>>>>;
  if (s->img_x == 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "0 width")>>;
    }
  if (s->img_y > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
    }
  if (s->img_x > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) stbi__get8 (s)) >>>>>;
  if ((c != 3 && c != 1) && c != 4)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad component count")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_n = c) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i >= c) goto <D.11453>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].data = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].linebuf = 0B) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.11453>:;
  if (s->img_n * 3 + 8 != Lf)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad SOF len")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->rgb = 0) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
    while (1)
      {
        if (s->img_n <= i) goto <D.11455>;
        {
          static const unsigned char rgb[3] = {82, 71, 66};

          <<cleanup_point           static const unsigned char rgb[3] = {82, 71, 66};>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].id = (int) stbi__get8 (s)) >>>>>;
          if (s->img_n == 3 && z->img_comp[i].id == (int) rgb[i])
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++z->rgb >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (q = (int) stbi__get8 (s)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].h = q >> 4) >>>>>;
          if (z->img_comp[i].h == 0 || z->img_comp[i].h > 4)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad H")>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].v = q & 15) >>>>>;
          if (z->img_comp[i].v == 0 || z->img_comp[i].v > 4)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad V")>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].tq = (int) stbi__get8 (s)) >>>>>;
          if (z->img_comp[i].tq > 3)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad TQ")>>;
            }
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.11455>:;
  }
  if (scan != 0)
    {
      return <retval> = 1;
    }
  if (<<cleanup_point stbi__mad3sizes_valid ((int) s->img_x, (int) s->img_y, s->img_n, 0) == 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (s->img_n <= i) goto <D.11457>;
      if (z->img_comp[i].h > h_max)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h_max = z->img_comp[i].h) >>>>>;
        }
      if (z->img_comp[i].v > v_max)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v_max = z->img_comp[i].v) >>>>>;
        }
      <<cleanup_point (void)  ++i>>;
    }
  <D.11457>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_h_max = h_max) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_v_max = v_max) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_mcu_w = h_max * 8) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_mcu_h = v_max * 8) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_mcu_x = (int) (((s->img_x + (stbi__uint32) z->img_mcu_w) + 4294967295) / (stbi__uint32) z->img_mcu_w)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_mcu_y = (int) (((s->img_y + (stbi__uint32) z->img_mcu_h) + 4294967295) / (stbi__uint32) z->img_mcu_h)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (s->img_n <= i) goto <D.11459>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].x = (int) (((s->img_x * (stbi__uint32) z->img_comp[i].h + (stbi__uint32) h_max) + 4294967295) / (stbi__uint32) h_max)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].y = (int) (((s->img_y * (stbi__uint32) z->img_comp[i].v + (stbi__uint32) v_max) + 4294967295) / (stbi__uint32) v_max)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].w2 = (z->img_mcu_x * z->img_comp[i].h) * 8) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].h2 = (z->img_mcu_y * z->img_comp[i].v) * 8) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].coeff = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].raw_coeff = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].linebuf = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].raw_data = stbi__malloc_mad2 (z->img_comp[i].w2, z->img_comp[i].h2, 15)) >>>>>;
      if (z->img_comp[i].raw_data == 0B)
        {
          <<cleanup_point return <retval> = stbi__free_jpeg_components (z, i + 1, stbi__err ((const char *) "outofmem"))>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].data = (stbi_uc *) ((size_t) z->img_comp[i].raw_data + 15 & 18446744073709551600)) >>>>>;
      if (z->progressive != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].coeff_w = z->img_comp[i].w2 / 8) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].coeff_h = z->img_comp[i].h2 / 8) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].raw_coeff = stbi__malloc_mad3 (z->img_comp[i].w2, z->img_comp[i].h2, 2, 15)) >>>>>;
          if (z->img_comp[i].raw_coeff == 0B)
            {
              <<cleanup_point return <retval> = stbi__free_jpeg_components (z, i + 1, stbi__err ((const char *) "outofmem"))>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[i].coeff = (short int *) ((size_t) z->img_comp[i].raw_coeff + 15 & 18446744073709551600)) >>>>>;
        }
      <<cleanup_point (void)  ++i>>;
    }
  <D.11459>:;
  return <retval> = 1;
}


;; Function int stbi__decode_jpeg_header(stbi__jpeg*, int) (null)
;; enabled by -tree-original


{
  int m;

    int m;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->jfif = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->app14_color_transform = -1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->marker = 255) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = (int) stbi__get_marker (z)) >>>>>;
  if (m != 216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "no SOI")>>;
    }
  if (scan == 1)
    {
      return <retval> = 1;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = (int) stbi__get_marker (z)) >>>>>;
  while (1)
    {
      if ((m == 192 || m == 193) || m == 194) goto <D.11466>;
      if (<<cleanup_point stbi__process_marker (z, m) == 0>>)
        {
          return <retval> = 0;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = (int) stbi__get_marker (z)) >>>>>;
      while (1)
        {
          if (m != 255) goto <D.11468>;
          if (<<cleanup_point stbi__at_eof (z->s) != 0>>)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "no SOF")>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = (int) stbi__get_marker (z)) >>>>>;
        }
      <D.11468>:;
    }
  <D.11466>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->progressive = m == 194) >>>>>;
  if (<<cleanup_point stbi__process_frame_header (z, scan) == 0>>)
    {
      return <retval> = 0;
    }
  return <retval> = 1;
}


;; Function int stbi__decode_jpeg_image(stbi__jpeg*) (null)
;; enabled by -tree-original


{
  int m;

    int m;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = 0) >>>>>;
  while (1)
    {
      if (m > 3) goto <D.11477>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->img_comp[m].raw_data = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->img_comp[m].raw_coeff = 0B) >>>>>;
      <<cleanup_point (void) m++ >>;
    }
  <D.11477>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->restart_interval = 0) >>>>>;
  if (<<cleanup_point stbi__decode_jpeg_header (j, 0) == 0>>)
    {
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = (int) stbi__get_marker (j)) >>>>>;
  while (1)
    {
      if (m == 217) goto <D.11479>;
      {
        {
          if (m == 218)
            {
              {
                if (<<cleanup_point stbi__process_scan_header (j) == 0>>)
                  {
                    return <retval> = 0;
                  }
                if (<<cleanup_point stbi__parse_entropy_coded_data (j) == 0>>)
                  {
                    return <retval> = 0;
                  }
                {
                  if (j->marker == 255)
                    {
                      {
                        while (1)
                          {
                            if (<<cleanup_point stbi__at_eof (j->s) == 0>>) (void) 0; else goto <D.11481>;
                            {
                              int x;

                                                            int x;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = (int) stbi__get8 (j->s)) >>>>>;
                              if (x == 255)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->marker = stbi__get8 (j->s)) >>>>>;
                                  goto <D.11481>;
                                }
                            }
                          }
                        <D.11481>:;
                      }
                    }
                }
              }
            }
          else
            {
              {
                {
                  if (m == 220)
                    {
                      {
                        int Ld;
                        stbi__uint32 NL;

                                                int Ld;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (Ld = stbi__get16be (j->s)) >>>>>;
                                                stbi__uint32 NL;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (NL = (stbi__uint32) stbi__get16be (j->s)) >>>>>;
                        if (Ld != 4)
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "bad DNL len")>>;
                          }
                        if (j->s->img_y != NL)
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "bad DNL height")>>;
                          }
                      }
                    }
                  else
                    {
                      if (<<cleanup_point stbi__process_marker (j, m) == 0>>)
                        {
                          return <retval> = 0;
                        }
                    }
                }
              }
            }
        }
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (m = (int) stbi__get_marker (j)) >>>>>;
      }
    }
  <D.11479>:;
  if (j->progressive != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__jpeg_finish (j) >>>>>;
    }
  return <retval> = 1;
}


;; Function stbi_uc* resample_row_1(stbi_uc*, stbi_uc*, stbi_uc*, int, int) (null)
;; enabled by -tree-original


<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
return <retval> = in_near;


;; Function stbi_uc* stbi__resample_row_v_2(stbi_uc*, stbi_uc*, stbi_uc*, int, int) (null)
;; enabled by -tree-original


{
  int i;

    int i;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i >= w) goto <D.11504>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) i) = (stbi_uc) (((int) *(in_near + (sizetype) i) * 3 + (int) *(in_far + (sizetype) i)) + 2 >> 2)) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.11504>:;
  return <retval> = out;
}


;; Function stbi_uc* stbi__resample_row_h_2(stbi_uc*, stbi_uc*, stbi_uc*, int, int) (null)
;; enabled by -tree-original


{
  int i;
  stbi_uc * input = in_near;

    int i;
    stbi_uc * input = in_near;
  if (w == 1)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = *(out + 1) = *NON_LVALUE_EXPR <input>) >>>>>;
      return <retval> = out;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = *NON_LVALUE_EXPR <input>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = (stbi_uc) (((int) *NON_LVALUE_EXPR <input> * 3 + (int) *(input + 1)) + 2 >> 2)) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 1) >>>>>;
    while (1)
      {
        if (w + -1 <= i) goto <D.11516>;
        {
          int n = (int) *(input + (sizetype) i) * 3 + 2;

                    int n = (int) *(input + (sizetype) i) * 3 + 2;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(NON_LVALUE_EXPR <out> + (sizetype) (i * 2)) = (stbi_uc) ((int) *(input + ((sizetype) i + 18446744073709551615)) + n >> 2)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + ((sizetype) (i * 2) + 1)) = (stbi_uc) ((int) *(input + ((sizetype) i + 1)) + n >> 2)) >>>>>;
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.11516>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(NON_LVALUE_EXPR <out> + (sizetype) (i * 2)) = (stbi_uc) (((int) *(input + ((sizetype) w + 18446744073709551614)) * 3 + (int) *(input + ((sizetype) w + 18446744073709551615))) + 2 >> 2)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + ((sizetype) (i * 2) + 1)) = *(input + ((sizetype) w + 18446744073709551615))) >>>>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  return <retval> = out;
}


;; Function stbi_uc* stbi__resample_row_hv_2(stbi_uc*, stbi_uc*, stbi_uc*, int, int) (null)
;; enabled by -tree-original


{
  int i;
  int t0;
  int t1;

    int i;
    int t0;
    int t1;
  if (w == 1)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = *(out + 1) = (stbi_uc) (((int) *NON_LVALUE_EXPR <in_near> * 3 + (int) *NON_LVALUE_EXPR <in_far>) + 2 >> 2)) >>>>>;
      return <retval> = out;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (int) *NON_LVALUE_EXPR <in_near> * 3 + (int) *NON_LVALUE_EXPR <in_far>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = (stbi_uc) (t1 + 2 >> 2)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 1) >>>>>;
  while (1)
    {
      if (i >= w) goto <D.11528>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = t1) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (int) *(in_near + (sizetype) i) * 3 + (int) *(in_far + (sizetype) i)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + ((sizetype) (i * 2) + 18446744073709551615)) = (stbi_uc) ((t0 * 3 + t1) + 8 >> 4)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) (i * 2)) = (stbi_uc) ((t1 * 3 + t0) + 8 >> 4)) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.11528>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + ((sizetype) (w * 2) + 18446744073709551615)) = (stbi_uc) (t1 + 2 >> 2)) >>>>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  return <retval> = out;
}


;; Function stbi_uc* stbi__resample_row_hv_2_simd(stbi_uc*, stbi_uc*, stbi_uc*, int, int) (null)
;; enabled by -tree-original


{
  int i = 0;
  int t0;
  int t1;

  <<cleanup_point   int i = 0;>>;
    int t0;
    int t1;
  if (w == 1)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = *(out + 1) = (stbi_uc) (((int) *NON_LVALUE_EXPR <in_near> * 3 + (int) *NON_LVALUE_EXPR <in_far>) + 2 >> 2)) >>>>>;
      return <retval> = out;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (int) *NON_LVALUE_EXPR <in_near> * 3 + (int) *NON_LVALUE_EXPR <in_far>) >>>>>;
  {
    while (1)
      {
        if ((w + -1 & -8) <= i) goto <D.11564>;
        {
          __m128i zero;
          __m128i farb;
          __m128i nearb;
          __m128i farw;
          __m128i nearw;
          __m128i diff;
          __m128i nears;
          __m128i curr;
          __m128i prv0 = __builtin_ia32_pslldqi128 (NON_LVALUE_EXPR <curr>, 16);
          __m128i nxt0 = __builtin_ia32_psrldqi128 (NON_LVALUE_EXPR <curr>, 16);
          __m128i prev = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_vec_set_v8hi (VIEW_CONVERT_EXPR<__v8hi>(NON_LVALUE_EXPR <prv0>), (int) (short int) NON_LVALUE_EXPR <t1>, 0));
          __m128i next = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_vec_set_v8hi (VIEW_CONVERT_EXPR<__v8hi>(NON_LVALUE_EXPR <nxt0>), (int) (short int) ((unsigned short) *(in_near + ((sizetype) i + 8)) * 3 + (unsigned short) *(in_far + ((sizetype) i + 8))), 7));
          __m128i bias;
          __m128i curs;
          __m128i prvd;
          __m128i nxtd;
          __m128i curb;
          __m128i even;
          __m128i odd;
          __m128i int0;
          __m128i int1;
          __m128i de0;
          __m128i de1;
          __m128i outv;

                    __m128i zero;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (zero = _mm_setzero_si128 ()) >>>>>;
                    __m128i farb;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (farb = _mm_loadl_epi64 ((const __m128i_u * {ref-all}) (in_far + (sizetype) i))) >>>>>;
                    __m128i nearb;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (nearb = _mm_loadl_epi64 ((const __m128i_u * {ref-all}) (in_near + (sizetype) i))) >>>>>;
                    __m128i farw;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (farw = _mm_unpacklo_epi8 (farb, zero)) >>>>>;
                    __m128i nearw;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (nearw = _mm_unpacklo_epi8 (nearb, zero)) >>>>>;
                    __m128i diff;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (diff = _mm_sub_epi16 (farw, nearw)) >>>>>;
                    __m128i nears;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (nears = _mm_slli_epi16 (nearw, 2)) >>>>>;
                    __m128i curr;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (curr = _mm_add_epi16 (nears, diff)) >>>>>;
                    __m128i prv0 = __builtin_ia32_pslldqi128 (NON_LVALUE_EXPR <curr>, 16);
                    __m128i nxt0 = __builtin_ia32_psrldqi128 (NON_LVALUE_EXPR <curr>, 16);
                    __m128i prev = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_vec_set_v8hi (VIEW_CONVERT_EXPR<__v8hi>(NON_LVALUE_EXPR <prv0>), (int) (short int) NON_LVALUE_EXPR <t1>, 0));
                    __m128i next = VIEW_CONVERT_EXPR<__m128i>(__builtin_ia32_vec_set_v8hi (VIEW_CONVERT_EXPR<__v8hi>(NON_LVALUE_EXPR <nxt0>), (int) (short int) ((unsigned short) *(in_near + ((sizetype) i + 8)) * 3 + (unsigned short) *(in_far + ((sizetype) i + 8))), 7));
                    __m128i bias;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bias = _mm_set1_epi16 (8)) >>>>>;
                    __m128i curs;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (curs = _mm_slli_epi16 (curr, 2)) >>>>>;
                    __m128i prvd;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (prvd = _mm_sub_epi16 (prev, curr)) >>>>>;
                    __m128i nxtd;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (nxtd = _mm_sub_epi16 (next, curr)) >>>>>;
                    __m128i curb;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (curb = _mm_add_epi16 (curs, bias)) >>>>>;
                    __m128i even;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (even = _mm_add_epi16 (prvd, curb)) >>>>>;
                    __m128i odd;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (odd = _mm_add_epi16 (nxtd, curb)) >>>>>;
                    __m128i int0;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (int0 = _mm_unpacklo_epi16 (even, odd)) >>>>>;
                    __m128i int1;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (int1 = _mm_unpackhi_epi16 (even, odd)) >>>>>;
                    __m128i de0;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (de0 = _mm_srli_epi16 (int0, 4)) >>>>>;
                    __m128i de1;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (de1 = _mm_srli_epi16 (int1, 4)) >>>>>;
                    __m128i outv;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (outv = _mm_packus_epi16 (de0, de1)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storeu_si128 ((__m128i * {ref-all}) (out + (sizetype) (i * 2)), outv) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (int) *(in_near + ((sizetype) i + 7)) * 3 + (int) *(in_far + ((sizetype) i + 7))) >>>>>;
        }
        <<cleanup_point (void) (i = i + 8)>>;
      }
    <D.11564>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = t1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (int) *(in_near + (sizetype) i) * 3 + (int) *(in_far + (sizetype) i)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) (i * 2)) = (stbi_uc) ((t1 * 3 + t0) + 8 >> 4)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++i >>>>>;
  while (1)
    {
      if (i >= w) goto <D.11566>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = t1) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = (int) *(in_near + (sizetype) i) * 3 + (int) *(in_far + (sizetype) i)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + ((sizetype) (i * 2) + 18446744073709551615)) = (stbi_uc) ((t0 * 3 + t1) + 8 >> 4)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) (i * 2)) = (stbi_uc) ((t1 * 3 + t0) + 8 >> 4)) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.11566>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + ((sizetype) (w * 2) + 18446744073709551615)) = (stbi_uc) (t1 + 2 >> 2)) >>>>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  return <retval> = out;
}


;; Function stbi_uc* stbi__resample_row_generic(stbi_uc*, stbi_uc*, stbi_uc*, int, int) (null)
;; enabled by -tree-original


{
  int i;
  int j;

    int i;
    int j;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i >= w) goto <D.11577>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
      while (1)
        {
          if (j >= hs) goto <D.11579>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) (i * hs + j)) = *(in_near + (sizetype) i)) >>>>>;
          <<cleanup_point (void)  ++j>>;
        }
      <D.11579>:;
      <<cleanup_point (void)  ++i>>;
    }
  <D.11577>:;
  return <retval> = out;
}


;; Function void stbi__YCbCr_to_RGB_row(stbi_uc*, const stbi_uc*, const stbi_uc*, const stbi_uc*, int, int) (null)
;; enabled by -tree-original


{
  int i;

    int i;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
    while (1)
      {
        if (i >= count) goto <D.11596>;
        {
          int y_fixed = ((int) *(y + (sizetype) i) << 20) + 524288;
          int r;
          int g;
          int b;
          int cr = (int) *(pcr + (sizetype) i) + -128;
          int cb = (int) *(pcb + (sizetype) i) + -128;

                    int y_fixed = ((int) *(y + (sizetype) i) << 20) + 524288;
                    int r;
                    int g;
                    int b;
                    int cr = (int) *(pcr + (sizetype) i) + -128;
                    int cb = (int) *(pcb + (sizetype) i) + -128;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = cr * 1470208 + y_fixed) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = (int) ((unsigned int) (cr * -748800 + y_fixed) + ((unsigned int) (cb * -360960) & 4294901760))) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = cb * 1858048 + y_fixed) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = r >> 20) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = g >> 20) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = b >> 20) >>>>>;
          if ((unsigned int) r > 255)
            {
              if (r < 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = 0) >>>>>;
                }
              else
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = 255) >>>>>;
                }
            }
          if ((unsigned int) g > 255)
            {
              if (g < 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = 0) >>>>>;
                }
              else
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = 255) >>>>>;
                }
            }
          if ((unsigned int) b > 255)
            {
              if (b < 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = 0) >>>>>;
                }
              else
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = 255) >>>>>;
                }
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = (stbi_uc) r) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = (stbi_uc) g) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 2) = (stbi_uc) b) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 3) = 255) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) step) >>>>>;
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.11596>:;
  }
}


;; Function void stbi__YCbCr_to_RGB_simd(stbi_uc*, const stbi_uc*, const stbi_uc*, const stbi_uc*, int, int) (null)
;; enabled by -tree-original


{
  int i = 0;

  <<cleanup_point   int i = 0;>>;
  {
    if (step == 4)
      {
        {
          __m128i signflip;
          __m128i cr_const0;
          __m128i cr_const1;
          __m128i cb_const0;
          __m128i cb_const1;
          __m128i y_bias;
          __m128i xw;

                    __m128i signflip;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (signflip = _mm_set1_epi8 (-128)) >>>>>;
                    __m128i cr_const0;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cr_const0 = _mm_set1_epi16 (5743)) >>>>>;
                    __m128i cr_const1;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cr_const1 = _mm_set1_epi16 (-2925)) >>>>>;
                    __m128i cb_const0;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cb_const0 = _mm_set1_epi16 (-1410)) >>>>>;
                    __m128i cb_const1;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cb_const1 = _mm_set1_epi16 (7258)) >>>>>;
                    __m128i y_bias;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y_bias = _mm_set1_epi8 (-128)) >>>>>;
                    __m128i xw;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (xw = _mm_set1_epi16 (255)) >>>>>;
          {
            while (1)
              {
                if (i + 7 >= count) goto <D.11646>;
                {
                  __m128i y_bytes;
                  __m128i cr_bytes;
                  __m128i cb_bytes;
                  __m128i cr_biased;
                  __m128i cb_biased;
                  __m128i yw;
                  __m128i crw;
                  __m128i cbw;
                  __m128i yws;
                  __m128i cr0;
                  __m128i cb0;
                  __m128i cb1;
                  __m128i cr1;
                  __m128i rws;
                  __m128i gwt;
                  __m128i bws;
                  __m128i gws;
                  __m128i rw;
                  __m128i bw;
                  __m128i gw;
                  __m128i brb;
                  __m128i gxb;
                  __m128i t0;
                  __m128i t1;
                  __m128i o0;
                  __m128i o1;

                                    __m128i y_bytes;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y_bytes = _mm_loadl_epi64 ((const __m128i_u * {ref-all}) (y + (sizetype) i))) >>>>>;
                                    __m128i cr_bytes;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cr_bytes = _mm_loadl_epi64 ((const __m128i_u * {ref-all}) (pcr + (sizetype) i))) >>>>>;
                                    __m128i cb_bytes;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cb_bytes = _mm_loadl_epi64 ((const __m128i_u * {ref-all}) (pcb + (sizetype) i))) >>>>>;
                                    __m128i cr_biased;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cr_biased = _mm_xor_si128 (cr_bytes, signflip)) >>>>>;
                                    __m128i cb_biased;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cb_biased = _mm_xor_si128 (cb_bytes, signflip)) >>>>>;
                                    __m128i yw;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (yw = _mm_unpacklo_epi8 (y_bias, y_bytes)) >>>>>;
                                    __m128i crw;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (crw = _mm_unpacklo_epi8 (_mm_setzero_si128 (), cr_biased)) >>>>>;
                                    __m128i cbw;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cbw = _mm_unpacklo_epi8 (_mm_setzero_si128 (), cb_biased)) >>>>>;
                                    __m128i yws;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (yws = _mm_srli_epi16 (yw, 4)) >>>>>;
                                    __m128i cr0;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cr0 = _mm_mulhi_epi16 (cr_const0, crw)) >>>>>;
                                    __m128i cb0;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cb0 = _mm_mulhi_epi16 (cb_const0, cbw)) >>>>>;
                                    __m128i cb1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cb1 = _mm_mulhi_epi16 (cbw, cb_const1)) >>>>>;
                                    __m128i cr1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cr1 = _mm_mulhi_epi16 (crw, cr_const1)) >>>>>;
                                    __m128i rws;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rws = _mm_add_epi16 (cr0, yws)) >>>>>;
                                    __m128i gwt;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (gwt = _mm_add_epi16 (cb0, yws)) >>>>>;
                                    __m128i bws;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bws = _mm_add_epi16 (yws, cb1)) >>>>>;
                                    __m128i gws;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (gws = _mm_add_epi16 (gwt, cr1)) >>>>>;
                                    __m128i rw;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rw = _mm_srai_epi16 (rws, 4)) >>>>>;
                                    __m128i bw;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bw = _mm_srai_epi16 (bws, 4)) >>>>>;
                                    __m128i gw;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (gw = _mm_srai_epi16 (gws, 4)) >>>>>;
                                    __m128i brb;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (brb = _mm_packus_epi16 (rw, bw)) >>>>>;
                                    __m128i gxb;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (gxb = _mm_packus_epi16 (gw, xw)) >>>>>;
                                    __m128i t0;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t0 = _mm_unpacklo_epi8 (brb, gxb)) >>>>>;
                                    __m128i t1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t1 = _mm_unpackhi_epi8 (brb, gxb)) >>>>>;
                                    __m128i o0;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (o0 = _mm_unpacklo_epi16 (t0, t1)) >>>>>;
                                    __m128i o1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (o1 = _mm_unpackhi_epi16 (t0, t1)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storeu_si128 ((__m128i * {ref-all}) NON_LVALUE_EXPR <out>, o0) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  _mm_storeu_si128 ((__m128i * {ref-all}) (out + 16), o1) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + 32) >>>>>;
                }
                <<cleanup_point (void) (i = i + 8)>>;
              }
            <D.11646>:;
          }
        }
      }
  }
  {
    while (1)
      {
        if (i >= count) goto <D.11648>;
        {
          int y_fixed = ((int) *(y + (sizetype) i) << 20) + 524288;
          int r;
          int g;
          int b;
          int cr = (int) *(pcr + (sizetype) i) + -128;
          int cb = (int) *(pcb + (sizetype) i) + -128;

                    int y_fixed = ((int) *(y + (sizetype) i) << 20) + 524288;
                    int r;
                    int g;
                    int b;
                    int cr = (int) *(pcr + (sizetype) i) + -128;
                    int cb = (int) *(pcb + (sizetype) i) + -128;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = cr * 1470208 + y_fixed) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = (int) ((unsigned int) (cr * -748800 + y_fixed) + ((unsigned int) (cb * -360960) & 4294901760))) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = cb * 1858048 + y_fixed) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = r >> 20) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = g >> 20) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = b >> 20) >>>>>;
          if ((unsigned int) r > 255)
            {
              if (r < 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = 0) >>>>>;
                }
              else
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = 255) >>>>>;
                }
            }
          if ((unsigned int) g > 255)
            {
              if (g < 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = 0) >>>>>;
                }
              else
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = 255) >>>>>;
                }
            }
          if ((unsigned int) b > 255)
            {
              if (b < 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = 0) >>>>>;
                }
              else
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = 255) >>>>>;
                }
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = (stbi_uc) r) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = (stbi_uc) g) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 2) = (stbi_uc) b) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 3) = 255) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) step) >>>>>;
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.11648>:;
  }
}


;; Function void stbi__setup_jpeg(stbi__jpeg*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->idct_block_kernel = stbi__idct_block) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->YCbCr_to_RGB_kernel = stbi__YCbCr_to_RGB_row) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->resample_row_hv_2_kernel = stbi__resample_row_hv_2) >>>>>;
if (<<cleanup_point stbi__sse2_available () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->idct_block_kernel = stbi__idct_simd) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->YCbCr_to_RGB_kernel = stbi__YCbCr_to_RGB_simd) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->resample_row_hv_2_kernel = stbi__resample_row_hv_2_simd) >>>>>;
  }


;; Function void stbi__cleanup_jpeg(stbi__jpeg*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__free_jpeg_components (j, j->s->img_n, 0) >>>>>;


;; Function stbi_uc stbi__blinn_8x8(stbi_uc, stbi_uc) (null)
;; enabled by -tree-original


{
  unsigned int t = (unsigned int) ((int) x * (int) y + 128);

    unsigned int t = (unsigned int) ((int) x * (int) y + 128);
  return <retval> = (stbi_uc) ((t >> 8) + t >> 8);
}


;; Function stbi_uc* load_jpeg_image(stbi__jpeg*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  int n;
  int decode_n;
  int is_rgb;

    int n;
    int decode_n;
    int is_rgb;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->s->img_n = 0) >>>>>;
  if (req_comp < 0 || req_comp > 4)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad req_comp");, 0B>>;
    }
  if (<<cleanup_point stbi__decode_jpeg_image (z) == 0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__cleanup_jpeg (z) >>>>>;
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = req_comp == 0 ? z->s->img_n > 2 ? 3 : 1 : req_comp) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (is_rgb = (int) (z->s->img_n == 3 && (z->rgb == 3 || z->app14_color_transform == 0 && z->jfif == 0))) >>>>>;
  if ((z->s->img_n == 3 && n <= 2) && is_rgb == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (decode_n = 1) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (decode_n = z->s->img_n) >>>>>;
    }
  {
    int k;
    unsigned int i;
    unsigned int j;
    stbi_uc * output;
    stbi_uc * coutput[4] = {0B, 0B, 0B, 0B};
    struct stbi__resample res_comp[4];

        int k;
        unsigned int i;
        unsigned int j;
        stbi_uc * output;
    <<cleanup_point     stbi_uc * coutput[4] = {0B, 0B, 0B, 0B};>>;
        struct stbi__resample res_comp[4];
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
      while (1)
        {
          if (k >= decode_n) goto <D.11733>;
          {
            struct stbi__resample * r = &res_comp[k];

                        struct stbi__resample * r = &res_comp[k];
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->img_comp[k].linebuf = (stbi_uc *) stbi__malloc ((size_t) (z->s->img_x + 3))) >>>>>;
            if (z->img_comp[k].linebuf == 0B)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__cleanup_jpeg (z) >>>>>;
                <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
              }
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->hs = z->img_h_max / z->img_comp[k].h) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->vs = z->img_v_max / z->img_comp[k].v) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->ystep = r->vs >> 1) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->w_lores = (int) (((z->s->img_x + (stbi__uint32) r->hs) + 4294967295) / (stbi__uint32) r->hs)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->ypos = 0) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->line0 = r->line1 = z->img_comp[k].data) >>>>>;
            if (r->hs == 1 && r->vs == 1)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->resample = resample_row_1) >>>>>;
              }
            else
              {
                if (r->hs == 1 && r->vs == 2)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->resample = stbi__resample_row_v_2) >>>>>;
                  }
                else
                  {
                    if (r->hs == 2 && r->vs == 1)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->resample = stbi__resample_row_h_2) >>>>>;
                      }
                    else
                      {
                        if (r->hs == 2 && r->vs == 2)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->resample = z->resample_row_hv_2_kernel) >>>>>;
                          }
                        else
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->resample = stbi__resample_row_generic) >>>>>;
                          }
                      }
                  }
              }
          }
          <<cleanup_point (void)  ++k>>;
        }
      <D.11733>:;
    }
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (output = (stbi_uc *) stbi__malloc_mad3 (n, (int) z->s->img_x, (int) z->s->img_y, 1)) >>>>>;
    if (output == 0B)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__cleanup_jpeg (z) >>>>>;
        <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
      }
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
      while (1)
        {
          if (z->s->img_y <= j) goto <D.11735>;
          {
            stbi_uc * out = output + (sizetype) ((z->s->img_x * (stbi__uint32) n) * j);

                        stbi_uc * out = output + (sizetype) ((z->s->img_x * (stbi__uint32) n) * j);
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
              while (1)
                {
                  if (k >= decode_n) goto <D.11737>;
                  {
                    struct stbi__resample * r = &res_comp[k];
                    int y_bot = r->ystep >= r->vs >> 1;

                                        struct stbi__resample * r = &res_comp[k];
                                        int y_bot = r->ystep >= r->vs >> 1;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (coutput[k] = r->resample (z->img_comp[k].linebuf, y_bot != 0 ? r->line1 : r->line0, y_bot != 0 ? r->line0 : r->line1, r->w_lores, r->hs)) >>>>>;
                    if (<<cleanup_point  ++r->ystep >= r->vs>>)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->ystep = 0) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->line0 = r->line1) >>>>>;
                        if (<<cleanup_point  ++r->ypos < z->img_comp[k].y>>)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r->line1 = r->line1 + (sizetype) z->img_comp[k].w2) >>>>>;
                          }
                      }
                  }
                  <<cleanup_point (void)  ++k>>;
                }
              <D.11737>:;
            }
            {
              if (n > 2)
                {
                  {
                    stbi_uc * y = coutput[0];

                                        stbi_uc * y = coutput[0];
                    {
                      if (z->s->img_n == 3)
                        {
                          if (is_rgb != 0)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                              while (1)
                                {
                                  if (z->s->img_x <= i) goto <D.11739>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = *(y + (sizetype) i)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = *(coutput[1] + (sizetype) i)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 2) = *(coutput[2] + (sizetype) i)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 3) = 255) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) n) >>>>>;
                                  <<cleanup_point (void)  ++i>>;
                                }
                              <D.11739>:;
                            }
                          else
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  z->YCbCr_to_RGB_kernel (out, (const stbi_uc *) y, (const stbi_uc *) coutput[1], (const stbi_uc *) coutput[2], (int) z->s->img_x, n) >>>>>;
                            }
                        }
                      else
                        {
                          {
                            {
                              if (z->s->img_n == 4)
                                {
                                  {
                                    {
                                      if (z->app14_color_transform == 0)
                                        {
                                          {
                                            {
                                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                              while (1)
                                                {
                                                  if (z->s->img_x <= i) goto <D.11741>;
                                                  {
                                                    stbi_uc m = *(coutput[3] + (sizetype) i);

                                                                                                        stbi_uc m = *(coutput[3] + (sizetype) i);
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = stbi__blinn_8x8 ((int) *(coutput[0] + (sizetype) i), (int) m)) >>>>>;
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = stbi__blinn_8x8 ((int) *(coutput[1] + (sizetype) i), (int) m)) >>>>>;
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 2) = stbi__blinn_8x8 ((int) *(coutput[2] + (sizetype) i), (int) m)) >>>>>;
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 3) = 255) >>>>>;
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) n) >>>>>;
                                                  }
                                                  <<cleanup_point (void)  ++i>>;
                                                }
                                              <D.11741>:;
                                            }
                                          }
                                        }
                                      else
                                        {
                                          {
                                            {
                                              if (z->app14_color_transform == 2)
                                                {
                                                  {
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  z->YCbCr_to_RGB_kernel (out, (const stbi_uc *) y, (const stbi_uc *) coutput[1], (const stbi_uc *) coutput[2], (int) z->s->img_x, n) >>>>>;
                                                    {
                                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                                      while (1)
                                                        {
                                                          if (z->s->img_x <= i) goto <D.11743>;
                                                          {
                                                            stbi_uc m = *(coutput[3] + (sizetype) i);

                                                                                                                        stbi_uc m = *(coutput[3] + (sizetype) i);
                                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = stbi__blinn_8x8 ((int) ~*NON_LVALUE_EXPR <out>, (int) m)) >>>>>;
                                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = stbi__blinn_8x8 ((int) ~*(out + 1), (int) m)) >>>>>;
                                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 2) = stbi__blinn_8x8 ((int) ~*(out + 2), (int) m)) >>>>>;
                                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) n) >>>>>;
                                                          }
                                                          <<cleanup_point (void)  ++i>>;
                                                        }
                                                      <D.11743>:;
                                                    }
                                                  }
                                                }
                                              else
                                                {
                                                  <<cleanup_point <<< Unknown tree: expr_stmt
  z->YCbCr_to_RGB_kernel (out, (const stbi_uc *) y, (const stbi_uc *) coutput[1], (const stbi_uc *) coutput[2], (int) z->s->img_x, n) >>>>>;
                                                }
                                            }
                                          }
                                        }
                                    }
                                  }
                                }
                              else
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                  while (1)
                                    {
                                      if (z->s->img_x <= i) goto <D.11745>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = *(out + 1) = *(out + 2) = *(y + (sizetype) i)) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 3) = 255) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) n) >>>>>;
                                      <<cleanup_point (void)  ++i>>;
                                    }
                                  <D.11745>:;
                                }
                            }
                          }
                        }
                    }
                  }
                }
              else
                {
                  {
                    {
                      if (is_rgb != 0)
                        {
                          if (n == 1)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                              while (1)
                                {
                                  if (z->s->img_x <= i) goto <D.11747>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*out++  = stbi__compute_y ((int) *(coutput[0] + (sizetype) i), (int) *(coutput[1] + (sizetype) i), (int) *(coutput[2] + (sizetype) i))) >>>>>;
                                  <<cleanup_point (void)  ++i>>;
                                }
                              <D.11747>:;
                            }
                          else
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                              while (1)
                                {
                                  if (z->s->img_x <= i) goto <D.11749>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = stbi__compute_y ((int) *(coutput[0] + (sizetype) i), (int) *(coutput[1] + (sizetype) i), (int) *(coutput[2] + (sizetype) i))) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = 255) >>>>>;
                                  <<cleanup_point (void)  ++i;, (void) (out = out + 2);>>;
                                }
                              <D.11749>:;
                            }
                        }
                      else
                        {
                          {
                            {
                              if (z->s->img_n == 4 && z->app14_color_transform == 0)
                                {
                                  {
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                      while (1)
                                        {
                                          if (z->s->img_x <= i) goto <D.11751>;
                                          {
                                            stbi_uc m = *(coutput[3] + (sizetype) i);
                                            stbi_uc r;
                                            stbi_uc g;
                                            stbi_uc b;

                                                                                        stbi_uc m = *(coutput[3] + (sizetype) i);
                                                                                        stbi_uc r;
                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__blinn_8x8 ((int) *(coutput[0] + (sizetype) i), (int) m)) >>>>>;
                                                                                        stbi_uc g;
                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = stbi__blinn_8x8 ((int) *(coutput[1] + (sizetype) i), (int) m)) >>>>>;
                                                                                        stbi_uc b;
                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = stbi__blinn_8x8 ((int) *(coutput[2] + (sizetype) i), (int) m)) >>>>>;
                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = stbi__compute_y ((int) r, (int) g, (int) b)) >>>>>;
                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = 255) >>>>>;
                                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) n) >>>>>;
                                          }
                                          <<cleanup_point (void)  ++i>>;
                                        }
                                      <D.11751>:;
                                    }
                                  }
                                }
                              else
                                {
                                  {
                                    {
                                      if (z->s->img_n == 4 && z->app14_color_transform == 2)
                                        {
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                          while (1)
                                            {
                                              if (z->s->img_x <= i) goto <D.11753>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = stbi__blinn_8x8 ((int) ~*(coutput[0] + (sizetype) i), (int) *(coutput[3] + (sizetype) i))) >>>>>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = 255) >>>>>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = out + (sizetype) n) >>>>>;
                                              <<cleanup_point (void)  ++i>>;
                                            }
                                          <D.11753>:;
                                        }
                                      else
                                        {
                                          {
                                            stbi_uc * y = coutput[0];

                                                                                        stbi_uc * y = coutput[0];
                                            if (n == 1)
                                              {
                                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                                while (1)
                                                  {
                                                    if (z->s->img_x <= i) goto <D.11755>;
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) i) = *(y + (sizetype) i)) >>>>>;
                                                    <<cleanup_point (void)  ++i>>;
                                                  }
                                                <D.11755>:;
                                              }
                                            else
                                              {
                                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                                while (1)
                                                  {
                                                    if (z->s->img_x <= i) goto <D.11757>;
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*out++  = *(y + (sizetype) i)) >>>>>;
                                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*out++  = 255) >>>>>;
                                                    <<cleanup_point (void)  ++i>>;
                                                  }
                                                <D.11757>:;
                                              }
                                          }
                                        }
                                    }
                                  }
                                }
                            }
                          }
                        }
                    }
                  }
                }
            }
          }
          <<cleanup_point (void)  ++j>>;
        }
      <D.11735>:;
    }
    <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__cleanup_jpeg (z) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*out_x = (int) z->s->img_x) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*out_y = (int) z->s->img_y) >>>>>;
    if (comp != 0B)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = z->s->img_n > 2 ? 3 : 1) >>>>>;
      }
    return <retval> = output;
  }
}


;; Function void* stbi__jpeg_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) (null)
;; enabled by -tree-original


{
  unsigned char * result;
  struct stbi__jpeg * j;

    unsigned char * result;
    struct stbi__jpeg * j;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = (struct stbi__jpeg *) stbi__malloc (18568)) >>>>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->s = s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__setup_jpeg (j) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = load_jpeg_image (j, x, y, comp, req_comp)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) j) >>>>>;
  return <retval> = (void *) result;
}


;; Function int stbi__jpeg_test(stbi__context*) (null)
;; enabled by -tree-original


{
  int r;
  struct stbi__jpeg * j;

    int r;
    struct stbi__jpeg * j;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = (struct stbi__jpeg *) stbi__malloc (18568)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->s = s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__setup_jpeg (j) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__decode_jpeg_header (j, 1)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) j) >>>>>;
  return <retval> = r;
}


;; Function int stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*) (null)
;; enabled by -tree-original


if (<<cleanup_point stbi__decode_jpeg_header (j, 2) == 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (j->s) >>>>>;
    return <retval> = 0;
  }
if (x != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = (int) j->s->img_x) >>>>>;
  }
if (y != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = (int) j->s->img_y) >>>>>;
  }
if (comp != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = j->s->img_n > 2 ? 3 : 1) >>>>>;
  }
return <retval> = 1;


;; Function int stbi__jpeg_info(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  int result;
  struct stbi__jpeg * j;

    int result;
    struct stbi__jpeg * j;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = (struct stbi__jpeg *) stbi__malloc (18568)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j->s = s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi__jpeg_info_raw (j, x, y, comp)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) j) >>>>>;
  return <retval> = result;
}


;; Function int stbi__bitreverse16(int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n >> 1 & 21845 | n << 1 & 43690) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n >> 2 & 13107 | n << 2 & 52428) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n >> 4 & 3855 | n << 4 & 61680) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n >> 8 & 255 | n << 8 & 65535) >>>>>;
return <retval> = n;


;; Function int stbi__bit_reverse(int, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bits <= 16 || (_assert ((const char *) "bits <= 16", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 4007);, 0)) >>>>>;
<<cleanup_point return <retval> = stbi__bitreverse16 (v) >> 16 - bits>>;


;; Function int stbi__zbuild_huffman(stbi__zhuffman*, const stbi_uc*, int) (null)
;; enabled by -tree-original


{
  int i;
  int k = 0;
  int code;
  int next_code[16];
  int sizes[17];

    int i;
  <<cleanup_point   int k = 0;>>;
    int code;
    int next_code[16];
    int sizes[17];
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) &sizes, 0, 68) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) &z->fast, 0, 1024) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i >= num) goto <D.11818>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++sizes[(int) *(sizelist + (sizetype) i)] >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.11818>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sizes[0] = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 1) >>>>>;
  while (1)
    {
      if (i > 15) goto <D.11820>;
      if (sizes[i] > 1 << i)
        {
          <<cleanup_point return <retval> = stbi__err ((const char *) "bad sizes")>>;
        }
      <<cleanup_point (void)  ++i>>;
    }
  <D.11820>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (code = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 1) >>>>>;
  while (1)
    {
      if (i > 15) goto <D.11822>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (next_code[i] = code) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->firstcode[i] = (stbi__uint16) code) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->firstsymbol[i] = (stbi__uint16) k) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (code = sizes[i] + code) >>>>>;
      if (sizes[i] != 0)
        {
          if (1 << i < NON_LVALUE_EXPR <code>)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad codelengths")>>;
            }
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->maxcode[i] = code << 16 - i) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (code = code << 1) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = sizes[i] + k) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.11822>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->maxcode[16] = 65536) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
    while (1)
      {
        if (i >= num) goto <D.11824>;
        {
          int s = (int) *(sizelist + (sizetype) i);

                    int s = (int) *(sizelist + (sizetype) i);
          {
            if (s != 0)
              {
                {
                  int c = (next_code[s] - (int) z->firstcode[s]) + (int) z->firstsymbol[s];
                  stbi__uint16 fastv = (stbi__uint16) ((signed short) (s << 9) | (signed short) i);

                                    int c = (next_code[s] - (int) z->firstcode[s]) + (int) z->firstsymbol[s];
                                    stbi__uint16 fastv = (stbi__uint16) ((signed short) (s << 9) | (signed short) i);
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->size[c] = (stbi_uc) s) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->value[c] = (stbi__uint16) i) >>>>>;
                  {
                    if (s <= 9)
                      {
                        {
                          int j;

                                                    int j;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = stbi__bit_reverse (next_code[s], s)) >>>>>;
                          while (1)
                            {
                              if (j > 511) goto <D.11826>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->fast[j] = fastv) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = (1 << s) + j) >>>>>;
                            }
                          <D.11826>:;
                        }
                      }
                  }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++next_code[s] >>>>>;
                }
              }
          }
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.11824>:;
  }
  return <retval> = 1;
}


;; Function int stbi__zeof(stbi__zbuf*) (null)
;; enabled by -tree-original


return <retval> = z->zbuffer >= z->zbuffer_end;


;; Function stbi_uc stbi__zget8(stbi__zbuf*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = stbi__zeof (z) == 0 ? *z->zbuffer++  : 0>>;


;; Function void stbi__fill_bits(stbi__zbuf*) (null)
;; enabled by -tree-original


while (1)
  {
    if (z->code_buffer >> z->num_bits != 0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->zbuffer = z->zbuffer_end) >>>>>;
        return;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->code_buffer = TARGET_EXPR <D.11850, (unsigned int) stbi__zget8 (z) << z->num_bits>;, z->code_buffer | D.11850;) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->num_bits = z->num_bits + 8) >>>>>;
    if (z->num_bits > 24) goto <D.11851>;
  }
<D.11851>:;


;; Function unsigned int stbi__zreceive(stbi__zbuf*, int) (null)
;; enabled by -tree-original


{
  unsigned int k;

    unsigned int k;
  if (z->num_bits < n)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__fill_bits (z) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = z->code_buffer & (stbi__uint32) ((1 << n) + -1)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->code_buffer = z->code_buffer >> n) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->num_bits = z->num_bits - n) >>>>>;
  return <retval> = k;
}


;; Function int stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*) (null)
;; enabled by -tree-original


{
  int b;
  int s;
  int k;

    int b;
    int s;
    int k;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = stbi__bit_reverse ((int) a->code_buffer, 16)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = 10) >>>>>;
  while (1)
    {
      if (z->maxcode[s] > k) goto <D.11865>;
      <<cleanup_point (void)  ++s>>;
    }
  <D.11865>:;
  if (s > 15)
    {
      return <retval> = -1;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = ((k >> 16 - s) - (int) z->firstcode[s]) + (int) z->firstsymbol[s]) >>>>>;
  if ((long long unsigned int) b > 287)
    {
      return <retval> = -1;
    }
  if ((int) z->size[b] != s)
    {
      return <retval> = -1;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->code_buffer = a->code_buffer >> s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->num_bits = a->num_bits - s) >>>>>;
  return <retval> = (int) z->value[b];
}


;; Function int stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*) (null)
;; enabled by -tree-original


{
  int b;
  int s;

    int b;
    int s;
  if (a->num_bits <= 15)
    {
      if (<<cleanup_point stbi__zeof (a) != 0>>)
        {
          return <retval> = -1;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__fill_bits (a) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (b = (int) z->fast[a->code_buffer & 511]) >>>>>;
  if (b != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = b >> 9) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->code_buffer = a->code_buffer >> s) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->num_bits = a->num_bits - s) >>>>>;
      return <retval> = b & 511;
    }
  <<cleanup_point return <retval> = stbi__zhuffman_decode_slowpath (a, z)>>;
}


;; Function int stbi__zexpand(stbi__zbuf*, char*, int) (null)
;; enabled by -tree-original


{
  char * q;
  unsigned int cur;
  unsigned int limit;
  unsigned int old_limit;

    char * q;
    unsigned int cur;
    unsigned int limit;
    unsigned int old_limit;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->zout = zout) >>>>>;
  if (z->z_expandable == 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "output buffer limit")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cur = (unsigned int) (z->zout - z->zout_start)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (limit = old_limit = (unsigned int) (z->zout_end - z->zout_start)) >>>>>;
  if (~cur < (unsigned int) n)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem")>>;
    }
  while (1)
    {
      if (cur + (unsigned int) n <= limit) goto <D.11882>;
      if ((signed int) limit < 0)
        {
          <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem")>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (limit = limit * 2) >>>>>;
    }
  <D.11882>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (q = (char *) realloc ((void *) z->zout_start, (size_t) limit)) >>>>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  if (q == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->zout_start = q) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->zout = q + (sizetype) cur) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->zout_end = q + (sizetype) limit) >>>>>;
  return <retval> = 1;
}


;; Function int stbi__parse_huffman_block(stbi__zbuf*) (null)
;; enabled by -tree-original


{
  char * zout = a->zout;

    char * zout = a->zout;
  {
    while (1)
      {
        {
          int z;

                    int z;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = stbi__zhuffman_decode (a, &a->z_length)) >>>>>;
          {
            if (z <= 255)
              {
                if (z < 0)
                  {
                    <<cleanup_point return <retval> = stbi__err ((const char *) "bad huffman code")>>;
                  }
                if (a->zout_end <= zout)
                  {
                    if (<<cleanup_point stbi__zexpand (a, zout, 1) == 0>>)
                      {
                        return <retval> = 0;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (zout = a->zout) >>>>>;
                  }
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*zout++  = (char) z) >>>>>;
              }
            else
              {
                {
                  stbi_uc * p;
                  int len;
                  int dist;

                                    stbi_uc * p;
                                    int len;
                                    int dist;
                  if (z == 256)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->zout = zout) >>>>>;
                      return <retval> = 1;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = z + -257) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = (int) stbi__zlength_base[z]) >>>>>;
                  if (stbi__zlength_extra[z] != 0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = TARGET_EXPR <D.11896, stbi__zreceive (a, (int) stbi__zlength_extra[z])>;, (int) ((unsigned int) len + D.11896);) >>>>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = stbi__zhuffman_decode (a, &a->z_distance)) >>>>>;
                  if (z < 0)
                    {
                      <<cleanup_point return <retval> = stbi__err ((const char *) "bad huffman code")>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dist = (int) stbi__zdist_base[z]) >>>>>;
                  if (stbi__zdist_extra[z] != 0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dist = TARGET_EXPR <D.11897, stbi__zreceive (a, (int) stbi__zdist_extra[z])>;, (int) ((unsigned int) dist + D.11897);) >>>>>;
                    }
                  if (zout - a->zout_start < (long long int) dist)
                    {
                      <<cleanup_point return <retval> = stbi__err ((const char *) "bad dist")>>;
                    }
                  if (zout + (sizetype) len > a->zout_end)
                    {
                      if (<<cleanup_point stbi__zexpand (a, zout, len) == 0>>)
                        {
                          return <retval> = 0;
                        }
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (zout = a->zout) >>>>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = (stbi_uc *) (zout + -(sizetype) dist)) >>>>>;
                  {
                    if (dist == 1)
                      {
                        {
                          stbi_uc v = *p;

                                                    stbi_uc v = *p;
                          if (len != 0)
                            {
                              while (1)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*zout++  = (char) v) >>>>>;
                                  if (<<cleanup_point  --len != 0>>) (void) 0; else goto <D.11901>;
                                }
                              <D.11901>:;
                            }
                        }
                      }
                    else
                      {
                        if (len != 0)
                          {
                            while (1)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*zout++  = (char) *p++ ) >>>>>;
                                if (<<cleanup_point  --len != 0>>) (void) 0; else goto <D.11903>;
                              }
                            <D.11903>:;
                          }
                      }
                  }
                }
              }
          }
        }
      }
  }
}


;; Function int stbi__compute_huffman_codes(stbi__zbuf*) (null)
;; enabled by -tree-original


{
  static const stbi_uc length_dezigzag[19] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
  struct stbi__zhuffman z_codelength;
  stbi_uc lencodes[455];
  stbi_uc codelength_sizes[19];
  int i;
  int n;
  int hlit;
  int hdist;
  int hclen;
  int ntot = hlit + hdist;

  <<cleanup_point   static const stbi_uc length_dezigzag[19] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};>>;
    struct stbi__zhuffman z_codelength;
    stbi_uc lencodes[455];
    stbi_uc codelength_sizes[19];
    int i;
    int n;
    int hlit;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (hlit = (int) (stbi__zreceive (a, 5) + 257)) >>>>>;
    int hdist;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (hdist = (int) (stbi__zreceive (a, 5) + 1)) >>>>>;
    int hclen;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (hclen = (int) (stbi__zreceive (a, 4) + 4)) >>>>>;
    int ntot = hlit + hdist;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) &codelength_sizes, 0, 19) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
    while (1)
      {
        if (i >= hclen) goto <D.11954>;
        {
          int s;

                    int s;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s = (int) stbi__zreceive (a, 3)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (codelength_sizes[(int) length_dezigzag[i]] = (stbi_uc) s) >>>>>;
        }
        <<cleanup_point (void)  ++i>>;
      }
    <D.11954>:;
  }
  if (<<cleanup_point stbi__zbuild_huffman (&z_codelength, (const stbi_uc *) &codelength_sizes, 19) == 0>>)
    {
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = 0) >>>>>;
  while (1)
    {
      if (n >= ntot) goto <D.11956>;
      {
        int c;

                int c;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = stbi__zhuffman_decode (a, &z_codelength)) >>>>>;
        if (c < 0 || c > 18)
          {
            <<cleanup_point return <retval> = stbi__err ((const char *) "bad codelengths")>>;
          }
        {
          if (c <= 15)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (lencodes[n++ ] = (stbi_uc) c) >>>>>;
            }
          else
            {
              {
                stbi_uc fill = 0;

                <<cleanup_point                 stbi_uc fill = 0;>>;
                if (c == 16)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) (stbi__zreceive (a, 2) + 3)) >>>>>;
                    if (n == 0)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "bad codelengths")>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (fill = lencodes[n + -1]) >>>>>;
                  }
                else
                  {
                    if (c == 17)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) (stbi__zreceive (a, 3) + 3)) >>>>>;
                      }
                    else
                      {
                        if (c == 18)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (int) (stbi__zreceive (a, 7) + 11)) >>>>>;
                          }
                        else
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "bad codelengths")>>;
                          }
                      }
                  }
                if (ntot - n < c)
                  {
                    <<cleanup_point return <retval> = stbi__err ((const char *) "bad codelengths")>>;
                  }
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) &lencodes + (sizetype) n, (int) fill, (size_t) c) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n + c) >>>>>;
              }
            }
        }
      }
    }
  <D.11956>:;
  if (n != ntot)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad codelengths")>>;
    }
  if (<<cleanup_point stbi__zbuild_huffman (&a->z_length, (const stbi_uc *) &lencodes, hlit) == 0>>)
    {
      return <retval> = 0;
    }
  if (<<cleanup_point stbi__zbuild_huffman (&a->z_distance, (const stbi_uc *) &lencodes + (sizetype) hlit, hdist) == 0>>)
    {
      return <retval> = 0;
    }
  return <retval> = 1;
}


;; Function int stbi__parse_uncompressed_block(stbi__zbuf*) (null)
;; enabled by -tree-original


{
  stbi_uc header[4];
  int len;
  int nlen;
  int k;

    stbi_uc header[4];
    int len;
    int nlen;
    int k;
  if ((a->num_bits & 7) != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__zreceive (a, a->num_bits & 7) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
  while (1)
    {
      if (a->num_bits <= 0) goto <D.11965>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (header[k++ ] = (stbi_uc) a->code_buffer) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->code_buffer = a->code_buffer >> 8) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->num_bits = a->num_bits + -8) >>>>>;
    }
  <D.11965>:;
  if (a->num_bits < 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "zlib corrupt")>>;
    }
  while (1)
    {
      if (k > 3) goto <D.11967>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (header[k++ ] = stbi__zget8 (a)) >>>>>;
    }
  <D.11967>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = (int) header[1] * 256 + (int) header[0]) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (nlen = (int) header[3] * 256 + (int) header[2]) >>>>>;
  if ((len ^ 65535) != nlen)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "zlib corrupt")>>;
    }
  if (a->zbuffer + (sizetype) len > a->zbuffer_end)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "read past buffer")>>;
    }
  if (a->zout + (sizetype) len > a->zout_end)
    {
      if (<<cleanup_point stbi__zexpand (a, a->zout, len) == 0>>)
        {
          return <retval> = 0;
        }
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) a->zout, (const void *) a->zbuffer, (size_t) len) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->zbuffer = a->zbuffer + (sizetype) len) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->zout = a->zout + (sizetype) len) >>>>>;
  return <retval> = 1;
}


;; Function int stbi__parse_zlib_header(stbi__zbuf*) (null)
;; enabled by -tree-original


{
  int cmf;
  int cm = cmf & 15;
  int flg;

    int cmf;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cmf = (int) stbi__zget8 (a)) >>>>>;
    int cm = cmf & 15;
    int flg;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (flg = (int) stbi__zget8 (a)) >>>>>;
  if (<<cleanup_point stbi__zeof (a) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad zlib header")>>;
    }
  if ((cmf * 256 + flg) % 31 != 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad zlib header")>>;
    }
  if ((flg & 32) != 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "no preset dict")>>;
    }
  if (cm != 8)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad compression")>>;
    }
  return <retval> = 1;
}


;; Function int stbi__parse_zlib(stbi__zbuf*, int) (null)
;; enabled by -tree-original


{
  int final;
  int type;

    int final;
    int type;
  if (parse_header != 0)
    {
      if (<<cleanup_point stbi__parse_zlib_header (a) == 0>>)
        {
          return <retval> = 0;
        }
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->num_bits = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->code_buffer = 0) >>>>>;
  while (1)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (final = (int) stbi__zreceive (a, 1)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (type = (int) stbi__zreceive (a, 2)) >>>>>;
      if (type == 0)
        {
          if (<<cleanup_point stbi__parse_uncompressed_block (a) == 0>>)
            {
              return <retval> = 0;
            }
        }
      else
        {
          if (type == 3)
            {
              return <retval> = 0;
            }
          else
            {
              if (type == 1)
                {
                  if (<<cleanup_point stbi__zbuild_huffman (&a->z_length, (const stbi_uc *) &stbi__zdefault_length, 288) == 0>>)
                    {
                      return <retval> = 0;
                    }
                  if (<<cleanup_point stbi__zbuild_huffman (&a->z_distance, (const stbi_uc *) &stbi__zdefault_distance, 32) == 0>>)
                    {
                      return <retval> = 0;
                    }
                }
              else
                {
                  if (<<cleanup_point stbi__compute_huffman_codes (a) == 0>>)
                    {
                      return <retval> = 0;
                    }
                }
              if (<<cleanup_point stbi__parse_huffman_block (a) == 0>>)
                {
                  return <retval> = 0;
                }
            }
        }
      if (final != 0) goto <D.11983>;
    }
  <D.11983>:;
  return <retval> = 1;
}


;; Function int stbi__do_zlib(stbi__zbuf*, char*, int, int, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->zout_start = obuf) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->zout = obuf) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->zout_end = obuf + (sizetype) olen) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->z_expandable = exp) >>>>>;
<<cleanup_point return <retval> = stbi__parse_zlib (a, parse_header)>>;


;; Function char* stbi_zlib_decode_malloc_guesssize(const char*, int, int, int*) (null)
;; enabled by -tree-original


{
  struct stbi__zbuf a;
  char * p;

    struct stbi__zbuf a;
    char * p;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = (char *) stbi__malloc ((size_t) initial_size)) >>>>>;
  if (p == 0B)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer = (stbi_uc *) buffer) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer_end = (stbi_uc *) buffer + (sizetype) len) >>>>>;
  if (<<cleanup_point stbi__do_zlib (&a, p, initial_size, 1, 1) != 0>>)
    {
      if (outlen != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*outlen = (int) (a.zout - a.zout_start)) >>>>>;
        }
      return <retval> = a.zout_start;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) a.zout_start) >>>>>;
      return <retval> = 0B;
    }
}


;; Function char* stbi_zlib_decode_malloc(const char*, int, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = stbi_zlib_decode_malloc_guesssize (buffer, len, 16384, outlen)>>;


;; Function char* stbi_zlib_decode_malloc_guesssize_headerflag(const char*, int, int, int*, int) (null)
;; enabled by -tree-original


{
  struct stbi__zbuf a;
  char * p;

    struct stbi__zbuf a;
    char * p;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = (char *) stbi__malloc ((size_t) initial_size)) >>>>>;
  if (p == 0B)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer = (stbi_uc *) buffer) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer_end = (stbi_uc *) buffer + (sizetype) len) >>>>>;
  if (<<cleanup_point stbi__do_zlib (&a, p, initial_size, 1, parse_header) != 0>>)
    {
      if (outlen != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*outlen = (int) (a.zout - a.zout_start)) >>>>>;
        }
      return <retval> = a.zout_start;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) a.zout_start) >>>>>;
      return <retval> = 0B;
    }
}


;; Function int stbi_zlib_decode_buffer(char*, int, const char*, int) (null)
;; enabled by -tree-original


{
  struct stbi__zbuf a;

    struct stbi__zbuf a;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer = (stbi_uc *) ibuffer) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer_end = (stbi_uc *) ibuffer + (sizetype) ilen) >>>>>;
  if (<<cleanup_point stbi__do_zlib (&a, obuffer, olen, 0, 1) != 0>>)
    {
      return <retval> = (int) (a.zout - a.zout_start);
    }
  else
    {
      return <retval> = -1;
    }
}


;; Function char* stbi_zlib_decode_noheader_malloc(const char*, int, int*) (null)
;; enabled by -tree-original


{
  struct stbi__zbuf a;
  char * p;

    struct stbi__zbuf a;
    char * p;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = (char *) stbi__malloc (16384)) >>>>>;
  if (p == 0B)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer = (stbi_uc *) buffer) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer_end = (stbi_uc *) buffer + (sizetype) len) >>>>>;
  if (<<cleanup_point stbi__do_zlib (&a, p, 16384, 1, 0) != 0>>)
    {
      if (outlen != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*outlen = (int) (a.zout - a.zout_start)) >>>>>;
        }
      return <retval> = a.zout_start;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) a.zout_start) >>>>>;
      return <retval> = 0B;
    }
}


;; Function int stbi_zlib_decode_noheader_buffer(char*, int, const char*, int) (null)
;; enabled by -tree-original


{
  struct stbi__zbuf a;

    struct stbi__zbuf a;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer = (stbi_uc *) ibuffer) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a.zbuffer_end = (stbi_uc *) ibuffer + (sizetype) ilen) >>>>>;
  if (<<cleanup_point stbi__do_zlib (&a, obuffer, olen, 0, 0) != 0>>)
    {
      return <retval> = (int) (a.zout - a.zout_start);
    }
  else
    {
      return <retval> = -1;
    }
}


;; Function stbi__pngchunk stbi__get_chunk_header(stbi__context*) (null)
;; enabled by -tree-original


{
  struct stbi__pngchunk c;

    struct stbi__pngchunk c;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c.length = stbi__get32be (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c.type = stbi__get32be (s)) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.12110, *(struct stbi__pngchunk &) &c>>>;
}


;; Function int stbi__check_png_header(stbi__context*) (null)
;; enabled by -tree-original


{
  static const stbi_uc png_sig[8] = {137, 80, 78, 71, 13, 10, 26, 10};
  int i;

  <<cleanup_point   static const stbi_uc png_sig[8] = {137, 80, 78, 71, 13, 10, 26, 10};>>;
    int i;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i > 7) goto <D.12116>;
      if (<<cleanup_point stbi__get8 (s) != (stbi_uc) png_sig[i]>>)
        {
          <<cleanup_point return <retval> = stbi__err ((const char *) "bad png sig")>>;
        }
      <<cleanup_point (void)  ++i>>;
    }
  <D.12116>:;
  return <retval> = 1;
}


;; Function int stbi__paeth(int, int, int) (null)
;; enabled by -tree-original


{
  int p = (a + b) - c;
  int pa = ABS_EXPR <p - a>;
  int pb = ABS_EXPR <p - b>;
  int pc = ABS_EXPR <p - c>;

    int p = (a + b) - c;
    int pa = ABS_EXPR <p - a>;
    int pb = ABS_EXPR <p - b>;
    int pc = ABS_EXPR <p - c>;
  if (pa <= pb && pa <= pc)
    {
      return <retval> = a;
    }
  if (pb <= pc)
    {
      return <retval> = b;
    }
  return <retval> = c;
}


;; Function int stbi__create_png_image_raw(stbi__png*, stbi_uc*, stbi__uint32, int, stbi__uint32, stbi__uint32, int, int) (null)
;; enabled by -tree-original


{
  int bytes = depth == 16 ? 2 : 1;
  struct stbi__context * s = a->s;
  stbi__uint32 i;
  stbi__uint32 j;
  stbi__uint32 stride = (x * (stbi__uint32) out_n) * (stbi__uint32) bytes;
  stbi__uint32 img_len;
  stbi__uint32 img_width_bytes;
  int k;
  int img_n = s->img_n;
  int output_bytes = out_n * bytes;
  int filter_bytes = img_n * bytes;
  int width = (int) x;

    int bytes = depth == 16 ? 2 : 1;
    struct stbi__context * s = a->s;
    stbi__uint32 i;
    stbi__uint32 j;
    stbi__uint32 stride = (x * (stbi__uint32) out_n) * (stbi__uint32) bytes;
    stbi__uint32 img_len;
    stbi__uint32 img_width_bytes;
    int k;
    int img_n = s->img_n;
    int output_bytes = out_n * bytes;
    int filter_bytes = img_n * bytes;
    int width = (int) x;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((s->img_n == out_n || s->img_n + 1 == out_n) || (_assert ((const char *) "out_n == s->img_n || out_n == s->img_n+1", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 4553);, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->out = (stbi_uc *) stbi__malloc_mad3 ((int) x, (int) y, output_bytes, 0)) >>>>>;
  if (a->out == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem")>>;
    }
  if (<<cleanup_point stbi__mad3sizes_valid (img_n, (int) x, depth, 7) == 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (img_width_bytes = ((stbi__uint32) img_n * x) * (stbi__uint32) depth + 7 >> 3) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (img_len = (img_width_bytes + 1) * y) >>>>>;
  if (raw_len < img_len)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "not enough pixels")>>;
    }
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
    while (1)
      {
        if (j >= y) goto <D.12198>;
        {
          stbi_uc * cur = a->out + (sizetype) (stride * j);
          stbi_uc * prior;
          int filter;

                    stbi_uc * cur = a->out + (sizetype) (stride * j);
                    stbi_uc * prior;
                    int filter;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (filter = (int) *raw++ ) >>>>>;
          if (filter > 4)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "invalid filter")>>;
            }
          if (depth <= 7)
            {
              if (img_width_bytes > x)
                {
                  <<cleanup_point return <retval> = stbi__err ((const char *) "invalid width")>>;
                }
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cur = cur + (sizetype) (x * (stbi__uint32) out_n - img_width_bytes)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (filter_bytes = 1) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (width = (int) img_width_bytes) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (prior = cur + -(sizetype) stride) >>>>>;
          if (j == 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (filter = (int) first_row_filter[filter]) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
          while (1)
            {
              if (k >= filter_bytes) goto <D.12200>;
              switch (filter)
                {
                  case 0:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k)) >>>>>;
                  goto <D.12202>;
                  case 1:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k)) >>>>>;
                  goto <D.12202>;
                  case 2:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k) + *(prior + (sizetype) k)) >>>>>;
                  goto <D.12202>;
                  case 3:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) ((int) *(prior + (sizetype) k) >> 1))) >>>>>;
                  goto <D.12202>;
                  case 4:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) stbi__paeth (0, (int) *(prior + (sizetype) k), 0))) >>>>>;
                  goto <D.12202>;
                  case 5:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k)) >>>>>;
                  goto <D.12202>;
                  case 6:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k)) >>>>>;
                  goto <D.12202>;
                  <D.12202>:;
                }
              <<cleanup_point (void)  ++k>>;
            }
          <D.12200>:;
          if (depth == 8)
            {
              if (img_n != out_n)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) img_n) = 255) >>>>>;
                }
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (raw = raw + (sizetype) img_n) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cur = cur + (sizetype) out_n) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (prior = prior + (sizetype) out_n) >>>>>;
            }
          else
            {
              if (depth == 16)
                {
                  if (img_n != out_n)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) filter_bytes) = 255) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + ((sizetype) filter_bytes + 1)) = 255) >>>>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (raw = raw + (sizetype) filter_bytes) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cur = cur + (sizetype) output_bytes) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (prior = prior + (sizetype) output_bytes) >>>>>;
                }
              else
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (raw = raw + 1) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cur = cur + 1) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (prior = prior + 1) >>>>>;
                }
            }
          {
            if (depth <= 7 || img_n == out_n)
              {
                {
                  int nk = (width + -1) * filter_bytes;

                                    int nk = (width + -1) * filter_bytes;
                  switch (filter)
                    {
                      case 0:;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) cur, (const void *) raw, (size_t) nk) >>>>>;
                      goto <D.12203>;
                      case 1:;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                      while (1)
                        {
                          if (k >= nk) goto <D.12204>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k) + *(cur + (sizetype) (k - filter_bytes))) >>>>>;
                          <<cleanup_point (void)  ++k>>;
                        }
                      <D.12204>:;
                      goto <D.12203>;
                      case 2:;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                      while (1)
                        {
                          if (k >= nk) goto <D.12206>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k) + *(prior + (sizetype) k)) >>>>>;
                          <<cleanup_point (void)  ++k>>;
                        }
                      <D.12206>:;
                      goto <D.12203>;
                      case 3:;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                      while (1)
                        {
                          if (k >= nk) goto <D.12208>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) ((int) *(prior + (sizetype) k) + (int) *(cur + (sizetype) (k - filter_bytes)) >> 1))) >>>>>;
                          <<cleanup_point (void)  ++k>>;
                        }
                      <D.12208>:;
                      goto <D.12203>;
                      case 4:;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                      while (1)
                        {
                          if (k >= nk) goto <D.12210>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) stbi__paeth ((int) *(cur + (sizetype) (k - filter_bytes)), (int) *(prior + (sizetype) k), (int) *(prior + (sizetype) (k - filter_bytes))))) >>>>>;
                          <<cleanup_point (void)  ++k>>;
                        }
                      <D.12210>:;
                      goto <D.12203>;
                      case 5:;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                      while (1)
                        {
                          if (k >= nk) goto <D.12212>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) ((int) *(cur + (sizetype) (k - filter_bytes)) >> 1))) >>>>>;
                          <<cleanup_point (void)  ++k>>;
                        }
                      <D.12212>:;
                      goto <D.12203>;
                      case 6:;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                      while (1)
                        {
                          if (k >= nk) goto <D.12214>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) stbi__paeth ((int) *(cur + (sizetype) (k - filter_bytes)), 0, 0))) >>>>>;
                          <<cleanup_point (void)  ++k>>;
                        }
                      <D.12214>:;
                      goto <D.12203>;
                      <D.12203>:;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (raw = raw + (sizetype) nk) >>>>>;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (img_n + 1 == out_n || (_assert ((const char *) "img_n+1 == out_n", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 4637);, 0)) >>>>>;
                switch (filter)
                  {
                    case 0:;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = x + 4294967295) >>>>>;
                    while (1)
                      {
                        if (i == 0) goto <D.12217>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                        while (1)
                          {
                            if (k >= filter_bytes) goto <D.12219>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k)) >>>>>;
                            <<cleanup_point (void)  ++k>>;
                          }
                        <D.12219>:;
                        <<cleanup_point (void)  --i;, (void) (*(cur + (sizetype) filter_bytes) = 255);;, (void) (raw = raw + (sizetype) filter_bytes);;, (void) (cur = cur + (sizetype) output_bytes);;, (void) (prior = prior + (sizetype) output_bytes);>>;
                      }
                    <D.12217>:;
                    goto <D.12216>;
                    case 1:;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = x + 4294967295) >>>>>;
                    while (1)
                      {
                        if (i == 0) goto <D.12221>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                        while (1)
                          {
                            if (k >= filter_bytes) goto <D.12223>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k) + *(cur + (sizetype) (k - output_bytes))) >>>>>;
                            <<cleanup_point (void)  ++k>>;
                          }
                        <D.12223>:;
                        <<cleanup_point (void)  --i;, (void) (*(cur + (sizetype) filter_bytes) = 255);;, (void) (raw = raw + (sizetype) filter_bytes);;, (void) (cur = cur + (sizetype) output_bytes);;, (void) (prior = prior + (sizetype) output_bytes);>>;
                      }
                    <D.12221>:;
                    goto <D.12216>;
                    case 2:;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = x + 4294967295) >>>>>;
                    while (1)
                      {
                        if (i == 0) goto <D.12225>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                        while (1)
                          {
                            if (k >= filter_bytes) goto <D.12227>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = *(raw + (sizetype) k) + *(prior + (sizetype) k)) >>>>>;
                            <<cleanup_point (void)  ++k>>;
                          }
                        <D.12227>:;
                        <<cleanup_point (void)  --i;, (void) (*(cur + (sizetype) filter_bytes) = 255);;, (void) (raw = raw + (sizetype) filter_bytes);;, (void) (cur = cur + (sizetype) output_bytes);;, (void) (prior = prior + (sizetype) output_bytes);>>;
                      }
                    <D.12225>:;
                    goto <D.12216>;
                    case 3:;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = x + 4294967295) >>>>>;
                    while (1)
                      {
                        if (i == 0) goto <D.12229>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                        while (1)
                          {
                            if (k >= filter_bytes) goto <D.12231>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) ((int) *(prior + (sizetype) k) + (int) *(cur + (sizetype) (k - output_bytes)) >> 1))) >>>>>;
                            <<cleanup_point (void)  ++k>>;
                          }
                        <D.12231>:;
                        <<cleanup_point (void)  --i;, (void) (*(cur + (sizetype) filter_bytes) = 255);;, (void) (raw = raw + (sizetype) filter_bytes);;, (void) (cur = cur + (sizetype) output_bytes);;, (void) (prior = prior + (sizetype) output_bytes);>>;
                      }
                    <D.12229>:;
                    goto <D.12216>;
                    case 4:;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = x + 4294967295) >>>>>;
                    while (1)
                      {
                        if (i == 0) goto <D.12233>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                        while (1)
                          {
                            if (k >= filter_bytes) goto <D.12235>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) stbi__paeth ((int) *(cur + (sizetype) (k - output_bytes)), (int) *(prior + (sizetype) k), (int) *(prior + (sizetype) (k - output_bytes))))) >>>>>;
                            <<cleanup_point (void)  ++k>>;
                          }
                        <D.12235>:;
                        <<cleanup_point (void)  --i;, (void) (*(cur + (sizetype) filter_bytes) = 255);;, (void) (raw = raw + (sizetype) filter_bytes);;, (void) (cur = cur + (sizetype) output_bytes);;, (void) (prior = prior + (sizetype) output_bytes);>>;
                      }
                    <D.12233>:;
                    goto <D.12216>;
                    case 5:;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = x + 4294967295) >>>>>;
                    while (1)
                      {
                        if (i == 0) goto <D.12237>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                        while (1)
                          {
                            if (k >= filter_bytes) goto <D.12239>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) ((int) *(cur + (sizetype) (k - output_bytes)) >> 1))) >>>>>;
                            <<cleanup_point (void)  ++k>>;
                          }
                        <D.12239>:;
                        <<cleanup_point (void)  --i;, (void) (*(cur + (sizetype) filter_bytes) = 255);;, (void) (raw = raw + (sizetype) filter_bytes);;, (void) (cur = cur + (sizetype) output_bytes);;, (void) (prior = prior + (sizetype) output_bytes);>>;
                      }
                    <D.12237>:;
                    goto <D.12216>;
                    case 6:;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = x + 4294967295) >>>>>;
                    while (1)
                      {
                        if (i == 0) goto <D.12241>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                        while (1)
                          {
                            if (k >= filter_bytes) goto <D.12243>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + (sizetype) k) = (stbi_uc) ((unsigned char) *(raw + (sizetype) k) + (unsigned char) stbi__paeth ((int) *(cur + (sizetype) (k - output_bytes)), 0, 0))) >>>>>;
                            <<cleanup_point (void)  ++k>>;
                          }
                        <D.12243>:;
                        <<cleanup_point (void)  --i;, (void) (*(cur + (sizetype) filter_bytes) = 255);;, (void) (raw = raw + (sizetype) filter_bytes);;, (void) (cur = cur + (sizetype) output_bytes);;, (void) (prior = prior + (sizetype) output_bytes);>>;
                      }
                    <D.12241>:;
                    goto <D.12216>;
                    <D.12216>:;
                  }
                if (depth == 16)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cur = a->out + (sizetype) (stride * j)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                    while (1)
                      {
                        if (i >= x) goto <D.12245>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + ((sizetype) filter_bytes + 1)) = 255) >>>>>;
                        <<cleanup_point (void)  ++i;, (void) (cur = cur + (sizetype) output_bytes);>>;
                      }
                    <D.12245>:;
                  }
              }
          }
        }
        <<cleanup_point (void)  ++j>>;
      }
    <D.12198>:;
  }
  {
    if (depth <= 7)
      {
        {
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
            while (1)
              {
                if (j >= y) goto <D.12247>;
                {
                  stbi_uc * cur = a->out + (sizetype) (stride * j);
                  stbi_uc * in = a->out + (((sizetype) (stride * j) + (sizetype) (x * (stbi__uint32) out_n)) - (sizetype) img_width_bytes);
                  stbi_uc scale = color == 0 ? (stbi_uc) stbi__depth_scale_table[depth] : 1;

                                    stbi_uc * cur = a->out + (sizetype) (stride * j);
                                    stbi_uc * in = a->out + (((sizetype) (stride * j) + (sizetype) (x * (stbi__uint32) out_n)) - (sizetype) img_width_bytes);
                                    stbi_uc scale = color == 0 ? (stbi_uc) stbi__depth_scale_table[depth] : 1;
                  if (depth == 4)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = (int) (x * (stbi__uint32) img_n)) >>>>>;
                      while (1)
                        {
                          if (k <= 1) goto <D.12249>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = (stbi_uc) ((int) *in >> 4) * scale) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = (*in & 15) * scale) >>>>>;
                          <<cleanup_point (void) (k = k + -2);, (void)  ++in;>>;
                        }
                      <D.12249>:;
                      if (k > 0)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = (stbi_uc) ((int) *in >> 4) * scale) >>>>>;
                        }
                    }
                  else
                    {
                      if (depth == 2)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = (int) (x * (stbi__uint32) img_n)) >>>>>;
                          while (1)
                            {
                              if (k <= 3) goto <D.12251>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = (stbi_uc) ((int) *in >> 6) * scale) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 4) & 3) * scale) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 2) & 3) * scale) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = (*in & 3) * scale) >>>>>;
                              <<cleanup_point (void) (k = k + -4);, (void)  ++in;>>;
                            }
                          <D.12251>:;
                          if (k > 0)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = (stbi_uc) ((int) *in >> 6) * scale) >>>>>;
                            }
                          if (k > 1)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 4) & 3) * scale) >>>>>;
                            }
                          if (k > 2)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 2) & 3) * scale) >>>>>;
                            }
                        }
                      else
                        {
                          if (depth == 1)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = (int) (x * (stbi__uint32) img_n)) >>>>>;
                              while (1)
                                {
                                  if (k <= 7) goto <D.12253>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = (stbi_uc) ((int) *in >> 7) * scale) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 6) & 1) * scale) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 5) & 1) * scale) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 4) & 1) * scale) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 3) & 1) * scale) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 2) & 1) * scale) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 1) & 1) * scale) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = (*in & 1) * scale) >>>>>;
                                  <<cleanup_point (void) (k = k + -8);, (void)  ++in;>>;
                                }
                              <D.12253>:;
                              if (k > 0)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = (stbi_uc) ((int) *in >> 7) * scale) >>>>>;
                                }
                              if (k > 1)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 6) & 1) * scale) >>>>>;
                                }
                              if (k > 2)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 5) & 1) * scale) >>>>>;
                                }
                              if (k > 3)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 4) & 1) * scale) >>>>>;
                                }
                              if (k > 4)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 3) & 1) * scale) >>>>>;
                                }
                              if (k > 5)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 2) & 1) * scale) >>>>>;
                                }
                              if (k > 6)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur++  = ((stbi_uc) ((int) *in >> 1) & 1) * scale) >>>>>;
                                }
                            }
                        }
                    }
                  {
                    if (img_n != out_n)
                      {
                        {
                          int q;

                                                    int q;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (cur = a->out + (sizetype) (stride * j)) >>>>>;
                          if (img_n == 1)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (q = (int) (x + 4294967295)) >>>>>;
                              while (1)
                                {
                                  if (q < 0) goto <D.12255>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + ((sizetype) (q * 2) + 1)) = 255) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(NON_LVALUE_EXPR <cur> + (sizetype) (q * 2)) = *(cur + (sizetype) q)) >>>>>;
                                  <<cleanup_point (void)  --q>>;
                                }
                              <D.12255>:;
                            }
                          else
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (img_n == 3 || (_assert ((const char *) "img_n == 3", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 4726);, 0)) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (q = (int) (x + 4294967295)) >>>>>;
                              while (1)
                                {
                                  if (q < 0) goto <D.12257>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + ((sizetype) (q * 4) + 3)) = 255) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + ((sizetype) (q * 4) + 2)) = *(cur + ((sizetype) (q * 3) + 2))) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(cur + ((sizetype) (q * 4) + 1)) = *(cur + ((sizetype) (q * 3) + 1))) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(NON_LVALUE_EXPR <cur> + (sizetype) (q * 4)) = *(NON_LVALUE_EXPR <cur> + (sizetype) (q * 3))) >>>>>;
                                  <<cleanup_point (void)  --q>>;
                                }
                              <D.12257>:;
                            }
                        }
                      }
                  }
                }
                <<cleanup_point (void)  ++j>>;
              }
            <D.12247>:;
          }
        }
      }
    else
      {
        {
          {
            if (depth == 16)
              {
                {
                  stbi_uc * cur = a->out;
                  stbi__uint16 * cur16 = (stbi__uint16 *) cur;

                                    stbi_uc * cur = a->out;
                                    stbi__uint16 * cur16 = (stbi__uint16 *) cur;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                  while (1)
                    {
                      if ((x * y) * (stbi__uint32) out_n <= i) goto <D.12259>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*cur16 = (stbi__uint16) ((signed short) ((int) *NON_LVALUE_EXPR <cur> << 8) | (signed short) *(cur + 1))) >>>>>;
                      <<cleanup_point (void)  ++i;, (void) cur16++ ;;, (void) (cur = cur + 2);>>;
                    }
                  <D.12259>:;
                }
              }
          }
        }
      }
  }
  return <retval> = 1;
}


;; Function int stbi__create_png_image(stbi__png*, stbi_uc*, stbi__uint32, int, int, int, int) (null)
;; enabled by -tree-original


{
  int bytes = depth == 16 ? 2 : 1;
  int out_bytes = out_n * bytes;
  stbi_uc * final;
  int p;

    int bytes = depth == 16 ? 2 : 1;
    int out_bytes = out_n * bytes;
    stbi_uc * final;
    int p;
  if (interlaced == 0)
    {
      <<cleanup_point return <retval> = stbi__create_png_image_raw (a, image_data, image_data_len, out_n, a->s->img_x, a->s->img_y, depth, color)>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (final = (stbi_uc *) stbi__malloc_mad3 ((int) a->s->img_x, (int) a->s->img_y, out_bytes, 0)) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = 0) >>>>>;
    while (1)
      {
        if (p > 6) goto <D.12285>;
        {
          int xorig[7] = {0, 4, 0, 2, 0, 1, 0};
          int yorig[7] = {0, 0, 4, 0, 2, 0, 1};
          int xspc[7] = {8, 8, 4, 4, 2, 2, 1};
          int yspc[7] = {8, 8, 8, 4, 4, 2, 2};
          int i;
          int j;
          int x;
          int y;

          <<cleanup_point           int xorig[7] = {0, 4, 0, 2, 0, 1, 0};>>;
          <<cleanup_point           int yorig[7] = {0, 0, 4, 0, 2, 0, 1};>>;
          <<cleanup_point           int xspc[7] = {8, 8, 4, 4, 2, 2, 1};>>;
          <<cleanup_point           int yspc[7] = {8, 8, 8, 4, 4, 2, 2};>>;
                    int i;
                    int j;
                    int x;
                    int y;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = (int) ((((a->s->img_x - (stbi__uint32) xorig[p]) + (stbi__uint32) xspc[p]) + 4294967295) / (stbi__uint32) xspc[p])) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = (int) ((((a->s->img_y - (stbi__uint32) yorig[p]) + (stbi__uint32) yspc[p]) + 4294967295) / (stbi__uint32) yspc[p])) >>>>>;
          {
            if (x != 0 && y != 0)
              {
                {
                  stbi__uint32 img_len = (stbi__uint32) ((((a->s->img_n * x) * depth + 7 >> 3) + 1) * y);

                                    stbi__uint32 img_len = (stbi__uint32) ((((a->s->img_n * x) * depth + 7 >> 3) + 1) * y);
                  if (<<cleanup_point stbi__create_png_image_raw (a, image_data, image_data_len, out_n, (stbi__uint32) x, (stbi__uint32) y, depth, color) == 0>>)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) final) >>>>>;
                      return <retval> = 0;
                    }
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                    while (1)
                      {
                        if (j >= y) goto <D.12287>;
                        {
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if (i >= x) goto <D.12289>;
                                {
                                  int out_y = yspc[p] * j + yorig[p];
                                  int out_x = xspc[p] * i + xorig[p];

                                                                    int out_y = yspc[p] * j + yorig[p];
                                                                    int out_x = xspc[p] * i + xorig[p];
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) (final + ((sizetype) ((a->s->img_x * (stbi__uint32) out_y) * (stbi__uint32) out_bytes) + (sizetype) (out_x * out_bytes))), (const void *) (a->out + (sizetype) ((j * x + i) * out_bytes)), (size_t) out_bytes) >>>>>;
                                }
                                <<cleanup_point (void)  ++i>>;
                              }
                            <D.12289>:;
                          }
                        }
                        <<cleanup_point (void)  ++j>>;
                      }
                    <D.12287>:;
                  }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) a->out) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (image_data = image_data + (sizetype) img_len) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (image_data_len = image_data_len - img_len) >>>>>;
                }
              }
          }
        }
        <<cleanup_point (void)  ++p>>;
      }
    <D.12285>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->out = final) >>>>>;
  return <retval> = 1;
}


;; Function int stbi__compute_transparency(stbi__png*, stbi_uc*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context * s = z->s;
  stbi__uint32 i;
  stbi__uint32 pixel_count = s->img_x * s->img_y;
  stbi_uc * p = z->out;

    struct stbi__context * s = z->s;
    stbi__uint32 i;
    stbi__uint32 pixel_count = s->img_x * s->img_y;
    stbi_uc * p = z->out;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((out_n == 2 || out_n == 4) || (_assert ((const char *) "out_n == 2 || out_n == 4", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 4804);, 0)) >>>>>;
  if (out_n == 2)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
      while (1)
        {
          if (i >= pixel_count) goto <D.12300>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 1) = *NON_LVALUE_EXPR <p> == *NON_LVALUE_EXPR <tc> ? 0 : 255) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 2) >>>>>;
          <<cleanup_point (void)  ++i>>;
        }
      <D.12300>:;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
      while (1)
        {
          if (i >= pixel_count) goto <D.12302>;
          if ((*NON_LVALUE_EXPR <p> == *NON_LVALUE_EXPR <tc> && *(p + 1) == *(tc + 1)) && *(p + 2) == *(tc + 2))
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 3) = 0) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 4) >>>>>;
          <<cleanup_point (void)  ++i>>;
        }
      <D.12302>:;
    }
  return <retval> = 1;
}


;; Function int stbi__compute_transparency16(stbi__png*, stbi__uint16*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context * s = z->s;
  stbi__uint32 i;
  stbi__uint32 pixel_count = s->img_x * s->img_y;
  stbi__uint16 * p = (stbi__uint16 *) z->out;

    struct stbi__context * s = z->s;
    stbi__uint32 i;
    stbi__uint32 pixel_count = s->img_x * s->img_y;
    stbi__uint16 * p = (stbi__uint16 *) z->out;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((out_n == 2 || out_n == 4) || (_assert ((const char *) "out_n == 2 || out_n == 4", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 4829);, 0)) >>>>>;
  if (out_n == 2)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
      while (1)
        {
          if (i >= pixel_count) goto <D.12313>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 2) = *NON_LVALUE_EXPR <p> == *NON_LVALUE_EXPR <tc> ? 0 : 65535) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 4) >>>>>;
          <<cleanup_point (void)  ++i>>;
        }
      <D.12313>:;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
      while (1)
        {
          if (i >= pixel_count) goto <D.12315>;
          if ((*NON_LVALUE_EXPR <p> == *NON_LVALUE_EXPR <tc> && *(p + 2) == *(tc + 2)) && *(p + 4) == *(tc + 4))
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 6) = 0) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 8) >>>>>;
          <<cleanup_point (void)  ++i>>;
        }
      <D.12315>:;
    }
  return <retval> = 1;
}


;; Function int stbi__expand_png_palette(stbi__png*, stbi_uc*, int, int) (null)
;; enabled by -tree-original


{
  stbi__uint32 i;
  stbi__uint32 pixel_count = a->s->img_x * a->s->img_y;
  stbi_uc * p;
  stbi_uc * temp_out;
  stbi_uc * orig = a->out;

    stbi__uint32 i;
    stbi__uint32 pixel_count = a->s->img_x * a->s->img_y;
    stbi_uc * p;
    stbi_uc * temp_out;
    stbi_uc * orig = a->out;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = (stbi_uc *) stbi__malloc_mad2 ((int) pixel_count, pal_img_n, 0)) >>>>>;
  if (p == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (temp_out = p) >>>>>;
  {
    if (pal_img_n == 3)
      {
        {
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
            while (1)
              {
                if (i >= pixel_count) goto <D.12330>;
                {
                  int n = (int) *(orig + (sizetype) i) * 4;

                                    int n = (int) *(orig + (sizetype) i) * 4;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <p> = *(palette + (sizetype) n)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 1) = *(palette + ((sizetype) n + 1))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 2) = *(palette + ((sizetype) n + 2))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 3) >>>>>;
                }
                <<cleanup_point (void)  ++i>>;
              }
            <D.12330>:;
          }
        }
      }
    else
      {
        {
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
            while (1)
              {
                if (i >= pixel_count) goto <D.12332>;
                {
                  int n = (int) *(orig + (sizetype) i) * 4;

                                    int n = (int) *(orig + (sizetype) i) * 4;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <p> = *(palette + (sizetype) n)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 1) = *(palette + ((sizetype) n + 1))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 2) = *(palette + ((sizetype) n + 2))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 3) = *(palette + ((sizetype) n + 3))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 4) >>>>>;
                }
                <<cleanup_point (void)  ++i>>;
              }
            <D.12332>:;
          }
        }
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) a->out) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a->out = temp_out) >>>>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  return <retval> = 1;
}


;; Function void stbi_set_unpremultiply_on_load(int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__unpremultiply_on_load = flag_true_if_should_unpremultiply) >>>>>;


;; Function void stbi_convert_iphone_png_to_rgb(int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__de_iphone_flag = flag_true_if_should_convert) >>>>>;


;; Function void stbi__de_iphone(stbi__png*) (null)
;; enabled by -tree-original


{
  struct stbi__context * s = z->s;
  stbi__uint32 i;
  stbi__uint32 pixel_count = s->img_x * s->img_y;
  stbi_uc * p = z->out;

    struct stbi__context * s = z->s;
    stbi__uint32 i;
    stbi__uint32 pixel_count = s->img_x * s->img_y;
    stbi_uc * p = z->out;
  {
    if (s->img_out_n == 3)
      {
        {
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
            while (1)
              {
                if (i >= pixel_count) goto <D.12354>;
                {
                  stbi_uc t = *NON_LVALUE_EXPR <p>;

                                    stbi_uc t = *NON_LVALUE_EXPR <p>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <p> = *(p + 2)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 2) = t) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 3) >>>>>;
                }
                <<cleanup_point (void)  ++i>>;
              }
            <D.12354>:;
          }
        }
      }
    else
      {
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_out_n == 4 || (_assert ((const char *) "s->img_out_n == 4", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 4910);, 0)) >>>>>;
          {
            if (stbi__unpremultiply_on_load != 0)
              {
                {
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                    while (1)
                      {
                        if (i >= pixel_count) goto <D.12356>;
                        {
                          stbi_uc a = *(p + 3);
                          stbi_uc t = *NON_LVALUE_EXPR <p>;

                                                    stbi_uc a = *(p + 3);
                                                    stbi_uc t = *NON_LVALUE_EXPR <p>;
                          {
                            if (a != 0)
                              {
                                {
                                  stbi_uc half = a / 2;

                                                                    stbi_uc half = a / 2;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <p> = (stbi_uc) (((int) *(p + 2) * 255 + (int) half) / (int) a)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 1) = (stbi_uc) (((int) *(p + 1) * 255 + (int) half) / (int) a)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 2) = (stbi_uc) (((int) t * 255 + (int) half) / (int) a)) >>>>>;
                                }
                              }
                            else
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <p> = *(p + 2)) >>>>>;
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 2) = t) >>>>>;
                              }
                          }
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 4) >>>>>;
                        }
                        <<cleanup_point (void)  ++i>>;
                      }
                    <D.12356>:;
                  }
                }
              }
            else
              {
                {
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                    while (1)
                      {
                        if (i >= pixel_count) goto <D.12358>;
                        {
                          stbi_uc t = *NON_LVALUE_EXPR <p>;

                                                    stbi_uc t = *NON_LVALUE_EXPR <p>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <p> = *(p + 2)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 2) = t) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 4) >>>>>;
                        }
                        <<cleanup_point (void)  ++i>>;
                      }
                    <D.12358>:;
                  }
                }
              }
          }
        }
      }
  }
}


;; Function int stbi__parse_png_file(stbi__png*, int, int) (null)
;; enabled by -tree-original


{
  stbi_uc palette[1024];
  stbi_uc pal_img_n = 0;
  stbi_uc has_trans = 0;
  stbi_uc tc[3] = {0};
  stbi__uint16 tc16[3];
  stbi__uint32 ioff = 0;
  stbi__uint32 idata_limit = 0;
  stbi__uint32 i;
  stbi__uint32 pal_len = 0;
  int first = 1;
  int k;
  int interlace = 0;
  int color = 0;
  int is_iphone = 0;
  struct stbi__context * s = z->s;

    stbi_uc palette[1024];
  <<cleanup_point   stbi_uc pal_img_n = 0;>>;
  <<cleanup_point   stbi_uc has_trans = 0;>>;
  <<cleanup_point   stbi_uc tc[3] = {0};>>;
    stbi__uint16 tc16[3];
  <<cleanup_point   stbi__uint32 ioff = 0;>>;
  <<cleanup_point   stbi__uint32 idata_limit = 0;>>;
    stbi__uint32 i;
  <<cleanup_point   stbi__uint32 pal_len = 0;>>;
  <<cleanup_point   int first = 1;>>;
    int k;
  <<cleanup_point   int interlace = 0;>>;
  <<cleanup_point   int color = 0;>>;
  <<cleanup_point   int is_iphone = 0;>>;
    struct stbi__context * s = z->s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->expanded = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->idata = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->out = 0B) >>>>>;
  if (<<cleanup_point stbi__check_png_header (s) == 0>>)
    {
      return <retval> = 0;
    }
  if (scan == 1)
    {
      return <retval> = 1;
    }
  {
    while (1)
      {
        {
          struct stbi__pngchunk c;

                    struct stbi__pngchunk c;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = stbi__get_chunk_header (s)) >>>>>;
          {
            switch (c.type)
              {
                {
                  case 1130840649:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (is_iphone = 1) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, (int) c.length) >>>>>;
                  goto <D.12398>;
                  case 1229472850:;
                  {
                    int comp;
                    int filter;

                                        int comp;
                                        int filter;
                    if (first == 0)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "multiple IHDR")>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (first = 0) >>>>>;
                    if (c.length != 13)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "bad IHDR len")>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_x = stbi__get32be (s)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_y = stbi__get32be (s)) >>>>>;
                    if (s->img_y > 16777216)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
                      }
                    if (s->img_x > 16777216)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->depth = (int) stbi__get8 (s)) >>>>>;
                    if ((((z->depth != 1 && z->depth != 2) && z->depth != 4) && z->depth != 8) && z->depth != 16)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "1/2/4/8/16-bit only")>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (color = (int) stbi__get8 (s)) >>>>>;
                    if (color > 6)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "bad ctype")>>;
                      }
                    if (color == 3 && z->depth == 16)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "bad ctype")>>;
                      }
                    if (color == 3)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal_img_n = 3) >>>>>;
                      }
                    else
                      {
                        if ((color & 1) != 0)
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "bad ctype")>>;
                          }
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (comp = (int) stbi__get8 (s)) >>>>>;
                    if (comp != 0)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "bad comp method")>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (filter = (int) stbi__get8 (s)) >>>>>;
                    if (filter != 0)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "bad filter method")>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (interlace = (int) stbi__get8 (s)) >>>>>;
                    if (interlace > 1)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "bad interlace method")>>;
                      }
                    if (s->img_x == 0 || s->img_y == 0)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "0-pixel image")>>;
                      }
                    if (pal_img_n == 0)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_n = ((color & 2) != 0 ? 3 : 1) + (color >> 2 & 1)) >>>>>;
                        if ((1073741824 / s->img_x) / (stbi__uint32) s->img_n < s->img_y)
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
                          }
                        if (scan == 2)
                          {
                            return <retval> = 1;
                          }
                      }
                    else
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_n = 1) >>>>>;
                        if (268435456 / s->img_x < s->img_y)
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
                          }
                      }
                    goto <D.12398>;
                  }
                  case 1347179589:;
                  if (first != 0)
                    {
                      <<cleanup_point return <retval> = stbi__err ((const char *) "first not IHDR")>>;
                    }
                  if (c.length > 768)
                    {
                      <<cleanup_point return <retval> = stbi__err ((const char *) "invalid PLTE")>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal_len = c.length / 3) >>>>>;
                  if (pal_len * 3 != c.length)
                    {
                      <<cleanup_point return <retval> = stbi__err ((const char *) "invalid PLTE")>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                  while (1)
                    {
                      if (i >= pal_len) goto <D.12399>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (palette[i * 4] = stbi__get8 (s)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (palette[i * 4 + 1] = stbi__get8 (s)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (palette[i * 4 + 2] = stbi__get8 (s)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (palette[i * 4 + 3] = 255) >>>>>;
                      <<cleanup_point (void)  ++i>>;
                    }
                  <D.12399>:;
                  goto <D.12398>;
                  case 1951551059:;
                  if (first != 0)
                    {
                      <<cleanup_point return <retval> = stbi__err ((const char *) "first not IHDR")>>;
                    }
                  if (z->idata != 0B)
                    {
                      <<cleanup_point return <retval> = stbi__err ((const char *) "tRNS after IDAT")>>;
                    }
                  if (pal_img_n != 0)
                    {
                      if (scan == 2)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_n = 4) >>>>>;
                          return <retval> = 1;
                        }
                      if (pal_len == 0)
                        {
                          <<cleanup_point return <retval> = stbi__err ((const char *) "tRNS before PLTE")>>;
                        }
                      if (c.length > pal_len)
                        {
                          <<cleanup_point return <retval> = stbi__err ((const char *) "bad tRNS len")>>;
                        }
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal_img_n = 4) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                      while (1)
                        {
                          if (c.length <= i) goto <D.12401>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (palette[i * 4 + 3] = stbi__get8 (s)) >>>>>;
                          <<cleanup_point (void)  ++i>>;
                        }
                      <D.12401>:;
                    }
                  else
                    {
                      if ((s->img_n & 1) == 0)
                        {
                          <<cleanup_point return <retval> = stbi__err ((const char *) "tRNS with alpha")>>;
                        }
                      if (c.length != (stbi__uint32) s->img_n * 2)
                        {
                          <<cleanup_point return <retval> = stbi__err ((const char *) "bad tRNS len")>>;
                        }
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (has_trans = 1) >>>>>;
                      if (z->depth == 16)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                          while (1)
                            {
                              if (s->img_n <= k) goto <D.12403>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tc16[k] = (stbi__uint16) stbi__get16be (s)) >>>>>;
                              <<cleanup_point (void)  ++k>>;
                            }
                          <D.12403>:;
                        }
                      else
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                          while (1)
                            {
                              if (s->img_n <= k) goto <D.12405>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tc[k] = (stbi_uc) stbi__get16be (s) * (stbi_uc) stbi__depth_scale_table[z->depth]) >>>>>;
                              <<cleanup_point (void)  ++k>>;
                            }
                          <D.12405>:;
                        }
                    }
                  goto <D.12398>;
                  case 1229209940:;
                  {
                    if (first != 0)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "first not IHDR")>>;
                      }
                    if (pal_img_n != 0 && pal_len == 0)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "no PLTE")>>;
                      }
                    if (scan == 2)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_n = (int) pal_img_n) >>>>>;
                        return <retval> = 1;
                      }
                    if ((int) (c.length + ioff) < (int) ioff)
                      {
                        return <retval> = 0;
                      }
                    {
                      if (c.length + ioff > idata_limit)
                        {
                          {
                            stbi__uint32 idata_limit_old = idata_limit;
                            stbi_uc * p;

                                                        stbi__uint32 idata_limit_old = idata_limit;
                                                        stbi_uc * p;
                            if (idata_limit == 0)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (idata_limit = (unsigned int) MAX_EXPR <c.length, 4096>) >>>>>;
                              }
                            while (1)
                              {
                                if (c.length + ioff <= idata_limit) goto <D.12407>;
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (idata_limit = idata_limit * 2) >>>>>;
                              }
                            <D.12407>:;
                            <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = (stbi_uc *) realloc ((void *) z->idata, (size_t) idata_limit)) >>>>>;
                            if (p == 0B)
                              {
                                <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem")>>;
                              }
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->idata = p) >>>>>;
                          }
                        }
                    }
                    if (<<cleanup_point stbi__getn (s, z->idata + (sizetype) ioff, (int) c.length) == 0>>)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "outofdata")>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ioff = c.length + ioff) >>>>>;
                    goto <D.12398>;
                  }
                  case 1229278788:;
                  {
                    stbi__uint32 raw_len;
                    stbi__uint32 bpl;

                                        stbi__uint32 raw_len;
                                        stbi__uint32 bpl;
                    if (first != 0)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "first not IHDR")>>;
                      }
                    if (scan != 0)
                      {
                        return <retval> = 1;
                      }
                    if (z->idata == 0B)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "no IDAT")>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bpl = (s->img_x * (stbi__uint32) z->depth + 7) / 8) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (raw_len = (s->img_y * bpl) * (stbi__uint32) s->img_n + s->img_y) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->expanded = (stbi_uc *) stbi_zlib_decode_malloc_guesssize_headerflag ((const char *) z->idata, (int) ioff, (int) raw_len, (int *) &raw_len, is_iphone == 0)) >>>>>;
                    if (z->expanded == 0B)
                      {
                        return <retval> = 0;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) z->idata) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->idata = 0B) >>>>>;
                    if ((s->img_n + 1 == req_comp && req_comp != 3) && pal_img_n == 0 || has_trans != 0)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_out_n = s->img_n + 1) >>>>>;
                      }
                    else
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_out_n = s->img_n) >>>>>;
                      }
                    if (<<cleanup_point stbi__create_png_image (z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace) == 0>>)
                      {
                        return <retval> = 0;
                      }
                    if (has_trans != 0)
                      {
                        if (z->depth == 16)
                          {
                            if (<<cleanup_point stbi__compute_transparency16 (z, (stbi__uint16 *) &tc16, s->img_out_n) == 0>>)
                              {
                                return <retval> = 0;
                              }
                          }
                        else
                          {
                            if (<<cleanup_point stbi__compute_transparency (z, (stbi_uc *) &tc, s->img_out_n) == 0>>)
                              {
                                return <retval> = 0;
                              }
                          }
                      }
                    if ((is_iphone != 0 && stbi__de_iphone_flag != 0) && s->img_out_n > 2)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__de_iphone (z) >>>>>;
                      }
                    if (pal_img_n != 0)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_n = (int) pal_img_n) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_out_n = (int) pal_img_n) >>>>>;
                        if (req_comp > 2)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_out_n = req_comp) >>>>>;
                          }
                        if (<<cleanup_point stbi__expand_png_palette (z, (stbi_uc *) &palette, (int) pal_len, s->img_out_n) == 0>>)
                          {
                            return <retval> = 0;
                          }
                      }
                    else
                      {
                        if (has_trans != 0)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++s->img_n >>>>>;
                          }
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) z->expanded) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z->expanded = 0B) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32be (s) >>>>>;
                    return <retval> = 1;
                  }
                  default:;
                  if (first != 0)
                    {
                      <<cleanup_point return <retval> = stbi__err ((const char *) "first not IHDR")>>;
                    }
                  {
                    if ((c.type & 536870912) == 0)
                      {
                        {
                          static char invalid_chunk[25] = "XXXX PNG chunk not known";

                          <<cleanup_point                           static char invalid_chunk[25] = "XXXX PNG chunk not known";>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (invalid_chunk[0] = (char) (c.type >> 24)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (invalid_chunk[1] = (char) (c.type >> 16)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (invalid_chunk[2] = (char) (c.type >> 8)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (invalid_chunk[3] = (char) NON_LVALUE_EXPR <c.type>) >>>>>;
                          <<cleanup_point return <retval> = stbi__err ((const char *) &invalid_chunk)>>;
                        }
                      }
                  }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, (int) c.length) >>>>>;
                  goto <D.12398>;
                }
                <D.12398>:;
              }
          }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32be (s) >>>>>;
        }
      }
  }
}


;; Function void* stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*) (null)
;; enabled by -tree-original


{
  void * result = 0B;

  <<cleanup_point   void * result = 0B;>>;
  if (req_comp < 0 || req_comp > 4)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad req_comp");, 0B>>;
    }
  if (<<cleanup_point stbi__parse_png_file (p, 0, req_comp) != 0>>)
    {
      if (p->depth <= 8)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ri->bits_per_channel = 8) >>>>>;
        }
      else
        {
          if (p->depth == 16)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ri->bits_per_channel = 16) >>>>>;
            }
          else
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad bits_per_channel");, 0B>>;
            }
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = (void *) p->out) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p->out = 0B) >>>>>;
      if (req_comp != 0 && p->s->img_out_n != req_comp)
        {
          if (ri->bits_per_channel == 8)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = (void *) stbi__convert_format ((unsigned char *) result, p->s->img_out_n, req_comp, p->s->img_x, p->s->img_y)) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = (void *) stbi__convert_format16 ((stbi__uint16 *) result, p->s->img_out_n, req_comp, p->s->img_x, p->s->img_y)) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p->s->img_out_n = req_comp) >>>>>;
          if (result == 0B)
            {
              return <retval> = result;
            }
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = (int) p->s->img_x) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = (int) p->s->img_y) >>>>>;
      if (n != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*n = p->s->img_n) >>>>>;
        }
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) p->out) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p->out = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) p->expanded) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p->expanded = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) p->idata) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p->idata = 0B) >>>>>;
  return <retval> = result;
}


;; Function void* stbi__png_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) (null)
;; enabled by -tree-original


{
  struct stbi__png p;

    struct stbi__png p;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p.s = s) >>>>>;
  <<cleanup_point return <retval> = stbi__do_png (&p, x, y, comp, req_comp, ri)>>;
}


;; Function int stbi__png_test(stbi__context*) (null)
;; enabled by -tree-original


{
  int r;

    int r;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__check_png_header (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  return <retval> = r;
}


;; Function int stbi__png_info_raw(stbi__png*, int*, int*, int*) (null)
;; enabled by -tree-original


if (<<cleanup_point stbi__parse_png_file (p, 2, 0) == 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (p->s) >>>>>;
    return <retval> = 0;
  }
if (x != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = (int) p->s->img_x) >>>>>;
  }
if (y != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = (int) p->s->img_y) >>>>>;
  }
if (comp != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = p->s->img_n) >>>>>;
  }
return <retval> = 1;


;; Function int stbi__png_info(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  struct stbi__png p;

    struct stbi__png p;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p.s = s) >>>>>;
  <<cleanup_point return <retval> = stbi__png_info_raw (&p, x, y, comp)>>;
}


;; Function int stbi__png_is16(stbi__context*) (null)
;; enabled by -tree-original


{
  struct stbi__png p;

    struct stbi__png p;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p.s = s) >>>>>;
  if (<<cleanup_point stbi__png_info_raw (&p, 0B, 0B, 0B) == 0>>)
    {
      return <retval> = 0;
    }
  if (p.depth != 16)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (p.s) >>>>>;
      return <retval> = 0;
    }
  return <retval> = 1;
}


;; Function int stbi__bmp_test_raw(stbi__context*) (null)
;; enabled by -tree-original


{
  int r;
  int sz;

    int r;
    int sz;
  if (<<cleanup_point stbi__get8 (s) != 66>>)
    {
      return <retval> = 0;
    }
  if (<<cleanup_point stbi__get8 (s) != 77>>)
    {
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get16le (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get16le (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sz = (int) stbi__get32le (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = (int) ((((sz == 12 || sz == 40) || sz == 56) || sz == 108) || sz == 124)) >>>>>;
  return <retval> = r;
}


;; Function int stbi__bmp_test(stbi__context*) (null)
;; enabled by -tree-original


{
  int r;

    int r;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__bmp_test_raw (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  return <retval> = r;
}


;; Function int stbi__high_bit(unsigned int) (null)
;; enabled by -tree-original


{
  int n = 0;

  <<cleanup_point   int n = 0;>>;
  if (z == 0)
    {
      return <retval> = -1;
    }
  if (z > 65535)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = z >> 16) >>>>>;
    }
  if (z > 255)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n + 8) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = z >> 8) >>>>>;
    }
  if (z > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n + 4) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = z >> 4) >>>>>;
    }
  if (z > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n + 2) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = z >> 2) >>>>>;
    }
  if (z > 1)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (n = n + 1) >>>>>;
    }
  return <retval> = n;
}


;; Function int stbi__bitcount(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a = (a & 1431655765) + (a >> 1 & 1431655765)) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a = (a & 858993459) + (a >> 2 & 858993459)) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a = (a >> 4) + a & 252645135) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a = (a >> 8) + a) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a = (a >> 16) + a) >>>>>;
return <retval> = (int) a & 255;


;; Function int stbi__shiftsigned(unsigned int, int, int) (null)
;; enabled by -tree-original


{
  static unsigned int mul_table[9] = {0, 255, 85, 73, 17, 33, 65, 129, 1};
  static unsigned int shift_table[9] = {0, 0, 0, 1, 0, 2, 4, 6, 0};

  <<cleanup_point   static unsigned int mul_table[9] = {0, 255, 85, 73, 17, 33, 65, 129, 1};>>;
  <<cleanup_point   static unsigned int shift_table[9] = {0, 0, 0, 1, 0, 2, 4, 6, 0};>>;
  if (shift < 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = v << -NON_LVALUE_EXPR <shift>) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = v >> shift) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v <= 255 || (_assert ((const char *) "v < 256", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 5263);, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = v >> 8 - bits) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bits >= 0 && bits <= 8 || (_assert ((const char *) "bits >= 0 && bits <= 8", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 5265);, 0)) >>>>>;
  return <retval> = (int) (mul_table[bits] * v) >> shift_table[bits];
}


;; Function void* stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*) (null)
;; enabled by -tree-original


{
  int hsz;

    int hsz;
  if (<<cleanup_point stbi__get8 (s) != 66 || stbi__get8 (s) != 77>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "not BMP");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get16le (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get16le (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->offset = (int) stbi__get32le (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->hsz = hsz = (int) stbi__get32le (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mr = info->mg = info->mb = info->ma = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->extra_read = 14) >>>>>;
  if (info->offset < 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad BMP");, 0B>>;
    }
  if ((((hsz != 12 && hsz != 40) && hsz != 56) && hsz != 108) && hsz != 124)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "unknown BMP");, 0B>>;
    }
  if (hsz == 12)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_x = (stbi__uint32) stbi__get16le (s)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_y = (stbi__uint32) stbi__get16le (s)) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_x = stbi__get32le (s)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_y = stbi__get32le (s)) >>>>>;
    }
  if (<<cleanup_point stbi__get16le (s) != 1>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad BMP");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->bpp = stbi__get16le (s)) >>>>>;
  {
    if (hsz != 12)
      {
        {
          int compress;

                    int compress;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (compress = (int) stbi__get32le (s)) >>>>>;
          if (compress == 1 || compress == 2)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "BMP RLE");, 0B>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
          {
            if (hsz == 40 || hsz == 56)
              {
                if (hsz == 56)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                  }
                if (info->bpp == 16 || info->bpp == 32)
                  {
                    if (compress == 0)
                      {
                        if (info->bpp == 32)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mr = 16711680) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mg = 65280) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mb = 255) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->ma = 4278190080) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->all_a = 0) >>>>>;
                          }
                        else
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mr = 31744) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mg = 992) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mb = 31) >>>>>;
                          }
                      }
                    else
                      {
                        if (compress == 3)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mr = stbi__get32le (s)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mg = stbi__get32le (s)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mb = stbi__get32le (s)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->extra_read = info->extra_read + 12) >>>>>;
                            if (info->mr == info->mg && info->mg == info->mb)
                              {
                                <<cleanup_point return <retval> = stbi__err ((const char *) "bad BMP");, 0B>>;
                              }
                          }
                        else
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "bad BMP");, 0B>>;
                          }
                      }
                  }
              }
            else
              {
                {
                  int i;

                                    int i;
                  if (hsz != 108 && hsz != 124)
                    {
                      <<cleanup_point return <retval> = stbi__err ((const char *) "bad BMP");, 0B>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mr = stbi__get32le (s)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mg = stbi__get32le (s)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->mb = stbi__get32le (s)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info->ma = stbi__get32le (s)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                  while (1)
                    {
                      if (i > 11) goto <D.12523>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                      <<cleanup_point (void)  ++i>>;
                    }
                  <D.12523>:;
                  if (hsz == 124)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32le (s) >>>>>;
                    }
                }
              }
          }
        }
      }
  }
  return <retval> = 1B;
}


;; Function void* stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) (null)
;; enabled by -tree-original


{
  stbi_uc * out;
  unsigned int mr = 0;
  unsigned int mg = 0;
  unsigned int mb = 0;
  unsigned int ma = 0;
  unsigned int all_a;
  stbi_uc pal[256][4];
  int psize = 0;
  int i;
  int j;
  int width;
  int flip_vertically;
  int pad;
  int target;
  struct stbi__bmp_data info;

    stbi_uc * out;
  <<cleanup_point   unsigned int mr = 0;>>;
  <<cleanup_point   unsigned int mg = 0;>>;
  <<cleanup_point   unsigned int mb = 0;>>;
  <<cleanup_point   unsigned int ma = 0;>>;
    unsigned int all_a;
    stbi_uc pal[256][4];
  <<cleanup_point   int psize = 0;>>;
    int i;
    int j;
    int width;
    int flip_vertically;
    int pad;
    int target;
    struct stbi__bmp_data info;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info.all_a = 255) >>>>>;
  if (<<cleanup_point stbi__bmp_parse_header (s, &info) == 0B>>)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (flip_vertically = (int) s->img_y > 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_y = (stbi__uint32) ABS_EXPR <(int) s->img_y>) >>>>>;
  if (s->img_y > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  if (s->img_x > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (mr = info.mr) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (mg = info.mg) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (mb = info.mb) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ma = info.ma) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (all_a = info.all_a) >>>>>;
  if (info.hsz == 12)
    {
      if (info.bpp <= 23)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (psize = ((info.offset - info.extra_read) + -24) / 3) >>>>>;
        }
    }
  else
    {
      if (info.bpp <= 15)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (psize = (info.offset - info.extra_read) - info.hsz >> 2) >>>>>;
        }
    }
  if (psize == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info.offset == s->callback_already_read + (int) (s->img_buffer - s->img_buffer_original) || (_assert ((const char *) "info.offset == s->callback_already_read + (int) (s->img_buffer - s->img_buffer_original)", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 5398);, 0)) >>>>>;
      if ((long long int) info.offset != (long long int) s->callback_already_read + (s->img_buffer - (stbi_uc *) &s->buffer_start))
        {
          <<cleanup_point return <retval> = stbi__err ((const char *) "bad offset");, 0B>>;
        }
    }
  if (info.bpp == 24 && ma == 4278190080)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_n = 3) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (s->img_n = ma != 0 ? 4 : 3) >>>>>;
    }
  if (req_comp != 0 && req_comp > 2)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (target = req_comp) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (target = s->img_n) >>>>>;
    }
  if (<<cleanup_point stbi__mad3sizes_valid (target, (int) s->img_x, (int) s->img_y, 0) == 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = (stbi_uc *) stbi__malloc_mad3 (target, (int) s->img_x, (int) s->img_y, 0)) >>>>>;
  if (out == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  {
    if (info.bpp <= 15)
      {
        {
          int z = 0;

          <<cleanup_point           int z = 0;>>;
          if (psize == 0 || psize > 256)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) out) >>>>>;
              <<cleanup_point return <retval> = stbi__err ((const char *) "invalid");, 0B>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
          while (1)
            {
              if (i >= psize) goto <D.12604>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal[i][2] = stbi__get8 (s)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal[i][1] = stbi__get8 (s)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal[i][0] = stbi__get8 (s)) >>>>>;
              if (info.hsz != 12)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get8 (s) >>>>>;
                }
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal[i][3] = 255) >>>>>;
              <<cleanup_point (void)  ++i>>;
            }
          <D.12604>:;
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, ((info.offset - info.extra_read) - info.hsz) - (info.hsz == 12 ? 3 : 4) * psize) >>>>>;
          if (info.bpp == 1)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (width = (int) (s->img_x + 7 >> 3)) >>>>>;
            }
          else
            {
              if (info.bpp == 4)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (width = (int) (s->img_x + 1 >> 1)) >>>>>;
                }
              else
                {
                  if (info.bpp == 8)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (width = (int) s->img_x) >>>>>;
                    }
                  else
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) out) >>>>>;
                      <<cleanup_point return <retval> = stbi__err ((const char *) "bad bpp");, 0B>>;
                    }
                }
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pad = -NON_LVALUE_EXPR <width> & 3) >>>>>;
          {
            if (info.bpp == 1)
              {
                {
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                    while (1)
                      {
                        if ((int) s->img_y <= j) goto <D.12606>;
                        {
                          int bit_offset = 7;
                          int v;

                          <<cleanup_point                           int bit_offset = 7;>>;
                                                    int v;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = (int) stbi__get8 (s)) >>>>>;
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if ((int) s->img_x <= i) goto <D.12608>;
                                {
                                  int color = v >> bit_offset & 1;

                                                                    int color = v >> bit_offset & 1;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = pal[color][0]) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = pal[color][1]) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = pal[color][2]) >>>>>;
                                  if (target == 4)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = 255) >>>>>;
                                    }
                                  if (i + 1 == (int) s->img_x) goto <D.12608>;
                                  if (<<cleanup_point  --bit_offset < 0>>)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bit_offset = 7) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = (int) stbi__get8 (s)) >>>>>;
                                    }
                                }
                                <<cleanup_point (void)  ++i>>;
                              }
                            <D.12608>:;
                          }
                          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, pad) >>>>>;
                        }
                        <<cleanup_point (void)  ++j>>;
                      }
                    <D.12606>:;
                  }
                }
              }
            else
              {
                {
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                    while (1)
                      {
                        if ((int) s->img_y <= j) goto <D.12610>;
                        {
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if ((int) s->img_x <= i) goto <D.12612>;
                                {
                                  int v;
                                  int v2 = 0;

                                                                    int v;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = (int) stbi__get8 (s)) >>>>>;
                                  <<cleanup_point                                   int v2 = 0;>>;
                                  if (info.bpp == 4)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v2 = v & 15) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = v >> 4) >>>>>;
                                    }
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = pal[v][0]) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = pal[v][1]) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = pal[v][2]) >>>>>;
                                  if (target == 4)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = 255) >>>>>;
                                    }
                                  if (i + 1 == (int) s->img_x) goto <D.12612>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = info.bpp == 8 ? (int) stbi__get8 (s) : v2) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = pal[v][0]) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = pal[v][1]) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = pal[v][2]) >>>>>;
                                  if (target == 4)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = 255) >>>>>;
                                    }
                                }
                                <<cleanup_point (void) (i = i + 2)>>;
                              }
                            <D.12612>:;
                          }
                          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, pad) >>>>>;
                        }
                        <<cleanup_point (void)  ++j>>;
                      }
                    <D.12610>:;
                  }
                }
              }
          }
        }
      }
    else
      {
        {
          int rshift = 0;
          int gshift = 0;
          int bshift = 0;
          int ashift = 0;
          int rcount = 0;
          int gcount = 0;
          int bcount = 0;
          int acount = 0;
          int z = 0;
          int easy = 0;

          <<cleanup_point           int rshift = 0;>>;
          <<cleanup_point           int gshift = 0;>>;
          <<cleanup_point           int bshift = 0;>>;
          <<cleanup_point           int ashift = 0;>>;
          <<cleanup_point           int rcount = 0;>>;
          <<cleanup_point           int gcount = 0;>>;
          <<cleanup_point           int bcount = 0;>>;
          <<cleanup_point           int acount = 0;>>;
          <<cleanup_point           int z = 0;>>;
          <<cleanup_point           int easy = 0;>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, (info.offset - info.extra_read) - info.hsz) >>>>>;
          if (info.bpp == 24)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (width = (int) (s->img_x * 3)) >>>>>;
            }
          else
            {
              if (info.bpp == 16)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (width = (int) (s->img_x * 2)) >>>>>;
                }
              else
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (width = 0) >>>>>;
                }
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pad = -NON_LVALUE_EXPR <width> & 3) >>>>>;
          if (info.bpp == 24)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (easy = 1) >>>>>;
            }
          else
            {
              if (info.bpp == 32)
                {
                  if (((mb == 255 && mg == 65280) && mr == 16711680) && ma == 4278190080)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (easy = 2) >>>>>;
                    }
                }
            }
          if (easy == 0)
            {
              if ((mr == 0 || mg == 0) || mb == 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) out) >>>>>;
                  <<cleanup_point return <retval> = stbi__err ((const char *) "bad masks");, 0B>>;
                }
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rshift = stbi__high_bit (mr) + -7) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rcount = stbi__bitcount (mr)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (gshift = stbi__high_bit (mg) + -7) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (gcount = stbi__bitcount (mg)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bshift = stbi__high_bit (mb) + -7) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bcount = stbi__bitcount (mb)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ashift = stbi__high_bit (ma) + -7) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (acount = stbi__bitcount (ma)) >>>>>;
              if (((rcount > 8 || gcount > 8) || bcount > 8) || acount > 8)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) out) >>>>>;
                  <<cleanup_point return <retval> = stbi__err ((const char *) "bad masks");, 0B>>;
                }
            }
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
            while (1)
              {
                if ((int) s->img_y <= j) goto <D.12614>;
                {
                  {
                    if (easy != 0)
                      {
                        {
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if ((int) s->img_x <= i) goto <D.12616>;
                                {
                                  unsigned char a;

                                                                    unsigned char a;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + ((sizetype) z + 2)) = stbi__get8 (s)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + ((sizetype) z + 1)) = stbi__get8 (s)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(NON_LVALUE_EXPR <out> + (sizetype) z) = stbi__get8 (s)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = z + 3) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a = easy == 2 ? stbi__get8 (s) : 255) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (all_a = (unsigned int) a | all_a) >>>>>;
                                  if (target == 4)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = a) >>>>>;
                                    }
                                }
                                <<cleanup_point (void)  ++i>>;
                              }
                            <D.12616>:;
                          }
                        }
                      }
                    else
                      {
                        {
                          int bpp = info.bpp;

                                                    int bpp = info.bpp;
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                            while (1)
                              {
                                if ((int) s->img_x <= i) goto <D.12618>;
                                {
                                  stbi__uint32 v;
                                  unsigned int a;

                                                                    stbi__uint32 v;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (v = bpp == 16 ? (stbi__uint32) stbi__get16le (s) : stbi__get32le (s)) >>>>>;
                                                                    unsigned int a;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = (stbi_uc) stbi__shiftsigned (v & mr, rshift, rcount)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = (stbi_uc) stbi__shiftsigned (v & mg, gshift, gcount)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = (stbi_uc) stbi__shiftsigned (v & mb, bshift, bcount)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (a = ma != 0 ? (unsigned int) stbi__shiftsigned (v & ma, ashift, acount) : 255) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (all_a = all_a | a) >>>>>;
                                  if (target == 4)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) z++ ) = (stbi_uc) a) >>>>>;
                                    }
                                }
                                <<cleanup_point (void)  ++i>>;
                              }
                            <D.12618>:;
                          }
                        }
                      }
                  }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, pad) >>>>>;
                }
                <<cleanup_point (void)  ++j>>;
              }
            <D.12614>:;
          }
        }
      }
  }
  if (target == 4 && all_a == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = (int) ((s->img_x * s->img_y) * 4 + 4294967295)) >>>>>;
      while (1)
        {
          if (i < 0) goto <D.12620>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + (sizetype) i) = 255) >>>>>;
          <<cleanup_point (void) (i = i + -4)>>;
        }
      <D.12620>:;
    }
  {
    if (flip_vertically != 0)
      {
        {
          stbi_uc t;

                    stbi_uc t;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
            while (1)
              {
                if ((int) s->img_y >> 1 <= j) goto <D.12622>;
                {
                  stbi_uc * p1 = out + (sizetype) ((s->img_x * (stbi__uint32) j) * (stbi__uint32) target);
                  stbi_uc * p2 = out + (sizetype) ((((s->img_y - (stbi__uint32) j) + 4294967295) * s->img_x) * (stbi__uint32) target);

                                    stbi_uc * p1 = out + (sizetype) ((s->img_x * (stbi__uint32) j) * (stbi__uint32) target);
                                    stbi_uc * p2 = out + (sizetype) ((((s->img_y - (stbi__uint32) j) + 4294967295) * s->img_x) * (stbi__uint32) target);
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                  while (1)
                    {
                      if ((int) s->img_x * target <= i) goto <D.12624>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t = *(p1 + (sizetype) i)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p1 + (sizetype) i) = *(p2 + (sizetype) i)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p2 + (sizetype) i) = t) >>>>>;
                      <<cleanup_point (void)  ++i>>;
                    }
                  <D.12624>:;
                }
                <<cleanup_point (void)  ++j>>;
              }
            <D.12622>:;
          }
        }
      }
  }
  if (req_comp != 0 && req_comp != target)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = stbi__convert_format (out, target, req_comp, s->img_x, s->img_y)) >>>>>;
      if (out == 0B)
        {
          return <retval> = (void *) out;
        }
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = (int) s->img_x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = (int) s->img_y) >>>>>;
  if (comp != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = s->img_n) >>>>>;
    }
  return <retval> = (void *) out;
}


;; Function int stbi__tga_get_comp(int, int, int*) (null)
;; enabled by -tree-original


if (is_rgb16 != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*is_rgb16 = 0) >>>>>;
  }
switch (bits_per_pixel)
  {
    case 8:;
    return <retval> = 1;
    case 16:;
    if (is_grey != 0)
      {
        return <retval> = 2;
      }
    case 15:;
    if (is_rgb16 != 0B)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*is_rgb16 = 1) >>>>>;
      }
    return <retval> = 3;
    case 24:;
    case 32:;
    return <retval> = bits_per_pixel / 8;
    default:;
    return <retval> = 0;
  }


;; Function int stbi__tga_info(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  int tga_w;
  int tga_h;
  int tga_comp;
  int tga_image_type;
  int tga_bits_per_pixel;
  int tga_colormap_bpp;
  int sz;
  int tga_colormap_type;

    int tga_w;
    int tga_h;
    int tga_comp;
    int tga_image_type;
    int tga_bits_per_pixel;
    int tga_colormap_bpp;
    int sz;
    int tga_colormap_type;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get8 (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_colormap_type = (int) stbi__get8 (s)) >>>>>;
  if (tga_colormap_type > 1)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_image_type = (int) stbi__get8 (s)) >>>>>;
  if (tga_colormap_type == 1)
    {
      if (tga_image_type != 1 && tga_image_type != 9)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
          return <retval> = 0;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 4) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sz = (int) stbi__get8 (s)) >>>>>;
      if ((((sz != 8 && sz != 15) && sz != 16) && sz != 24) && sz != 32)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
          return <retval> = 0;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 4) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_colormap_bpp = sz) >>>>>;
    }
  else
    {
      if (((tga_image_type != 2 && tga_image_type != 3) && tga_image_type != 10) && tga_image_type != 11)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
          return <retval> = 0;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 9) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_colormap_bpp = 0) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_w = stbi__get16le (s)) >>>>>;
  if (tga_w <= 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_h = stbi__get16le (s)) >>>>>;
  if (tga_h <= 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_bits_per_pixel = (int) stbi__get8 (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get8 (s) >>>>>;
  if (tga_colormap_bpp != 0)
    {
      if (tga_bits_per_pixel != 8 && tga_bits_per_pixel != 16)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
          return <retval> = 0;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_comp = stbi__tga_get_comp (tga_colormap_bpp, 0, 0B)) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_comp = stbi__tga_get_comp (tga_bits_per_pixel, (int) (tga_image_type == 3 || tga_image_type == 11), 0B)) >>>>>;
    }
  if (tga_comp == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  if (x != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = tga_w) >>>>>;
    }
  if (y != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = tga_h) >>>>>;
    }
  if (comp != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = tga_comp) >>>>>;
    }
  return <retval> = 1;
}


;; Function int stbi__tga_test(stbi__context*) (null)
;; enabled by -tree-original


{
  int res = 0;
  int sz;
  int tga_color_type;

  <<cleanup_point   int res = 0;>>;
    int sz;
    int tga_color_type;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get8 (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_color_type = (int) stbi__get8 (s)) >>>>>;
  if (tga_color_type > 1)
    {
      // predicted unlikely by goto predictor.;
      goto errorEnd;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sz = (int) stbi__get8 (s)) >>>>>;
  if (tga_color_type == 1)
    {
      if (sz != 1 && sz != 9)
        {
          // predicted unlikely by goto predictor.;
          goto errorEnd;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 4) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sz = (int) stbi__get8 (s)) >>>>>;
      if ((((sz != 8 && sz != 15) && sz != 16) && sz != 24) && sz != 32)
        {
          // predicted unlikely by goto predictor.;
          goto errorEnd;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 4) >>>>>;
    }
  else
    {
      if (((sz != 2 && sz != 3) && sz != 10) && sz != 11)
        {
          // predicted unlikely by goto predictor.;
          goto errorEnd;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 9) >>>>>;
    }
  if (<<cleanup_point stbi__get16le (s) <= 0>>)
    {
      // predicted unlikely by goto predictor.;
      goto errorEnd;
    }
  if (<<cleanup_point stbi__get16le (s) <= 0>>)
    {
      // predicted unlikely by goto predictor.;
      goto errorEnd;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sz = (int) stbi__get8 (s)) >>>>>;
  if ((tga_color_type == 1 && sz != 8) && sz != 16)
    {
      // predicted unlikely by goto predictor.;
      goto errorEnd;
    }
  if ((((sz != 8 && sz != 15) && sz != 16) && sz != 24) && sz != 32)
    {
      // predicted unlikely by goto predictor.;
      goto errorEnd;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (res = 1) >>>>>;
  errorEnd:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  return <retval> = res;
}


;; Function void stbi__tga_read_rgb16(stbi__context*, stbi_uc*) (null)
;; enabled by -tree-original


{
  stbi__uint16 px;
  stbi__uint16 fiveBitMask = 31;
  int r = (int) px >> 10 & (int) fiveBitMask;
  int g = (int) px >> 5 & (int) fiveBitMask;
  int b = (int) (px & fiveBitMask);

    stbi__uint16 px;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (px = (stbi__uint16) stbi__get16le (s)) >>>>>;
  <<cleanup_point   stbi__uint16 fiveBitMask = 31;>>;
    int r = (int) px >> 10 & (int) fiveBitMask;
    int g = (int) px >> 5 & (int) fiveBitMask;
    int b = (int) (px & fiveBitMask);
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <out> = (stbi_uc) ((r * 255) / 31)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 1) = (stbi_uc) ((g * 255) / 31)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(out + 2) = (stbi_uc) ((b * 255) / 31)) >>>>>;
}


;; Function void* stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) (null)
;; enabled by -tree-original


{
  int tga_offset;
  int tga_indexed;
  int tga_image_type;
  int tga_is_RLE = 0;
  int tga_palette_start;
  int tga_palette_len;
  int tga_palette_bits;
  int tga_x_origin;
  int tga_y_origin;
  int tga_width;
  int tga_height;
  int tga_bits_per_pixel;
  int tga_comp;
  int tga_rgb16 = 0;
  int tga_inverted;
  unsigned char * tga_data;
  unsigned char * tga_palette = 0B;
  int i;
  int j;
  unsigned char raw_data[4] = {0};
  int RLE_count = 0;
  int RLE_repeating = 0;
  int read_next_pixel = 1;

    int tga_offset;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_offset = (int) stbi__get8 (s)) >>>>>;
    int tga_indexed;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_indexed = (int) stbi__get8 (s)) >>>>>;
    int tga_image_type;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_image_type = (int) stbi__get8 (s)) >>>>>;
  <<cleanup_point   int tga_is_RLE = 0;>>;
    int tga_palette_start;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_palette_start = stbi__get16le (s)) >>>>>;
    int tga_palette_len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_palette_len = stbi__get16le (s)) >>>>>;
    int tga_palette_bits;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_palette_bits = (int) stbi__get8 (s)) >>>>>;
    int tga_x_origin;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_x_origin = stbi__get16le (s)) >>>>>;
    int tga_y_origin;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_y_origin = stbi__get16le (s)) >>>>>;
    int tga_width;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_width = stbi__get16le (s)) >>>>>;
    int tga_height;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_height = stbi__get16le (s)) >>>>>;
    int tga_bits_per_pixel;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_bits_per_pixel = (int) stbi__get8 (s)) >>>>>;
    int tga_comp;
  <<cleanup_point   int tga_rgb16 = 0;>>;
    int tga_inverted;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_inverted = (int) stbi__get8 (s)) >>>>>;
    unsigned char * tga_data;
  <<cleanup_point   unsigned char * tga_palette = 0B;>>;
    int i;
    int j;
  <<cleanup_point   unsigned char raw_data[4] = {0};>>;
  <<cleanup_point   int RLE_count = 0;>>;
  <<cleanup_point   int RLE_repeating = 0;>>;
  <<cleanup_point   int read_next_pixel = 1;>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  if (tga_height > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  if (tga_width > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  if (tga_image_type > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_image_type = tga_image_type + -8) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_is_RLE = 1) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_inverted = (tga_inverted & 32) == 0) >>>>>;
  if (tga_indexed != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_comp = stbi__tga_get_comp (tga_palette_bits, 0, &tga_rgb16)) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_comp = stbi__tga_get_comp (tga_bits_per_pixel, tga_image_type == 3, &tga_rgb16)) >>>>>;
    }
  if (tga_comp == 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad format");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = tga_width) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = tga_height) >>>>>;
  if (comp != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = tga_comp) >>>>>;
    }
  if (<<cleanup_point stbi__mad3sizes_valid (tga_width, tga_height, tga_comp, 0) == 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_data = (unsigned char *) stbi__malloc_mad3 (tga_width, tga_height, tga_comp, 0)) >>>>>;
  if (tga_data == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, tga_offset) >>>>>;
  {
    if ((tga_indexed == 0 && tga_is_RLE == 0) && tga_rgb16 == 0)
      {
        {
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
            while (1)
              {
                if (i >= tga_height) goto <D.12709>;
                {
                  int row = tga_inverted != 0 ? (tga_height - i) + -1 : i;
                  stbi_uc * tga_row = tga_data + (sizetype) ((row * tga_width) * tga_comp);

                                    int row = tga_inverted != 0 ? (tga_height - i) + -1 : i;
                                    stbi_uc * tga_row = tga_data + (sizetype) ((row * tga_width) * tga_comp);
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__getn (s, tga_row, tga_width * tga_comp) >>>>>;
                }
                <<cleanup_point (void)  ++i>>;
              }
            <D.12709>:;
          }
        }
      }
    else
      {
        {
          {
            if (tga_indexed != 0)
              {
                {
                  if (tga_palette_len == 0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) tga_data) >>>>>;
                      <<cleanup_point return <retval> = stbi__err ((const char *) "bad palette");, 0B>>;
                    }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, tga_palette_start) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_palette = (unsigned char *) stbi__malloc_mad2 (tga_palette_len, tga_comp, 0)) >>>>>;
                  if (tga_palette == 0B)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) tga_data) >>>>>;
                      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
                    }
                  {
                    if (tga_rgb16 != 0)
                      {
                        {
                          stbi_uc * pal_entry = tga_palette;

                                                    stbi_uc * pal_entry = tga_palette;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_comp == 3 || (_assert ((const char *) "tga_comp == STBI_rgb", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 5778);, 0)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                          while (1)
                            {
                              if (i >= tga_palette_len) goto <D.12711>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__tga_read_rgb16 (s, pal_entry) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal_entry = pal_entry + (sizetype) tga_comp) >>>>>;
                              <<cleanup_point (void)  ++i>>;
                            }
                          <D.12711>:;
                        }
                      }
                    else
                      {
                        if (<<cleanup_point stbi__getn (s, tga_palette, tga_palette_len * tga_comp) == 0>>)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) tga_data) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) tga_palette) >>>>>;
                            <<cleanup_point return <retval> = stbi__err ((const char *) "bad palette");, 0B>>;
                          }
                      }
                  }
                }
              }
          }
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
            while (1)
              {
                if (tga_width * tga_height <= i) goto <D.12713>;
                {
                  {
                    if (tga_is_RLE != 0)
                      {
                        {
                          {
                            if (RLE_count == 0)
                              {
                                {
                                  int RLE_cmd;

                                                                    int RLE_cmd;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (RLE_cmd = (int) stbi__get8 (s)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (RLE_count = (RLE_cmd & 127) + 1) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (RLE_repeating = RLE_cmd >> 7) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (read_next_pixel = 1) >>>>>;
                                }
                              }
                            else
                              {
                                if (RLE_repeating == 0)
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (read_next_pixel = 1) >>>>>;
                                  }
                              }
                          }
                        }
                      }
                    else
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (read_next_pixel = 1) >>>>>;
                      }
                  }
                  {
                    if (read_next_pixel != 0)
                      {
                        {
                          {
                            if (tga_indexed != 0)
                              {
                                {
                                  int pal_idx;

                                                                    int pal_idx;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal_idx = tga_bits_per_pixel == 8 ? (int) stbi__get8 (s) : stbi__get16le (s)) >>>>>;
                                  if (pal_idx >= tga_palette_len)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal_idx = 0) >>>>>;
                                    }
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pal_idx = pal_idx * tga_comp) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                                  while (1)
                                    {
                                      if (j >= tga_comp) goto <D.12715>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (raw_data[j] = *(tga_palette + (sizetype) (pal_idx + j))) >>>>>;
                                      <<cleanup_point (void)  ++j>>;
                                    }
                                  <D.12715>:;
                                }
                              }
                            else
                              {
                                if (tga_rgb16 != 0)
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_comp == 3 || (_assert ((const char *) "tga_comp == STBI_rgb", (const char *) "D:\\WSCodeblocks\\ComputacaoGrafica\\GLFW_TDE2\\include\\stb_image.h", 5827);, 0)) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__tga_read_rgb16 (s, (unsigned char *) &raw_data) >>>>>;
                                  }
                                else
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                                    while (1)
                                      {
                                        if (j >= tga_comp) goto <D.12717>;
                                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (raw_data[j] = stbi__get8 (s)) >>>>>;
                                        <<cleanup_point (void)  ++j>>;
                                      }
                                    <D.12717>:;
                                  }
                              }
                          }
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (read_next_pixel = 0) >>>>>;
                        }
                      }
                  }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                  while (1)
                    {
                      if (j >= tga_comp) goto <D.12719>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(tga_data + (sizetype) (i * tga_comp + j)) = raw_data[j]) >>>>>;
                      <<cleanup_point (void)  ++j>>;
                    }
                  <D.12719>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --RLE_count >>>>>;
                }
                <<cleanup_point (void)  ++i>>;
              }
            <D.12713>:;
          }
          {
            if (tga_inverted != 0)
              {
                {
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                    while (1)
                      {
                        if (j * 2 >= tga_height) goto <D.12721>;
                        {
                          int index1 = (j * tga_width) * tga_comp;
                          int index2 = (((tga_height + -1) - j) * tga_width) * tga_comp;

                                                    int index1 = (j * tga_width) * tga_comp;
                                                    int index2 = (((tga_height + -1) - j) * tga_width) * tga_comp;
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = tga_width * tga_comp) >>>>>;
                            while (1)
                              {
                                if (i <= 0) goto <D.12723>;
                                {
                                  unsigned char temp = *(tga_data + (sizetype) index1);

                                                                    unsigned char temp = *(tga_data + (sizetype) index1);
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(tga_data + (sizetype) index1) = *(tga_data + (sizetype) index2)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(tga_data + (sizetype) index2) = temp) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++index1 >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++index2 >>>>>;
                                }
                                <<cleanup_point (void)  --i>>;
                              }
                            <D.12723>:;
                          }
                        }
                        <<cleanup_point (void)  ++j>>;
                      }
                    <D.12721>:;
                  }
                }
              }
          }
          if (tga_palette != 0B)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) tga_palette) >>>>>;
            }
        }
      }
  }
  {
    if (tga_comp > 2 && tga_rgb16 == 0)
      {
        {
          unsigned char * tga_pixel = tga_data;

                    unsigned char * tga_pixel = tga_data;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
            while (1)
              {
                if (tga_width * tga_height <= i) goto <D.12725>;
                {
                  unsigned char temp = *NON_LVALUE_EXPR <tga_pixel>;

                                    unsigned char temp = *NON_LVALUE_EXPR <tga_pixel>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <tga_pixel> = *(tga_pixel + 2)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(tga_pixel + 2) = temp) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_pixel = tga_pixel + (sizetype) tga_comp) >>>>>;
                }
                <<cleanup_point (void)  ++i>>;
              }
            <D.12725>:;
          }
        }
      }
  }
  if (req_comp != 0 && req_comp != tga_comp)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_data = stbi__convert_format (tga_data, tga_comp, req_comp, (unsigned int) tga_width, (unsigned int) tga_height)) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tga_palette_start = tga_palette_len = tga_palette_bits = tga_x_origin = tga_y_origin = 0) >>>>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  return <retval> = (void *) tga_data;
}


;; Function int stbi__psd_test(stbi__context*) (null)
;; enabled by -tree-original


{
  int r;

    int r;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__get32be (s) == 943870035) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  return <retval> = r;
}


;; Function int stbi__psd_decode_rle(stbi__context*, stbi_uc*, int) (null)
;; enabled by -tree-original


{
  int count;
  int nleft;
  int len;

    int count;
    int nleft;
    int len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = 0) >>>>>;
  while (1)
    {
      if (<<cleanup_point (nleft = pixelCount - count) > 0>>) (void) 0; else goto <D.12740>;
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = (int) stbi__get8 (s)) >>>>>;
        {
          if (len == 128)
            {
              
            }
          else
            {
              {
                {
                  if (len <= 127)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) len++  >>>>>;
                      if (len > nleft)
                        {
                          return <retval> = 0;
                        }
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = count + len) >>>>>;
                      while (1)
                        {
                          if (len == 0) goto <D.12742>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = stbi__get8 (s)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 4) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) len--  >>>>>;
                        }
                      <D.12742>:;
                    }
                  else
                    {
                      {
                        {
                          if (len > 128)
                            {
                              {
                                stbi_uc val;

                                                                stbi_uc val;
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = 257 - len) >>>>>;
                                if (len > nleft)
                                  {
                                    return <retval> = 0;
                                  }
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (val = stbi__get8 (s)) >>>>>;
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = count + len) >>>>>;
                                while (1)
                                  {
                                    if (len == 0) goto <D.12744>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = val) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = p + 4) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) len--  >>>>>;
                                  }
                                <D.12744>:;
                              }
                            }
                        }
                      }
                    }
                }
              }
            }
        }
      }
    }
  <D.12740>:;
  return <retval> = 1;
}


;; Function void* stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int) (null)
;; enabled by -tree-original


{
  int pixelCount;
  int channelCount;
  int compression;
  int channel;
  int i;
  int bitdepth;
  int w;
  int h;
  stbi_uc * out;

    int pixelCount;
    int channelCount;
    int compression;
    int channel;
    int i;
    int bitdepth;
    int w;
    int h;
    stbi_uc * out;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  if (<<cleanup_point stbi__get32be (s) != 943870035>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "not PSD");, 0B>>;
    }
  if (<<cleanup_point stbi__get16be (s) != 1>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "wrong version");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 6) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (channelCount = stbi__get16be (s)) >>>>>;
  if (channelCount < 0 || channelCount > 16)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "wrong channel count");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h = (int) stbi__get32be (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (w = (int) stbi__get32be (s)) >>>>>;
  if (h > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  if (w > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bitdepth = stbi__get16be (s)) >>>>>;
  if (bitdepth != 8 && bitdepth != 16)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "unsupported bit depth");, 0B>>;
    }
  if (<<cleanup_point stbi__get16be (s) != 3>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "wrong color format");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, (int) stbi__get32be (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, (int) stbi__get32be (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, (int) stbi__get32be (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (compression = stbi__get16be (s)) >>>>>;
  if (compression > 1)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad compression");, 0B>>;
    }
  if (<<cleanup_point stbi__mad3sizes_valid (4, w, h, 0) == 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  if ((compression == 0 && bitdepth == 16) && bpc == 16)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = (stbi_uc *) stbi__malloc_mad3 (8, w, h, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ri->bits_per_channel = 16) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = (stbi_uc *) stbi__malloc ((size_t) ((w * h) * 4))) >>>>>;
    }
  if (out == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pixelCount = w * h) >>>>>;
  {
    if (compression != 0)
      {
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, (h * channelCount) * 2) >>>>>;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (channel = 0) >>>>>;
            while (1)
              {
                if (channel > 3) goto <D.12779>;
                {
                  stbi_uc * p;

                                    stbi_uc * p;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = out + (sizetype) channel) >>>>>;
                  if (channel >= channelCount)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                      while (1)
                        {
                          if (i >= pixelCount) goto <D.12781>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = channel == 3 ? 255 : 0) >>>>>;
                          <<cleanup_point (void) i++ ;, (void) (p = p + 4);>>;
                        }
                      <D.12781>:;
                    }
                  else
                    {
                      if (<<cleanup_point stbi__psd_decode_rle (s, p, pixelCount) == 0>>)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) out) >>>>>;
                          <<cleanup_point return <retval> = stbi__err ((const char *) "corrupt");, 0B>>;
                        }
                    }
                }
                <<cleanup_point (void) channel++ >>;
              }
            <D.12779>:;
          }
        }
      }
    else
      {
        {
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (channel = 0) >>>>>;
            while (1)
              {
                if (channel > 3) goto <D.12783>;
                {
                  {
                    if (channel >= channelCount)
                      {
                        {
                          {
                            if (bitdepth == 16 && bpc == 16)
                              {
                                {
                                  stbi__uint16 * q = (stbi__uint16 *) out + (sizetype) ((long long unsigned int) channel * 2);
                                  stbi__uint16 val = channel == 3 ? 65535 : 0;

                                                                    stbi__uint16 * q = (stbi__uint16 *) out + (sizetype) ((long long unsigned int) channel * 2);
                                                                    stbi__uint16 val = channel == 3 ? 65535 : 0;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                  while (1)
                                    {
                                      if (i >= pixelCount) goto <D.12785>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*q = val) >>>>>;
                                      <<cleanup_point (void) i++ ;, (void) (q = q + 8);>>;
                                    }
                                  <D.12785>:;
                                }
                              }
                            else
                              {
                                {
                                  stbi_uc * p = out + (sizetype) channel;
                                  stbi_uc val = channel == 3 ? 255 : 0;

                                                                    stbi_uc * p = out + (sizetype) channel;
                                                                    stbi_uc val = channel == 3 ? 255 : 0;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                  while (1)
                                    {
                                      if (i >= pixelCount) goto <D.12787>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = val) >>>>>;
                                      <<cleanup_point (void) i++ ;, (void) (p = p + 4);>>;
                                    }
                                  <D.12787>:;
                                }
                              }
                          }
                        }
                      }
                    else
                      {
                        {
                          {
                            if (ri->bits_per_channel == 16)
                              {
                                {
                                  stbi__uint16 * q = (stbi__uint16 *) out + (sizetype) ((long long unsigned int) channel * 2);

                                                                    stbi__uint16 * q = (stbi__uint16 *) out + (sizetype) ((long long unsigned int) channel * 2);
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                  while (1)
                                    {
                                      if (i >= pixelCount) goto <D.12789>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*q = (stbi__uint16) stbi__get16be (s)) >>>>>;
                                      <<cleanup_point (void) i++ ;, (void) (q = q + 8);>>;
                                    }
                                  <D.12789>:;
                                }
                              }
                            else
                              {
                                {
                                  stbi_uc * p = out + (sizetype) channel;

                                                                    stbi_uc * p = out + (sizetype) channel;
                                  if (bitdepth == 16)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                      while (1)
                                        {
                                          if (i >= pixelCount) goto <D.12791>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = (stbi_uc) (stbi__get16be (s) >> 8)) >>>>>;
                                          <<cleanup_point (void) i++ ;, (void) (p = p + 4);>>;
                                        }
                                      <D.12791>:;
                                    }
                                  else
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                      while (1)
                                        {
                                          if (i >= pixelCount) goto <D.12793>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*p = stbi__get8 (s)) >>>>>;
                                          <<cleanup_point (void) i++ ;, (void) (p = p + 4);>>;
                                        }
                                      <D.12793>:;
                                    }
                                }
                              }
                          }
                        }
                      }
                  }
                }
                <<cleanup_point (void) channel++ >>;
              }
            <D.12783>:;
          }
        }
      }
  }
  {
    if (channelCount > 3)
      {
        {
          {
            if (ri->bits_per_channel == 16)
              {
                {
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                    while (1)
                      {
                        if (w * h <= i) goto <D.12795>;
                        {
                          stbi__uint16 * pixel = (stbi__uint16 *) out + (sizetype) ((long long unsigned int) (i * 4) * 2);

                                                    stbi__uint16 * pixel = (stbi__uint16 *) out + (sizetype) ((long long unsigned int) (i * 4) * 2);
                          {
                            if (*(pixel + 6) != 0 && *(pixel + 6) != 65535)
                              {
                                {
                                  float a = (float) (int) *(pixel + 6) / 6.5535e+4;
                                  float ra = 1.0e+0 / a;
                                  float inv_a = (1.0e+0 - ra) * 6.5535e+4;

                                                                    float a = (float) (int) *(pixel + 6) / 6.5535e+4;
                                                                    float ra = 1.0e+0 / a;
                                                                    float inv_a = (1.0e+0 - ra) * 6.5535e+4;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <pixel> = (stbi__uint16) ((float) (int) *NON_LVALUE_EXPR <pixel> * ra + inv_a)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(pixel + 2) = (stbi__uint16) ((float) (int) *(pixel + 2) * ra + inv_a)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(pixel + 4) = (stbi__uint16) ((float) (int) *(pixel + 4) * ra + inv_a)) >>>>>;
                                }
                              }
                          }
                        }
                        <<cleanup_point (void)  ++i>>;
                      }
                    <D.12795>:;
                  }
                }
              }
            else
              {
                {
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                    while (1)
                      {
                        if (w * h <= i) goto <D.12797>;
                        {
                          unsigned char * pixel = out + (sizetype) (i * 4);

                                                    unsigned char * pixel = out + (sizetype) (i * 4);
                          {
                            if (*(pixel + 3) != 0 && *(pixel + 3) != 255)
                              {
                                {
                                  float a = (float) (int) *(pixel + 3) / 2.55e+2;
                                  float ra = 1.0e+0 / a;
                                  float inv_a = (1.0e+0 - ra) * 2.55e+2;

                                                                    float a = (float) (int) *(pixel + 3) / 2.55e+2;
                                                                    float ra = 1.0e+0 / a;
                                                                    float inv_a = (1.0e+0 - ra) * 2.55e+2;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <pixel> = (unsigned char) ((float) (int) *NON_LVALUE_EXPR <pixel> * ra + inv_a)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(pixel + 1) = (unsigned char) ((float) (int) *(pixel + 1) * ra + inv_a)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(pixel + 2) = (unsigned char) ((float) (int) *(pixel + 2) * ra + inv_a)) >>>>>;
                                }
                              }
                          }
                        }
                        <<cleanup_point (void)  ++i>>;
                      }
                    <D.12797>:;
                  }
                }
              }
          }
        }
      }
  }
  if (req_comp != 0 && req_comp != 4)
    {
      if (ri->bits_per_channel == 16)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = (stbi_uc *) stbi__convert_format16 ((stbi__uint16 *) out, 4, req_comp, (unsigned int) w, (unsigned int) h)) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = stbi__convert_format (out, 4, req_comp, (unsigned int) w, (unsigned int) h)) >>>>>;
        }
      if (out == 0B)
        {
          return <retval> = (void *) out;
        }
    }
  if (comp != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = 4) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = h) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = w) >>>>>;
  return <retval> = (void *) out;
}


;; Function int stbi__pic_is4(stbi__context*, const char*) (null)
;; enabled by -tree-original


{
  int i;

    int i;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i > 3) goto <D.12804>;
      if (<<cleanup_point stbi__get8 (s) != (stbi_uc) *(str + (sizetype) i)>>)
        {
          return <retval> = 0;
        }
      <<cleanup_point (void)  ++i>>;
    }
  <D.12804>:;
  return <retval> = 1;
}


;; Function int stbi__pic_test_core(stbi__context*) (null)
;; enabled by -tree-original


{
  int i;

    int i;
  if (<<cleanup_point stbi__pic_is4 (s, (const char *) "S\x80\xf64") == 0>>)
    {
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i > 83) goto <D.12810>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get8 (s) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.12810>:;
  if (<<cleanup_point stbi__pic_is4 (s, (const char *) "PICT") == 0>>)
    {
      return <retval> = 0;
    }
  return <retval> = 1;
}


;; Function stbi_uc* stbi__readval(stbi__context*, int, stbi_uc*) (null)
;; enabled by -tree-original


{
  int mask = 128;
  int i;

  <<cleanup_point   int mask = 128;>>;
    int i;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i > 3) goto <D.12825>;
      if ((channel & mask) != 0)
        {
          if (<<cleanup_point stbi__at_eof (s) != 0>>)
            {
              <<cleanup_point return <retval> = stbi__err ((const char *) "bad file");, 0B>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + (sizetype) i) = stbi__get8 (s)) >>>>>;
        }
      <<cleanup_point (void)  ++i;, (void) (mask = mask >> 1);>>;
    }
  <D.12825>:;
  return <retval> = dest;
}


;; Function void stbi__copyval(int, stbi_uc*, const stbi_uc*) (null)
;; enabled by -tree-original


{
  int mask = 128;
  int i;

  <<cleanup_point   int mask = 128;>>;
    int i;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i > 3) goto <D.12834>;
      if ((channel & mask) != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(dest + (sizetype) i) = (stbi_uc) *(src + (sizetype) i)) >>>>>;
        }
      <<cleanup_point (void)  ++i;, (void) (mask = mask >> 1);>>;
    }
  <D.12834>:;
}


;; Function stbi_uc* stbi__pic_load_core(stbi__context*, int, int, int*, stbi_uc*) (null)
;; enabled by -tree-original


{
  int act_comp = 0;
  int num_packets = 0;
  int y;
  int chained;
  struct stbi__pic_packet packets[10];

  <<cleanup_point   int act_comp = 0;>>;
  <<cleanup_point   int num_packets = 0;>>;
    int y;
    int chained;
    struct stbi__pic_packet packets[10];
  while (1)
    {
      {
        struct stbi__pic_packet * packet;

                struct stbi__pic_packet * packet;
        if (num_packets == 10)
          {
            <<cleanup_point return <retval> = stbi__err ((const char *) "bad format");, 0B>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (packet = &packets[num_packets++ ]) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (chained = (int) stbi__get8 (s)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (packet->size = stbi__get8 (s)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (packet->type = stbi__get8 (s)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (packet->channel = stbi__get8 (s)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (act_comp = (int) packet->channel | act_comp) >>>>>;
        if (<<cleanup_point stbi__at_eof (s) != 0>>)
          {
            <<cleanup_point return <retval> = stbi__err ((const char *) "bad file");, 0B>>;
          }
        if (packet->size != 8)
          {
            <<cleanup_point return <retval> = stbi__err ((const char *) "bad format");, 0B>>;
          }
      }
      if (chained == 0) goto <D.12898>;
    }
  <D.12898>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = (act_comp & 16) != 0 ? 4 : 3) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = 0) >>>>>;
    while (1)
      {
        if (y >= height) goto <D.12900>;
        {
          int packet_idx;

                    int packet_idx;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (packet_idx = 0) >>>>>;
            while (1)
              {
                if (packet_idx >= num_packets) goto <D.12902>;
                {
                  struct stbi__pic_packet * packet = &packets[packet_idx];
                  stbi_uc * dest = result + (sizetype) ((y * width) * 4);

                                    struct stbi__pic_packet * packet = &packets[packet_idx];
                                    stbi_uc * dest = result + (sizetype) ((y * width) * 4);
                  {
                    switch ((int) packet->type)
                      {
                        {
                          default:;
                          <<cleanup_point return <retval> = stbi__err ((const char *) "bad format");, 0B>>;
                          case 0:;
                          {
                            int x;

                                                        int x;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = 0) >>>>>;
                            while (1)
                              {
                                if (x >= width) goto <D.12905>;
                                if (<<cleanup_point stbi__readval (s, (int) packet->channel, dest) == 0B>>)
                                  {
                                    return <retval> = 0B;
                                  }
                                <<cleanup_point (void)  ++x;, (void) (dest = dest + 4);>>;
                              }
                            <D.12905>:;
                            goto <D.12904>;
                          }
                          case 1:;
                          {
                            int left = width;
                            int i;

                                                        int left = width;
                                                        int i;
                            while (1)
                              {
                                if (left <= 0) goto <D.12907>;
                                {
                                  stbi_uc count;
                                  stbi_uc value[4];

                                                                    stbi_uc count;
                                                                    stbi_uc value[4];
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = stbi__get8 (s)) >>>>>;
                                  if (<<cleanup_point stbi__at_eof (s) != 0>>)
                                    {
                                      <<cleanup_point return <retval> = stbi__err ((const char *) "bad file");, 0B>>;
                                    }
                                  if ((int) count > left)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = (stbi_uc) left) >>>>>;
                                    }
                                  if (<<cleanup_point stbi__readval (s, (int) packet->channel, (stbi_uc *) &value) == 0B>>)
                                    {
                                      return <retval> = 0B;
                                    }
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                  while (1)
                                    {
                                      if ((int) count <= i) goto <D.12909>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__copyval ((int) packet->channel, dest, (const stbi_uc *) &value) >>>>>;
                                      <<cleanup_point (void)  ++i;, (void) (dest = dest + 4);>>;
                                    }
                                  <D.12909>:;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (left = left - (int) count) >>>>>;
                                }
                              }
                            <D.12907>:;
                          }
                          goto <D.12904>;
                          case 2:;
                          {
                            int left = width;

                                                        int left = width;
                            while (1)
                              {
                                if (left <= 0) goto <D.12911>;
                                {
                                  int count;
                                  int i;

                                                                    int count;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = (int) stbi__get8 (s)) >>>>>;
                                                                    int i;
                                  if (<<cleanup_point stbi__at_eof (s) != 0>>)
                                    {
                                      <<cleanup_point return <retval> = stbi__err ((const char *) "bad file");, 0B>>;
                                    }
                                  {
                                    if (count > 127)
                                      {
                                        {
                                          stbi_uc value[4];

                                                                                    stbi_uc value[4];
                                          if (count == 128)
                                            {
                                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = stbi__get16be (s)) >>>>>;
                                            }
                                          else
                                            {
                                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = count + -127) >>>>>;
                                            }
                                          if (count > left)
                                            {
                                              <<cleanup_point return <retval> = stbi__err ((const char *) "bad file");, 0B>>;
                                            }
                                          if (<<cleanup_point stbi__readval (s, (int) packet->channel, (stbi_uc *) &value) == 0B>>)
                                            {
                                              return <retval> = 0B;
                                            }
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                          while (1)
                                            {
                                              if (i >= count) goto <D.12913>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__copyval ((int) packet->channel, dest, (const stbi_uc *) &value) >>>>>;
                                              <<cleanup_point (void)  ++i;, (void) (dest = dest + 4);>>;
                                            }
                                          <D.12913>:;
                                        }
                                      }
                                    else
                                      {
                                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++count >>>>>;
                                        if (count > left)
                                          {
                                            <<cleanup_point return <retval> = stbi__err ((const char *) "bad file");, 0B>>;
                                          }
                                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                                        while (1)
                                          {
                                            if (i >= count) goto <D.12915>;
                                            if (<<cleanup_point stbi__readval (s, (int) packet->channel, dest) == 0B>>)
                                              {
                                                return <retval> = 0B;
                                              }
                                            <<cleanup_point (void)  ++i;, (void) (dest = dest + 4);>>;
                                          }
                                        <D.12915>:;
                                      }
                                  }
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (left = left - count) >>>>>;
                                }
                              }
                            <D.12911>:;
                            goto <D.12904>;
                          }
                        }
                        <D.12904>:;
                      }
                  }
                }
                <<cleanup_point (void)  ++packet_idx>>;
              }
            <D.12902>:;
          }
        }
        <<cleanup_point (void)  ++y>>;
      }
    <D.12900>:;
  }
  return <retval> = result;
}


;; Function void* stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) (null)
;; enabled by -tree-original


{
  stbi_uc * result;
  int i;
  int x;
  int y;
  int internal_comp;

    stbi_uc * result;
    int i;
    int x;
    int y;
    int internal_comp;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  if (comp == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (comp = &internal_comp) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i > 91) goto <D.12930>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get8 (s) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.12930>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = stbi__get16be (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = stbi__get16be (s)) >>>>>;
  if (y > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  if (x > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  if (<<cleanup_point stbi__at_eof (s) != 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "bad file");, 0B>>;
    }
  if (<<cleanup_point stbi__mad3sizes_valid (x, y, 4, 0) == 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32be (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get16be (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get16be (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = (stbi_uc *) stbi__malloc_mad3 (x, y, 4, 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) result, 255, (size_t) ((x * y) * 4)) >>>>>;
  if (<<cleanup_point stbi__pic_load_core (s, x, y, comp, result) == 0B>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) result) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = 0B) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*px = x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*py = y) >>>>>;
  if (req_comp == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (req_comp = *comp) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi__convert_format (result, 4, req_comp, (unsigned int) x, (unsigned int) y)) >>>>>;
  return <retval> = (void *) result;
}


;; Function int stbi__pic_test(stbi__context*) (null)
;; enabled by -tree-original


{
  int r;

    int r;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__pic_test_core (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  return <retval> = r;
}


;; Function int stbi__gif_test_raw(stbi__context*) (null)
;; enabled by -tree-original


{
  int sz;

    int sz;
  if (<<cleanup_point ((stbi__get8 (s) != 71 || stbi__get8 (s) != 73) || stbi__get8 (s) != 70) || stbi__get8 (s) != 56>>)
    {
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (sz = (int) stbi__get8 (s)) >>>>>;
  if (sz != 57 && sz != 55)
    {
      return <retval> = 0;
    }
  if (<<cleanup_point stbi__get8 (s) != 97>>)
    {
      return <retval> = 0;
    }
  return <retval> = 1;
}


;; Function int stbi__gif_test(stbi__context*) (null)
;; enabled by -tree-original


{
  int r;

    int r;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__gif_test_raw (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  return <retval> = r;
}


;; Function void stbi__gif_parse_colortable(stbi__context*, stbi_uc (*)[4], int, int) (null)
;; enabled by -tree-original


{
  int i;

    int i;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (i >= num_entries) goto <D.12985>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((*(pal + (sizetype) ((long long unsigned int) i * 4)))[2] = stbi__get8 (s)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((*(pal + (sizetype) ((long long unsigned int) i * 4)))[1] = stbi__get8 (s)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((*(pal + (sizetype) ((long long unsigned int) i * 4)))[0] = stbi__get8 (s)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) ((*(pal + (sizetype) ((long long unsigned int) i * 4)))[3] = transp == i ? 0 : 255) >>>>>;
      <<cleanup_point (void)  ++i>>;
    }
  <D.12985>:;
}


;; Function int stbi__gif_header(stbi__context*, stbi__gif*, int*, int) (null)
;; enabled by -tree-original


{
  stbi_uc version;

    stbi_uc version;
  if (<<cleanup_point ((stbi__get8 (s) != 71 || stbi__get8 (s) != 73) || stbi__get8 (s) != 70) || stbi__get8 (s) != 56>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "not GIF")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (version = stbi__get8 (s)) >>>>>;
  if (version != 55 && version != 57)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "not GIF")>>;
    }
  if (<<cleanup_point stbi__get8 (s) != 97>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "not GIF")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stbi__g_failure_reason = (const char *) "") >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->w = stbi__get16le (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->h = stbi__get16le (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->flags = (int) stbi__get8 (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->bgindex = (int) stbi__get8 (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->ratio = (int) stbi__get8 (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->transparent = -1) >>>>>;
  if (g->w > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
    }
  if (g->h > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large")>>;
    }
  if (comp != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = 4) >>>>>;
    }
  if (is_info != 0)
    {
      return <retval> = 1;
    }
  if ((g->flags & 128) != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__gif_parse_colortable (s, (stbi_uc[4] *) &g->pal, 2 << (g->flags & 7), -1) >>>>>;
    }
  return <retval> = 1;
}


;; Function int stbi__gif_info_raw(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  struct stbi__gif * g;

    struct stbi__gif * g;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g = (struct stbi__gif *) stbi__malloc (34928)) >>>>>;
  if (<<cleanup_point stbi__gif_header (s, g, comp, 1) == 0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  if (x != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = g->w) >>>>>;
    }
  if (y != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = g->h) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g) >>>>>;
  return <retval> = 1;
}


;; Function void stbi__out_gif_code(stbi__gif*, stbi__uint16) (null)
;; enabled by -tree-original


{
  stbi_uc * p;
  stbi_uc * c;
  int idx;

    stbi_uc * p;
    stbi_uc * c;
    int idx;
  if (g->codes[(int) code].prefix >= 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__out_gif_code (g, (int) (stbi__uint16) g->codes[(int) code].prefix) >>>>>;
    }
  if (g->cur_y >= g->max_y)
    {
      return;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (idx = g->cur_x + g->cur_y) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = g->out + (sizetype) idx) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(g->history + (sizetype) (idx / 4)) = 1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = g->color_table + (sizetype) ((int) g->codes[(int) code].suffix * 4)) >>>>>;
  if (*(c + 3) > 128)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <p> = *(c + 2)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 1) = *(c + 1)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 2) = *NON_LVALUE_EXPR <c>) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(p + 3) = *(c + 3)) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->cur_x = g->cur_x + 4) >>>>>;
  if (g->cur_x >= g->max_x)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->cur_x = g->start_x) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->cur_y = g->cur_y + g->step) >>>>>;
      while (1)
        {
          if (g->cur_y < g->max_y || g->parse <= 0) goto <D.13008>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->step = g->line_size << g->parse) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->cur_y = g->start_y + (g->step >> 1)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --g->parse >>>>>;
        }
      <D.13008>:;
    }
}


;; Function stbi_uc* stbi__process_gif_raster(stbi__context*, stbi__gif*) (null)
;; enabled by -tree-original


{
  stbi_uc lzw_cs;
  stbi__int32 len;
  stbi__int32 init_code;
  stbi__uint32 first;
  stbi__int32 codesize;
  stbi__int32 codemask;
  stbi__int32 avail;
  stbi__int32 oldcode;
  stbi__int32 bits;
  stbi__int32 valid_bits;
  stbi__int32 clear;
  struct stbi__gif_lzw * p;

    stbi_uc lzw_cs;
    stbi__int32 len;
    stbi__int32 init_code;
    stbi__uint32 first;
    stbi__int32 codesize;
    stbi__int32 codemask;
    stbi__int32 avail;
    stbi__int32 oldcode;
    stbi__int32 bits;
    stbi__int32 valid_bits;
    stbi__int32 clear;
    struct stbi__gif_lzw * p;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (lzw_cs = stbi__get8 (s)) >>>>>;
  if (lzw_cs > 12)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (clear = 1 << (int) lzw_cs) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (first = 1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (codesize = (int) lzw_cs + 1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (codemask = (1 << codesize) + -1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bits = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (valid_bits = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (init_code = 0) >>>>>;
  while (1)
    {
      if (init_code >= clear) goto <D.13028>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->codes[init_code].prefix = -1) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->codes[init_code].first = (stbi_uc) init_code) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->codes[init_code].suffix = (stbi_uc) init_code) >>>>>;
      <<cleanup_point (void) init_code++ >>;
    }
  <D.13028>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (avail = clear + 2) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (oldcode = -1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = 0) >>>>>;
  {
    while (1)
      {
        {
          {
            if (valid_bits < codesize)
              {
                if (len == 0)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = (stbi__int32) stbi__get8 (s)) >>>>>;
                    if (len == 0)
                      {
                        return <retval> = g->out;
                      }
                  }
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --len >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bits = TARGET_EXPR <D.13026, (stbi__int32) stbi__get8 (s) << valid_bits>;, bits | D.13026;) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (valid_bits = valid_bits + 8) >>>>>;
              }
            else
              {
                {
                  stbi__int32 code = bits & codemask;

                                    stbi__int32 code = bits & codemask;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (bits = bits >> codesize) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (valid_bits = valid_bits - codesize) >>>>>;
                  if (code == clear)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (codesize = (int) lzw_cs + 1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (codemask = (1 << codesize) + -1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (avail = clear + 2) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (oldcode = -1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (first = 0) >>>>>;
                    }
                  else
                    {
                      if (clear + 1 == code)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, len) >>>>>;
                          while (1)
                            {
                              if (<<cleanup_point (len = (stbi__int32) stbi__get8 (s)) > 0>>) (void) 0; else goto <D.13032>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, len) >>>>>;
                            }
                          <D.13032>:;
                          return <retval> = g->out;
                        }
                      else
                        {
                          if (code <= avail)
                            {
                              if (first != 0)
                                {
                                  <<cleanup_point return <retval> = stbi__err ((const char *) "no clear code");, 0B>>;
                                }
                              if (oldcode >= 0)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = &g->codes[avail++ ]) >>>>>;
                                  if (avail > 8192)
                                    {
                                      <<cleanup_point return <retval> = stbi__err ((const char *) "too many codes");, 0B>>;
                                    }
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p->prefix = (stbi__int16) oldcode) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p->first = g->codes[oldcode].first) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p->suffix = code == avail ? p->first : g->codes[code].first) >>>>>;
                                }
                              else
                                {
                                  if (code == avail)
                                    {
                                      <<cleanup_point return <retval> = stbi__err ((const char *) "illegal code in raster");, 0B>>;
                                    }
                                }
                              <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__out_gif_code (g, (int) (stbi__uint16) code) >>>>>;
                              if ((avail & codemask) == 0 && avail <= 4095)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) codesize++  >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (codemask = (1 << codesize) + -1) >>>>>;
                                }
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (oldcode = code) >>>>>;
                            }
                          else
                            {
                              <<cleanup_point return <retval> = stbi__err ((const char *) "illegal code in raster");, 0B>>;
                            }
                        }
                    }
                }
              }
          }
        }
      }
  }
}


;; Function stbi_uc* stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, stbi_uc*) (null)
;; enabled by -tree-original


{
  int dispose;
  int first_frame;
  int pi;
  int pcount;

    int dispose;
    int first_frame;
    int pi;
    int pcount;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (first_frame = 0) >>>>>;
  if (g->out == 0B)
    {
      if (<<cleanup_point stbi__gif_header (s, g, comp, 0) == 0>>)
        {
          return <retval> = 0B;
        }
      if (<<cleanup_point stbi__mad3sizes_valid (4, g->w, g->h, 0) == 0>>)
        {
          <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pcount = g->w * g->h) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->out = (stbi_uc *) stbi__malloc ((size_t) (pcount * 4))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->background = (stbi_uc *) stbi__malloc ((size_t) (pcount * 4))) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->history = (stbi_uc *) stbi__malloc ((size_t) pcount)) >>>>>;
      if ((g->out == 0B || g->background == 0B) || g->history == 0B)
        {
          <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) g->out, 0, (size_t) (pcount * 4)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) g->background, 0, (size_t) (pcount * 4)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) g->history, 0, (size_t) pcount) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (first_frame = 1) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dispose = g->eflags >> 2 & 7) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pcount = g->w * g->h) >>>>>;
      if (dispose == 3 && two_back == 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (dispose = 2) >>>>>;
        }
      if (dispose == 3)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pi = 0) >>>>>;
          while (1)
            {
              if (pi >= pcount) goto <D.13057>;
              if (*(g->history + (sizetype) pi) != 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) (g->out + (sizetype) (pi * 4)), (const void *) (two_back + (sizetype) (pi * 4)), 4) >>>>>;
                }
              <<cleanup_point (void)  ++pi>>;
            }
          <D.13057>:;
        }
      else
        {
          if (dispose == 2)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pi = 0) >>>>>;
              while (1)
                {
                  if (pi >= pcount) goto <D.13059>;
                  if (*(g->history + (sizetype) pi) != 0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) (g->out + (sizetype) (pi * 4)), (const void *) (g->background + (sizetype) (pi * 4)), 4) >>>>>;
                    }
                  <<cleanup_point (void)  ++pi>>;
                }
              <D.13059>:;
            }
          else
            {
              
            }
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) g->background, (const void *) g->out, (size_t) ((g->w * g->h) * 4)) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) g->history, 0, (size_t) (g->w * g->h)) >>>>>;
  {
    while (1)
      {
        {
          int tag;

                    int tag;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tag = (int) stbi__get8 (s)) >>>>>;
          {
            switch (tag)
              {
                {
                  case 44:;
                  {
                    stbi__int32 x;
                    stbi__int32 y;
                    stbi__int32 w;
                    stbi__int32 h;
                    stbi_uc * o;

                                        stbi__int32 x;
                                        stbi__int32 y;
                                        stbi__int32 w;
                                        stbi__int32 h;
                                        stbi_uc * o;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = stbi__get16le (s)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = stbi__get16le (s)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (w = stbi__get16le (s)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (h = stbi__get16le (s)) >>>>>;
                    if (x + w > g->w || y + h > g->h)
                      {
                        <<cleanup_point return <retval> = stbi__err ((const char *) "bad Image Descriptor");, 0B>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->line_size = g->w * 4) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->start_x = x * 4) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->start_y = g->line_size * y) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->max_x = g->start_x + w * 4) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->max_y = g->start_y + g->line_size * h) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->cur_x = g->start_x) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->cur_y = g->start_y) >>>>>;
                    if (w == 0)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->cur_y = g->max_y) >>>>>;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->lflags = (int) stbi__get8 (s)) >>>>>;
                    if ((g->lflags & 64) != 0)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->step = g->line_size * 8) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->parse = 3) >>>>>;
                      }
                    else
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->step = g->line_size) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->parse = 0) >>>>>;
                      }
                    if ((g->lflags & 128) != 0)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__gif_parse_colortable (s, (stbi_uc[4] *) &g->lpal, 2 << (g->lflags & 7), (g->eflags & 1) != 0 ? g->transparent : -1) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->color_table = (stbi_uc *) &g->lpal) >>>>>;
                      }
                    else
                      {
                        if ((g->flags & 128) != 0)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->color_table = (stbi_uc *) &g->pal) >>>>>;
                          }
                        else
                          {
                            <<cleanup_point return <retval> = stbi__err ((const char *) "missing color table");, 0B>>;
                          }
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (o = stbi__process_gif_raster (s, g)) >>>>>;
                    if (o == 0B)
                      {
                        return <retval> = 0B;
                      }
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pcount = g->w * g->h) >>>>>;
                    if (first_frame != 0 && g->bgindex > 0)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pi = 0) >>>>>;
                        while (1)
                          {
                            if (pi >= pcount) goto <D.13064>;
                            if (*(g->history + (sizetype) pi) == 0)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->pal[g->bgindex][3] = 255) >>>>>;
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) (g->out + (sizetype) (pi * 4)), (const void *) &g->pal[g->bgindex], 4) >>>>>;
                              }
                            <<cleanup_point (void)  ++pi>>;
                          }
                        <D.13064>:;
                      }
                    return <retval> = o;
                  }
                  case 33:;
                  {
                    int len;
                    int ext;

                                        int len;
                                        int ext;
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (ext = (int) stbi__get8 (s)) >>>>>;
                    if (ext == 249)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = (int) stbi__get8 (s)) >>>>>;
                        if (len == 4)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->eflags = (int) stbi__get8 (s)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->delay = stbi__get16le (s) * 10) >>>>>;
                            if (g->transparent >= 0)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->pal[g->transparent][3] = 255) >>>>>;
                              }
                            if ((g->eflags & 1) != 0)
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->transparent = (int) stbi__get8 (s)) >>>>>;
                                if (g->transparent >= 0)
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->pal[g->transparent][3] = 0) >>>>>;
                                  }
                              }
                            else
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 1) >>>>>;
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (g->transparent = -1) >>>>>;
                              }
                          }
                        else
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, len) >>>>>;
                            goto <D.13063>;
                          }
                      }
                    while (1)
                      {
                        if (<<cleanup_point (len = (int) stbi__get8 (s)) != 0>>) (void) 0; else goto <D.13066>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, len) >>>>>;
                      }
                    <D.13066>:;
                    goto <D.13063>;
                  }
                  case 59:;
                  return <retval> = (stbi_uc *) s;
                  default:;
                  <<cleanup_point return <retval> = stbi__err ((const char *) "unknown code");, 0B>>;
                }
                <D.13063>:;
              }
          }
        }
      }
  }
}


;; Function void* stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int) (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point stbi__gif_test (s) != 0>>)
      {
        {
          int layers = 0;
          stbi_uc * u = 0B;
          stbi_uc * out = 0B;
          stbi_uc * two_back = 0B;
          struct stbi__gif g;
          int stride;
          int out_size = 0;
          int delays_size = 0;

          <<cleanup_point           int layers = 0;>>;
          <<cleanup_point           stbi_uc * u = 0B;>>;
          <<cleanup_point           stbi_uc * out = 0B;>>;
          <<cleanup_point           stbi_uc * two_back = 0B;>>;
                    struct stbi__gif g;
                    int stride;
          <<cleanup_point           int out_size = 0;>>;
          <<cleanup_point           int delays_size = 0;>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) &g, 0, 34928) >>>>>;
          if (delays != 0B)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*delays = 0B) >>>>>;
            }
          while (1)
            {
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u = stbi__gif_load_next (s, &g, comp, req_comp, two_back)) >>>>>;
                if (u == (stbi_uc *) s)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u = 0B) >>>>>;
                  }
                {
                  if (u != 0B)
                    {
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = g.w) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = g.h) >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++layers >>>>>;
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (stride = (g.w * g.h) * 4) >>>>>;
                        {
                          if (out != 0B)
                            {
                              {
                                void * tmp;

                                                                void * tmp;
                                <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (tmp = realloc ((void *) out, (size_t) (layers * stride))) >>>>>;
                                if (tmp == 0B)
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g.out) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g.history) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g.background) >>>>>;
                                    <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
                                  }
                                else
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = (stbi_uc *) tmp) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out_size = layers * stride) >>>>>;
                                  }
                                if (delays != 0B)
                                  {
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*delays = (int *) realloc ((void *) *delays, (long long unsigned int) layers * 4)) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (delays_size = (int) ((unsigned int) (long long unsigned int) layers * 4)) >>>>>;
                                  }
                              }
                            }
                          else
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = (stbi_uc *) stbi__malloc ((size_t) (layers * stride))) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out_size = layers * stride) >>>>>;
                              if (delays != 0B)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*delays = (int *) stbi__malloc ((long long unsigned int) layers * 4)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (delays_size = (int) ((unsigned int) (long long unsigned int) layers * 4)) >>>>>;
                                }
                            }
                        }
                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memcpy ((void *) (out + (sizetype) ((layers + -1) * stride)), (const void *) u, (size_t) stride) >>>>>;
                        if (layers > 1)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (two_back = out + -(sizetype) (stride * 2)) >>>>>;
                          }
                        if (delays != 0B)
                          {
                            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(*delays + (sizetype) ((long long unsigned int) ((unsigned int) layers + 4294967295) * 4)) = g.delay) >>>>>;
                          }
                      }
                    }
                }
              }
              if (u == 0B) goto <D.13164>;
            }
          <D.13164>:;
          <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g.out) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g.history) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g.background) >>>>>;
          if (req_comp != 0 && req_comp != 4)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = stbi__convert_format (out, 4, req_comp, (unsigned int) (g.w * layers), (unsigned int) g.h)) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*z = layers) >>>>>;
          return <retval> = (void *) out;
        }
      }
    else
      {
        <<cleanup_point return <retval> = stbi__err ((const char *) "not GIF");, 0B>>;
      }
  }
}


;; Function void* stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) (null)
;; enabled by -tree-original


{
  stbi_uc * u = 0B;
  struct stbi__gif g;

  <<cleanup_point   stbi_uc * u = 0B;>>;
    struct stbi__gif g;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) memset ((void *) &g, 0, 34928) >>>>>;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u = stbi__gif_load_next (s, &g, comp, req_comp, 0B)) >>>>>;
  if (u == (stbi_uc *) s)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u = 0B) >>>>>;
    }
  if (u != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = g.w) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = g.h) >>>>>;
      if (req_comp != 0 && req_comp != 4)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (u = stbi__convert_format (u, 4, req_comp, (unsigned int) g.w, (unsigned int) g.h)) >>>>>;
        }
    }
  else
    {
      if (g.out != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g.out) >>>>>;
        }
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g.history) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) g.background) >>>>>;
  return <retval> = (void *) u;
}


;; Function int stbi__gif_info(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = stbi__gif_info_raw (s, x, y, comp)>>;


;; Function int stbi__hdr_test_core(stbi__context*, const char*) (null)
;; enabled by -tree-original


{
  int i;

    int i;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
  while (1)
    {
      if (*(signature + (sizetype) i) == 0) goto <D.13187>;
      if (<<cleanup_point (int) stbi__get8 (s) != (int) *(signature + (sizetype) i)>>)
        {
          return <retval> = 0;
        }
      <<cleanup_point (void)  ++i>>;
    }
  <D.13187>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  return <retval> = 1;
}


;; Function int stbi__hdr_test(stbi__context*) (null)
;; enabled by -tree-original


{
  int r;

    int r;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__hdr_test_core (s, (const char *) "#?RADIANCE\n")) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  if (r == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__hdr_test_core (s, (const char *) "#?RGBE\n")) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
    }
  return <retval> = r;
}


;; Function char* stbi__hdr_gettoken(stbi__context*, char*) (null)
;; enabled by -tree-original


{
  int len = 0;
  char c = 0;

  <<cleanup_point   int len = 0;>>;
  <<cleanup_point   char c = 0;>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (char) stbi__get8 (z)) >>>>>;
  while (1)
    {
      if (<<cleanup_point stbi__at_eof (z) == 0 && c != 10>>) (void) 0; else goto <D.13199>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(buffer + (sizetype) len++ ) = c) >>>>>;
      if (len == 1023)
        {
          while (1)
            {
              if (<<cleanup_point stbi__at_eof (z) == 0 && stbi__get8 (z) != 10>>) (void) 0; else goto <D.13201>;
            }
          <D.13201>:;
          goto <D.13199>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (char) stbi__get8 (z)) >>>>>;
    }
  <D.13199>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(buffer + (sizetype) len) = 0) >>>>>;
  return <retval> = buffer;
}


;; Function void stbi__hdr_convert(float*, stbi_uc*, int) (null)
;; enabled by -tree-original


{
  {
    if (*(input + 3) != 0)
      {
        {
          float f1;

                    float f1;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (f1 = std::ldexp (1.0e+0, (int) *(input + 3) + -136)) >>>>>;
          if (req_comp <= 2)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <output> = ((float) (((int) *NON_LVALUE_EXPR <input> + (int) *(input + 1)) + (int) *(input + 2)) * f1) / 3.0e+0) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <output> = (float) (int) *NON_LVALUE_EXPR <input> * f1) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + 4) = (float) (int) *(input + 1) * f1) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + 8) = (float) (int) *(input + 2) * f1) >>>>>;
            }
          if (req_comp == 2)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + 4) = 1.0e+0) >>>>>;
            }
          if (req_comp == 4)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + 12) = 1.0e+0) >>>>>;
            }
        }
      }
    else
      {
        switch (req_comp)
          {
            case 4:;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + 12) = 1.0e+0) >>>>>;
            case 3:;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <output> = *(output + 4) = *(output + 8) = 0.0) >>>>>;
            goto <D.13216>;
            case 2:;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(output + 4) = 1.0e+0) >>>>>;
            case 1:;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <output> = 0.0) >>>>>;
            goto <D.13216>;
            <D.13216>:;
          }
      }
  }
}


;; Function float* stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) (null)
;; enabled by -tree-original


{
  char buffer[1024];
  char * token;
  int valid = 0;
  int width;
  int height;
  stbi_uc * scanline;
  float * hdr_data;
  int len;
  unsigned char count;
  unsigned char value;
  int i;
  int j;
  int k;
  int c1;
  int c2;
  int z;
  const char * headerToken;

    char buffer[1024];
    char * token;
  <<cleanup_point   int valid = 0;>>;
    int width;
    int height;
    stbi_uc * scanline;
    float * hdr_data;
    int len;
    unsigned char count;
    unsigned char value;
    int i;
    int j;
    int k;
    int c1;
    int c2;
    int z;
    const char * headerToken;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (headerToken = (const char *) stbi__hdr_gettoken (s, (char *) &buffer)) >>>>>;
  if (strcmp (headerToken, (const char *) "#?RADIANCE") != 0 && strcmp (headerToken, (const char *) "#?RGBE") != 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "not HDR");, 0B>>;
    }
  while (1)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (token = stbi__hdr_gettoken (s, (char *) &buffer)) >>>>>;
      if (*NON_LVALUE_EXPR <token> == 0) goto <D.13247>;
      if (strcmp ((const char *) token, (const char *) "FORMAT=32-bit_rle_rgbe") == 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (valid = 1) >>>>>;
        }
    }
  <D.13247>:;
  if (valid == 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "unsupported format");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (token = stbi__hdr_gettoken (s, (char *) &buffer)) >>>>>;
  if (strncmp ((const char *) token, (const char *) "-Y ", 3) != 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "unsupported data layout");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (token = token + 3) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (height = (int) strtol ((const char *) token, &token, 10)) >>>>>;
  while (1)
    {
      if (*token != 32) goto <D.13249>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++token >>>>>;
    }
  <D.13249>:;
  if (strncmp ((const char *) token, (const char *) "+X ", 3) != 0)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "unsupported data layout");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (token = token + 3) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (width = (int) strtol ((const char *) token, 0B, 10)) >>>>>;
  if (height > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  if (width > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = width) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = height) >>>>>;
  if (comp != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = 3) >>>>>;
    }
  if (req_comp == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (req_comp = 3) >>>>>;
    }
  if (<<cleanup_point stbi__mad4sizes_valid (width, height, req_comp, 4, 0) == 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (hdr_data = (float *) stbi__malloc_mad4 (width, height, req_comp, 4, 0)) >>>>>;
  if (hdr_data == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  {
    if (width <= 7 || width > 32767)
      {
        {
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
            while (1)
              {
                if (j >= height) goto <D.13251>;
                {
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                    while (1)
                      {
                        if (i >= width) goto <D.13253>;
                        {
                          stbi_uc rgbe[4];

                                                    stbi_uc rgbe[4];
                          main_decode_loop:;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__getn (s, (stbi_uc *) &rgbe, 4) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__hdr_convert (hdr_data + ((sizetype) ((j * width) * req_comp) + (sizetype) (i * req_comp)) * 4, (stbi_uc *) &rgbe, req_comp) >>>>>;
                        }
                        <<cleanup_point (void)  ++i>>;
                      }
                    <D.13253>:;
                  }
                }
                <<cleanup_point (void)  ++j>>;
              }
            <D.13251>:;
          }
        }
      }
    else
      {
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (scanline = 0B) >>>>>;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
            while (1)
              {
                if (j >= height) goto <D.13255>;
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c1 = (int) stbi__get8 (s)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c2 = (int) stbi__get8 (s)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = (int) stbi__get8 (s)) >>>>>;
                  {
                    if ((c1 != 2 || c2 != 2) || (len & 128) != 0)
                      {
                        {
                          stbi_uc rgbe[4];

                                                    stbi_uc rgbe[4];
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rgbe[0] = (stbi_uc) c1) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rgbe[1] = (stbi_uc) c2) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rgbe[2] = (stbi_uc) len) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (rgbe[3] = stbi__get8 (s)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__hdr_convert (hdr_data, (stbi_uc *) &rgbe, req_comp) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 1) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (j = 0) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) scanline) >>>>>;
                          // predicted unlikely by goto predictor.;
                          goto main_decode_loop;
                        }
                      }
                  }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = len << 8) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (len = TARGET_EXPR <D.13245, stbi__get8 (s)>;, (int) NON_LVALUE_EXPR <D.13245> | len;) >>>>>;
                  if (len != width)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) hdr_data) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) scanline) >>>>>;
                      <<cleanup_point return <retval> = stbi__err ((const char *) "invalid decoded scanline length");, 0B>>;
                    }
                  if (scanline == 0B)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (scanline = (stbi_uc *) stbi__malloc_mad2 (width, 4, 0)) >>>>>;
                      if (scanline == 0B)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) hdr_data) >>>>>;
                          <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
                        }
                    }
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (k = 0) >>>>>;
                    while (1)
                      {
                        if (k > 3) goto <D.13257>;
                        {
                          int nleft;

                                                    int nleft;
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                          while (1)
                            {
                              if (<<cleanup_point (nleft = width - i) > 0>>) (void) 0; else goto <D.13259>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = stbi__get8 (s)) >>>>>;
                              if (count > 128)
                                {
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (value = stbi__get8 (s)) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (count = count + 128) >>>>>;
                                  if ((int) count > nleft)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) hdr_data) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) scanline) >>>>>;
                                      <<cleanup_point return <retval> = stbi__err ((const char *) "corrupt");, 0B>>;
                                    }
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = 0) >>>>>;
                                  while (1)
                                    {
                                      if ((int) count <= z) goto <D.13261>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(scanline + (sizetype) (i++  * 4 + k)) = value) >>>>>;
                                      <<cleanup_point (void)  ++z>>;
                                    }
                                  <D.13261>:;
                                }
                              else
                                {
                                  if ((int) count > nleft)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) hdr_data) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) scanline) >>>>>;
                                      <<cleanup_point return <retval> = stbi__err ((const char *) "corrupt");, 0B>>;
                                    }
                                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (z = 0) >>>>>;
                                  while (1)
                                    {
                                      if ((int) count <= z) goto <D.13263>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(scanline + (sizetype) (i++  * 4 + k)) = stbi__get8 (s)) >>>>>;
                                      <<cleanup_point (void)  ++z>>;
                                    }
                                  <D.13263>:;
                                }
                            }
                          <D.13259>:;
                        }
                        <<cleanup_point (void)  ++k>>;
                      }
                    <D.13257>:;
                  }
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (i = 0) >>>>>;
                  while (1)
                    {
                      if (i >= width) goto <D.13265>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__hdr_convert (hdr_data + (sizetype) ((long long unsigned int) ((j * width + i) * req_comp) * 4), scanline + (sizetype) (i * 4), req_comp) >>>>>;
                      <<cleanup_point (void)  ++i>>;
                    }
                  <D.13265>:;
                }
                <<cleanup_point (void)  ++j>>;
              }
            <D.13255>:;
          }
          if (scanline != 0B)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  free ((void *) scanline) >>>>>;
            }
        }
      }
  }
  return <retval> = hdr_data;
}


;; Function int stbi__hdr_info(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  char buffer[1024];
  char * token;
  int valid = 0;
  int dummy;

    char buffer[1024];
    char * token;
  <<cleanup_point   int valid = 0;>>;
    int dummy;
  if (x == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = &dummy) >>>>>;
    }
  if (y == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = &dummy) >>>>>;
    }
  if (comp == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (comp = &dummy) >>>>>;
    }
  if (<<cleanup_point stbi__hdr_test (s) == 0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  while (1)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (token = stbi__hdr_gettoken (s, (char *) &buffer)) >>>>>;
      if (*NON_LVALUE_EXPR <token> == 0) goto <D.13277>;
      if (strcmp ((const char *) token, (const char *) "FORMAT=32-bit_rle_rgbe") == 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (valid = 1) >>>>>;
        }
    }
  <D.13277>:;
  if (valid == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (token = stbi__hdr_gettoken (s, (char *) &buffer)) >>>>>;
  if (strncmp ((const char *) token, (const char *) "-Y ", 3) != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (token = token + 3) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = (int) strtol ((const char *) token, &token, 10)) >>>>>;
  while (1)
    {
      if (*token != 32) goto <D.13279>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++token >>>>>;
    }
  <D.13279>:;
  if (strncmp ((const char *) token, (const char *) "+X ", 3) != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (token = token + 3) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = (int) strtol ((const char *) token, 0B, 10)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = 3) >>>>>;
  return <retval> = 1;
}


;; Function int stbi__bmp_info(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  void * p;
  struct stbi__bmp_data info;

    void * p;
    struct stbi__bmp_data info;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (info.all_a = 255) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = stbi__bmp_parse_header (s, &info)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  if (p == 0B)
    {
      return <retval> = 0;
    }
  if (x != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = (int) s->img_x) >>>>>;
    }
  if (y != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = (int) s->img_y) >>>>>;
    }
  if (comp != 0B)
    {
      if (info.bpp == 24 && info.ma == 4278190080)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = 3) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = info.ma != 0 ? 4 : 3) >>>>>;
        }
    }
  return <retval> = 1;
}


;; Function int stbi__psd_info(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  int channelCount;
  int dummy;
  int depth;

    int channelCount;
    int dummy;
    int depth;
  if (x == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = &dummy) >>>>>;
    }
  if (y == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = &dummy) >>>>>;
    }
  if (comp == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (comp = &dummy) >>>>>;
    }
  if (<<cleanup_point stbi__get32be (s) != 943870035>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  if (<<cleanup_point stbi__get16be (s) != 1>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 6) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (channelCount = stbi__get16be (s)) >>>>>;
  if (channelCount < 0 || channelCount > 16)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = (int) stbi__get32be (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = (int) stbi__get32be (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (depth = stbi__get16be (s)) >>>>>;
  if (depth != 8 && depth != 16)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  if (<<cleanup_point stbi__get16be (s) != 3>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = 4) >>>>>;
  return <retval> = 1;
}


;; Function int stbi__psd_is16(stbi__context*) (null)
;; enabled by -tree-original


{
  int channelCount;
  int depth;

    int channelCount;
    int depth;
  if (<<cleanup_point stbi__get32be (s) != 943870035>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  if (<<cleanup_point stbi__get16be (s) != 1>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 6) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (channelCount = stbi__get16be (s)) >>>>>;
  if (channelCount < 0 || channelCount > 16)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32be (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__get32be (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (depth = stbi__get16be (s)) >>>>>;
  if (depth != 16)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  return <retval> = 1;
}


;; Function int stbi__pic_info(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  int act_comp = 0;
  int num_packets = 0;
  int chained;
  int dummy;
  struct stbi__pic_packet packets[10];

  <<cleanup_point   int act_comp = 0;>>;
  <<cleanup_point   int num_packets = 0;>>;
    int chained;
    int dummy;
    struct stbi__pic_packet packets[10];
  if (x == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = &dummy) >>>>>;
    }
  if (y == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = &dummy) >>>>>;
    }
  if (comp == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (comp = &dummy) >>>>>;
    }
  if (<<cleanup_point stbi__pic_is4 (s, (const char *) "S\x80\xf64") == 0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 88) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = stbi__get16be (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = stbi__get16be (s)) >>>>>;
  if (<<cleanup_point stbi__at_eof (s) != 0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  if (*x != 0 && 268435456 / *x < *y)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__skip (s, 8) >>>>>;
  while (1)
    {
      {
        struct stbi__pic_packet * packet;

                struct stbi__pic_packet * packet;
        if (num_packets == 10)
          {
            return <retval> = 0;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (packet = &packets[num_packets++ ]) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (chained = (int) stbi__get8 (s)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (packet->size = stbi__get8 (s)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (packet->type = stbi__get8 (s)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (packet->channel = stbi__get8 (s)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (act_comp = (int) packet->channel | act_comp) >>>>>;
        if (<<cleanup_point stbi__at_eof (s) != 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
            return <retval> = 0;
          }
        if (packet->size != 8)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
            return <retval> = 0;
          }
      }
      if (chained == 0) goto <D.13315>;
    }
  <D.13315>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = (act_comp & 16) != 0 ? 4 : 3) >>>>>;
  return <retval> = 1;
}


;; Function int stbi__pnm_test(stbi__context*) (null)
;; enabled by -tree-original


{
  char p;
  char t;

    char p;
    char t;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = (char) stbi__get8 (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t = (char) stbi__get8 (s)) >>>>>;
  if (p != 80 || t != 53 && t != 54)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  return <retval> = 1;
}


;; Function void* stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) (null)
;; enabled by -tree-original


{
  stbi_uc * out;

    stbi_uc * out;
  <<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
  if (<<cleanup_point stbi__pnm_info (s, (int *) &s->img_x, (int *) &s->img_y, &s->img_n) == 0>>)
    {
      return <retval> = 0B;
    }
  if (s->img_y > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  if (s->img_x > 16777216)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = (int) s->img_x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = (int) s->img_y) >>>>>;
  if (comp != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = s->img_n) >>>>>;
    }
  if (<<cleanup_point stbi__mad3sizes_valid (s->img_n, (int) s->img_x, (int) s->img_y, 0) == 0>>)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "too large");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = (stbi_uc *) stbi__malloc_mad3 (s->img_n, (int) s->img_x, (int) s->img_y, 0)) >>>>>;
  if (out == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "outofmem");, 0B>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) stbi__getn (s, out, (int) (((stbi__uint32) s->img_n * s->img_x) * s->img_y)) >>>>>;
  if (req_comp != 0 && s->img_n != req_comp)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (out = stbi__convert_format (out, s->img_n, req_comp, s->img_x, s->img_y)) >>>>>;
      if (out == 0B)
        {
          return <retval> = (void *) out;
        }
    }
  return <retval> = (void *) out;
}


;; Function int stbi__pnm_isspace(char) (null)
;; enabled by -tree-original


return <retval> = (int) (((((c == 32 || c == 9) || c == 10) || c == 11) || c == 12) || c == 13);


;; Function void stbi__pnm_skip_whitespace(stbi__context*, char*) (null)
;; enabled by -tree-original


while (1)
  {
    while (1)
      {
        if (<<cleanup_point stbi__at_eof (s) == 0 && stbi__pnm_isspace ((int) *c) != 0>>) (void) 0; else goto <D.13340>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*c = (char) stbi__get8 (s)) >>>>>;
      }
    <D.13340>:;
    if (<<cleanup_point stbi__at_eof (s) != 0 || *c != 35>>) goto <D.13338>;
    while (1)
      {
        if (<<cleanup_point (stbi__at_eof (s) == 0 && *c != 10) && *c != 13>>) (void) 0; else goto <D.13342>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*c = (char) stbi__get8 (s)) >>>>>;
      }
    <D.13342>:;
  }
<D.13338>:;


;; Function int stbi__pnm_isdigit(char) (null)
;; enabled by -tree-original


return <retval> = (int) (c > 47 && c <= 57);


;; Function int stbi__pnm_getinteger(stbi__context*, char*) (null)
;; enabled by -tree-original


{
  int value = 0;

  <<cleanup_point   int value = 0;>>;
  while (1)
    {
      if (<<cleanup_point stbi__at_eof (s) == 0 && stbi__pnm_isdigit ((int) *c) != 0>>) (void) 0; else goto <D.13352>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (value = value * 10 + ((int) *c + -48)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*c = (char) stbi__get8 (s)) >>>>>;
    }
  <D.13352>:;
  return <retval> = value;
}


;; Function int stbi__pnm_info(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  int maxv;
  int dummy;
  char c;
  char p;
  char t;

    int maxv;
    int dummy;
    char c;
    char p;
    char t;
  if (x == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (x = &dummy) >>>>>;
    }
  if (y == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (y = &dummy) >>>>>;
    }
  if (comp == 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (comp = &dummy) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (p = (char) stbi__get8 (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (t = (char) stbi__get8 (s)) >>>>>;
  if (p != 80 || t != 53 && t != 54)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__rewind (s) >>>>>;
      return <retval> = 0;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*comp = t == 54 ? 3 : 1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (c = (char) stbi__get8 (s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__pnm_skip_whitespace (s, &c) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*x = stbi__pnm_getinteger (s, &c)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__pnm_skip_whitespace (s, &c) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*y = stbi__pnm_getinteger (s, &c)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__pnm_skip_whitespace (s, &c) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (maxv = stbi__pnm_getinteger (s, &c)) >>>>>;
  if (maxv > 255)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "max value > 255")>>;
    }
  else
    {
      return <retval> = 1;
    }
}


;; Function int stbi__info_main(stbi__context*, int*, int*, int*) (null)
;; enabled by -tree-original


if (<<cleanup_point stbi__jpeg_info (s, x, y, comp) != 0>>)
  {
    return <retval> = 1;
  }
if (<<cleanup_point stbi__png_info (s, x, y, comp) != 0>>)
  {
    return <retval> = 1;
  }
if (<<cleanup_point stbi__gif_info (s, x, y, comp) != 0>>)
  {
    return <retval> = 1;
  }
if (<<cleanup_point stbi__bmp_info (s, x, y, comp) != 0>>)
  {
    return <retval> = 1;
  }
if (<<cleanup_point stbi__psd_info (s, x, y, comp) != 0>>)
  {
    return <retval> = 1;
  }
if (<<cleanup_point stbi__pic_info (s, x, y, comp) != 0>>)
  {
    return <retval> = 1;
  }
if (<<cleanup_point stbi__pnm_info (s, x, y, comp) != 0>>)
  {
    return <retval> = 1;
  }
if (<<cleanup_point stbi__hdr_info (s, x, y, comp) != 0>>)
  {
    return <retval> = 1;
  }
if (<<cleanup_point stbi__tga_info (s, x, y, comp) != 0>>)
  {
    return <retval> = 1;
  }
<<cleanup_point return <retval> = stbi__err ((const char *) "unknown image type")>>;


;; Function int stbi__is_16_main(stbi__context*) (null)
;; enabled by -tree-original


if (<<cleanup_point stbi__png_is16 (s) != 0>>)
  {
    return <retval> = 1;
  }
if (<<cleanup_point stbi__psd_is16 (s) != 0>>)
  {
    return <retval> = 1;
  }
return <retval> = 0;


;; Function int stbi_info(const char*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  struct FILE * f;
  int result;

    struct FILE * f;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (f = stbi__fopen (filename, (const char *) "rb")) >>>>>;
    int result;
  if (f == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "can\'t fopen")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi_info_from_file (f, x, y, comp)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fclose (f) >>>>>;
  return <retval> = result;
}


;; Function int stbi_info_from_file(FILE*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  int r;
  struct stbi__context s;
  long int pos;

    int r;
    struct stbi__context s;
    long int pos;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pos = ftell (f)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_file (&s, f) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__info_main (&s, x, y, comp)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fseek (f, pos, 0) >>>>>;
  return <retval> = r;
}


;; Function int stbi_is_16_bit(const char*) (null)
;; enabled by -tree-original


{
  struct FILE * f;
  int result;

    struct FILE * f;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (f = stbi__fopen (filename, (const char *) "rb")) >>>>>;
    int result;
  if (f == 0B)
    {
      <<cleanup_point return <retval> = stbi__err ((const char *) "can\'t fopen")>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (result = stbi_is_16_bit_from_file (f)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fclose (f) >>>>>;
  return <retval> = result;
}


;; Function int stbi_is_16_bit_from_file(FILE*) (null)
;; enabled by -tree-original


{
  int r;
  struct stbi__context s;
  long int pos;

    int r;
    struct stbi__context s;
    long int pos;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (pos = ftell (f)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_file (&s, f) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (r = stbi__is_16_main (&s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fseek (f, pos, 0) >>>>>;
  return <retval> = r;
}


;; Function int stbi_info_from_memory(const stbi_uc*, int, int*, int*, int*) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_mem (&s, buffer, len) >>>>>;
  <<cleanup_point return <retval> = stbi__info_main (&s, x, y, comp)>>;
}


;; Function int stbi_info_from_callbacks(const stbi_io_callbacks*, void*, int*, int*, int*) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_callbacks (&s, (struct stbi_io_callbacks *) c, user) >>>>>;
  <<cleanup_point return <retval> = stbi__info_main (&s, x, y, comp)>>;
}


;; Function int stbi_is_16_bit_from_memory(const stbi_uc*, int) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_mem (&s, buffer, len) >>>>>;
  <<cleanup_point return <retval> = stbi__is_16_main (&s)>>;
}


;; Function int stbi_is_16_bit_from_callbacks(const stbi_io_callbacks*, void*) (null)
;; enabled by -tree-original


{
  struct stbi__context s;

    struct stbi__context s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  stbi__start_callbacks (&s, (struct stbi_io_callbacks *) c, user) >>>>>;
  <<cleanup_point return <retval> = stbi__is_16_main (&s)>>;
}

